{
    "collectBamboo": {
        "code": "async function collectBamboo(bot) {\n  // equip wooden sword if there is one\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  if (woodenSword) {\n    await bot.equip(woodenSword, \"hand\");\n  }\n\n  // Find bamboo plants using the exploreUntil function\n  const bambooPlants = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const bambooPlants = bot.findBlocks({\n      matching: block => block.name === \"bamboo\",\n      maxDistance: 32,\n      count: 10\n    });\n    return bambooPlants.length >= 10 ? bambooPlants : null;\n  });\n  if (!bambooPlants) {\n    bot.chat(\"Could not find enough bamboo plants.\");\n    return;\n  }\n\n  // Break 10 bamboo plants using the iron sword\n  for (const bambooPlant of bambooPlants) {\n    const block = bot.blockAt(bambooPlant);\n    await bot.dig(block);\n  }\n  bot.chat(\"Broke 10 bamboo plants.\");\n\n  // Collect the dropped bamboo items\n  for (const bambooPlant of bambooPlants) {\n    await bot.pathfinder.goto(new GoalBlock(bambooPlant.x, bambooPlant.y, bambooPlant.z));\n  }\n  bot.chat(\"Collected 10 bamboo.\");\n}",
        "description": "Name: collectBamboo; Description:This function collects bamboo by equipping a wooden sword if available, finding and breaking at least 10 bamboo plants, and then collecting the dropped items. It uses the exploreUntil function to search for bamboo, and the pathfinder to navigate to each plant.\n"
    },
    "collectBeetroots": {
        "code": "async function collectBeetroots(bot) {\n    // Use the exploreUntil function to find beetroots\n    const beetroots = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const beetroots = bot.findBlocks({\n        matching: block => block.name === \"beetroots\" && block.getProperties().age === 3,\n        maxDistance: 32,\n        count: 1\n    });\n    return beetroots.length >= 1 ? beetroots : null;\n    });\n    if (!beetroots) {\n        bot.chat(\"Could not find enough beetroots.\");\n        return;\n    }\n    const block = bot.blockAt(beetroots[0]);\n    await bot.pathfinder.goto(new GoalBlock(beetroots[0].x, beetroots[0].y, beetroots[0].z));\n    await bot.dig(block);\n}",
        "description": "Name: collectBeetroots; Description:This function collects beetroots in Minecraft by searching for them, navigating to their location, and digging them up. It uses the exploreUntil function to find beetroots within a certain range, and if successful, the bot moves towards the beetroots and digs them. If no beetroots are found, it sends a chat message.\n"
    },
    "collectCarrots": {
        "code": "async function collectCarrots(bot) {\n    // Use the exploreUntil function to find carrots\n    const carrots = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const carrots = bot.findBlocks({\n        matching: block => block.name === \"carrots\" && block.getProperties().age === 7,\n        maxDistance: 32,\n        count: 1\n    });\n    return carrots.length >= 1 ? carrots : null;\n    });\n    if (!carrots) {\n        bot.chat(\"Could not find enough carrots.\");\n        return;\n    }\n    const block = bot.blockAt(carrots[0]);\n    await bot.pathfinder.goto(new GoalBlock(carrots[0].x, carrots[0].y, carrots[0].z));\n    await bot.dig(block);\n}",
        "description": "Name: collectCarrots; Description:This function searches for carrots using the exploreUntil function, with a timeout of 60 seconds and a maximum distance of 32 blocks. If it finds at least one carrot, it navigates the bot to that carrot and then digs it up. If no carrots are found, the bot chats the message \"Could not find enough carrots.\"\n"
    },
    "collectCobblestone": {
        "code": "async function collectCobblestone(bot) {\n    // Check if the bot has a pickaxe in the inventory\n    let pickaxe = bot.inventory.items().find(item => item.name && item.name.endsWith(\"_pickaxe\"));\n    // If not, craft a wooden pickaxe using the available resources in the inventory\n    if (!pickaxe) {\n      await craftWoodenPickaxe(bot);\n    } else {\n      // Equip the pickaxe\n      pickaxe = bot.inventory.items().find(item => item.name && item.name.endsWith(\"_shovel\"));\n      await bot.equip(pickaxe, \"hand\");\n    }\n    // Use the exploreUntil function to find cobblestone blocks\n    const cobblestoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cobblestoneBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 10\n      });\n      return cobblestoneBlocks.length >= 10 ? cobblestoneBlocks : null;\n    });\n    if (!cobblestoneBlocks) {\n      bot.chat(\"Could not find enough cobblestone.\");\n      return;\n    }\n    // Mine 10 cobblestone blocks using the mineBlock function\n    await mineBlock(bot, \"stone\", 10);\n    bot.chat(\"10 cobblestone mined.\");\n  }",
        "description": "Name: collectCobblestone; Description:This function collects cobblestone by first checking if the bot has a pickaxe. If not, it crafts a wooden pickaxe. Then, it equips the pickaxe and searches for cobblestone blocks. Once found, it mines 10 cobblestone blocks and notifies when the mining is done.\n"
    },
    "collectDirt": {
        "code": "async function collectDirt(bot) {\n    // Check if the bot has a shovel in the inventory\n    let shovel = bot.inventory.items().find(item => item.name && item.name.endsWith(\"_shovel\"));\n    // If not, craft a wooden shovel using the available resources in the inventory\n    if (!shovel) {\n      await craftWoodenshovel(bot);\n    } else {\n      // Equip the shovel\n      shovel = bot.inventory.items().find(item => item.name && item.name.endsWith(\"_shovel\"));\n      await bot.equip(shovel, \"hand\");\n    }\n    // Use the exploreUntil function to find dirt blocks\n    const dirtBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const dirtBlocks = bot.findBlocks({\n        matching: block => block.name === \"dirt\",\n        maxDistance: 32,\n        count: 10\n      });\n      return dirtBlocks.length >= 10 ? dirtBlocks : null;\n    });\n    if (!dirtBlocks) {\n      bot.chat(\"Could not find enough dirt.\");\n      return;\n    }\n    // Mine 10 dirt blocks using the mineBlock function\n    await mineBlock(bot, \"dirt\", 10);\n    bot.chat(\"10 dirt mined.\");\n  }",
        "description": "Name: collectDirt; Description:This function collects dirt by first checking if the bot has a shovel. If not, it crafts a wooden shovel. It then equips the shovel and uses the exploreUntil function to find at least 10 dirt blocks within a certain range. After finding the dirt, it mines 10 dirt blocks and notifies that the action is complete.\n"
    },
    "collectFiveCactusBlocks": {
        "code": "async function collectFiveCactusBlocks(bot) {\n    // Find 5 cactus blocks using the exploreUntil function\n    const cactusBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cactusBlocks = bot.findBlocks({\n        matching: block => block.name === \"cactus\",\n        maxDistance: 32,\n        count: 5\n      });\n      return cactusBlocks.length >= 5 ? cactusBlocks : null;\n    });\n    if (!cactusBlocks) {\n      bot.chat(\"Could not find enough cactus blocks.\");\n      return;\n    }\n  \n    // Mine the 5 cactus blocks using the mineBlock function\n    await mineBlock(bot, \"cactus\", 5);\n    bot.chat(\"5 cactus blocks mined.\");\n  \n    // Collect the dropped cactus items\n    for (const cactusBlock of cactusBlocks) {\n      await bot.pathfinder.goto(new GoalBlock(cactusBlock.x, cactusBlock.y, cactusBlock.z));\n    }\n    bot.chat(\"Collected 5 cactus blocks.\");\n  }",
        "description": "Name: collectFiveCactusBlocks; Description:This function collects 5 cactus blocks by first finding them using the exploreUntil function, then mining them with the mineBlock function, and finally collecting the dropped items.\n"
    },
    "collectLavaWithBucket": {
        "code": "async function collectLavaWithBucket(bot) {\n    // check bucket\n    let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n    if (!bucket) {\n        await craftBucket(bot);\n    }\n    // find lava\n    const lavaBlock = bot.findBlock({\n        matching: mcData.blocksByName.lava.id,\n        maxDistance: 32\n    });\n    if (!lavaBlock) {\n        bot.chat(\"No lava block found nearby. Exploring...\");\n        await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const foundlavaBlock = bot.findBlock({\n            matching: mcData.blocksByName.lava.id,\n            maxDistance: 32\n        });\n        return foundlavaBlock;\n        });\n    }\n\n    await bot.equip(bucket, \"hand\");\n    await bot.lookAt(lavaBlock.position);\n    await bot.activateItem();\n    bot.chat(\"lava collected with bucket.\");\n}",
        "description": "Name: collectLavaWithBucket; Description:This function collects lava using a bucket. It first checks if the player has a bucket in their inventory, crafting one if necessary. Then, it finds a nearby lava block within a 32-block radius. If no lava is found, it explores the area until a lava block is discovered. The function equips the bucket, looks at the lava block, and activates the item to collect the lava. Finally, it sends a chat message confirming the collection.\n"
    },
    "collectMilkWithBucket": {
        "code": "async function collectMilkWithBucket(bot) {\n    // check bucket\n    let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n    if (!bucket) {\n        await craftBucket(bot);\n    }\n    // Equip the bucket\n    await bot.equip(bucket, \"hand\");\n    // Find the nearest cow\n    let cow = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        let cow = bot.nearestEntity(entity => {\n            return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n            });\n            return cow;\n        });\n        if (!cow) {\n            bot.chat(\"Could not find a cow.\");\n            return;\n        }\n    // collect milk\n    cow = bot.nearestEntity(entity => {return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;});\n    await bot.pathfinder.goto(new GoalBlock(cow.position.x, cow.position.y, cow.position.z));\n    await bot.activateEntity(cow);\n  }",
        "description": "Name: collectMilkWithBucket; Description:This function collects milk from a cow using a bucket. It first checks if the player has a bucket in their inventory, crafting one if necessary. Then, it equips the bucket and finds the nearest cow within a 32-block radius. Finally, it navigates to the cow and activates it to collect milk.\n"
    },
    "collectPotatoes": {
        "code": "async function collectPotatoes(bot) {\n    // Use the exploreUntil function to find potatoes\n    const potatoes = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const potatoes = bot.findBlocks({\n        matching: block => block.name === \"potatoes\" && block.getProperties().age === 7,\n        maxDistance: 32,\n        count: 1\n    });\n    return potatoes.length >= 1 ? potatoes : null;\n    });\n    if (!potatoes) {\n        bot.chat(\"Could not find enough potatoes.\");\n        return;\n    }\n    const block = bot.blockAt(potatoes[0]);\n    await bot.pathfinder.goto(new GoalBlock(potatoes[0].x, potatoes[0].y, potatoes[0].z));\n    await bot.dig(block);\n  }",
        "description": "Name: collectPotatoes; Description:This function uses the exploreUntil utility to search for potatoes within a specified range. If it finds at least one potato, it navigates to and then mines the potato block. If no potatoes are found, it sends a chat message.\n"
    },
    "collectSand": {
        "code": "async function collectSand(bot) {\n    // Check if the bot has a shovel in the inventory\n    let shovel = bot.inventory.items().find(item => item.name && item.name.endsWith(\"_shovel\"));\n    // If not, craft a wooden shovel using the available resources in the inventory\n    if (!shovel) {\n      await craftWoodenshovel(bot);\n    } else {\n      // Equip the shovel\n      shovel = bot.inventory.items().find(item => item.name && item.name.endsWith(\"_shovel\"));\n      await bot.equip(shovel, \"hand\");\n    }\n    // Use the exploreUntil function to find sand blocks\n    const sandBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sandBlocks = bot.findBlocks({\n        matching: block => block.name === \"sand\",\n        maxDistance: 32,\n        count: 10\n      });\n      return sandBlocks.length >= 10 ? sandBlocks : null;\n    });\n    if (!sandBlocks) {\n      bot.chat(\"Could not find enough sand.\");\n      return;\n    }\n    // Mine 10 sand blocks using the mineBlock function\n    await mineBlock(bot, \"sand\", 10);\n    bot.chat(\"10 sand mined.\");\n  }",
        "description": "Name: collectSand; Description:This function collects sand in Minecraft by first ensuring the bot has a shovel. If not, it crafts a wooden shovel. It then equips the shovel, finds sand blocks, mines 10 sand blocks, and informs the user when done.\n"
    },
    "collectWaterWithBucket": {
        "code": "async function collectWaterWithBucket(bot) {\n  // check bucket\n  let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  if (!bucket) {\n      await craftBucket(bot);\n  }\n  // find water\n  const waterBlock = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!waterBlock) {\n    bot.chat(\"No water block found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n  }\n  await bot.pathfinder.goto(new GoalBlock(waterBlock.position.x, waterBlock.position.y, waterBlock.position.z))\n  await bot.equip(bucket, \"hand\");\n  await bot.lookAt(waterBlock.position);\n  await bot.activateItem();\n  bot.chat(\"Water collected with bucket.\");\n}",
        "description": "Name: collectWaterWithBucket; Description:This function collects water using a bucket. It first checks if the player has a bucket in their inventory, crafts one if necessary. Then, it finds a nearby water block, or explores until a water block is discovered within 60 seconds. The bot navigates to the water block, equips the bucket, looks at the water, and activates the item to collect water, finally announcing that the water has been collected.\n"
    },
    "collectWheat": {
        "code": "async function collectWheat(bot) {\n    // Use the exploreUntil function to find wheat\n    const ripe_wheat = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const wheat = bot.findBlocks({\n            matching: block => block.name === \"wheat\" && block.getProperties().age === 7,\n            maxDistance: 32,\n            count: 1\n        });\n        return wheat.length >= 1 ? wheat : null;\n    });\n    if (!ripe_wheat) {\n        bot.chat(\"Could not find enough wheat.\");\n        return;\n    }\n    const block = bot.blockAt(ripe_wheat[0]);\n    // const blockProperties = block.getProperties();\n    // bot.chat(`${blockProperties.age}`);\n    // bot.chat(JSON.stringify(blockProperties));\n    await bot.pathfinder.goto(new GoalBlock(ripe_wheat[0].x, ripe_wheat[0].y, ripe_wheat[0].z));\n    await bot.dig(block);\n  }",
        "description": "Name: collectWheat; Description:This function collects wheat by first using the exploreUntil function to locate a wheat block within a specific range. If wheat is found, it navigates towards the block using a pathfinder and then digs it up. If no wheat is found, the bot sends a chat message.\n"
    },
    "collectWheatSeeds": {
        "code": "async function collectWheatSeeds(bot) {\n    // Check seeds\n    let seedsCount = bot.inventory.count(mcData.itemsByName.wheat_seeds.id);\n    let newSeedsCount = seedsCount;\n    // Use the exploreUntil function to find grass\n    do {\n        const grasses = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const grasses = bot.findBlocks({\n            matching: block => block.name === \"grass\",\n            maxDistance: 32,\n            count: 10\n        });\n        return grasses.length >= 10 ? grasses : null;\n        });\n        if (!grasses) {\n            bot.chat(\"Could not find enough grass.\");\n            return;\n        }\n        // Mine 10 grass using the dig function (The mineBlock function is not applicable for collecting plants or crops)\n        for (const grass of grasses) {\n            const block = bot.blockAt(grass);\n            await bot.pathfinder.goto(new GoalBlock(grass.x, grass.y, grass.z));\n            await bot.dig(block);\n            await bot.pathfinder.goto(new GoalBlock(grass.x, grass.y, grass.z));\n        }\n        // Check seeds\n        newSeedsCount = bot.inventory.count(mcData.itemsByName.wheat_seeds.id);\n    } while (newSeedsCount == seedsCount)\n    await bot.chat(`${newSeedsCount-seedsCount} wheat seeds collected.`)\n  }",
        "description": "Name: collectWheatSeeds; Description:This function collects wheat seeds by searching for and mining grass blocks until the player's inventory has an increased amount of seeds. It uses the exploreUntil function to locate grass, mines 10 grass blocks, and checks for seed count changes. If no additional seeds are found, it sends a chat message.\n"
    },
    "cookPorkchops": {
        "code": "async function cookPorkchops(bot) {\n  // Check if there is a furnace and some coals and porks in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  const pork = bot.inventory.findInventoryItem(mcData.itemsByName.porkchop.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!pork)\n    await killOnePig(bot);\n  if (!furnaceItem) \n    await craftFurnace(bot);\n  if (!coal)\n    await mineFiveCoalOres(bot); \n  // Place the furnace near the bot, Smelt 1 porkchops using the available coal as fuel\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  await smeltItem(bot, \"porkchop\", \"coal\", 1);\n  bot.chat(\"1 porkchops cooked.\");\n}",
        "description": "Name: cookPorkchops; Description:This function cooks 1 porkchop in a furnace by checking and acquiring necessary items like furnace, coal, and porkchops. It crafts a furnace if needed, mines coal, kills a pig for porkchops, places the furnace near the bot, and then smelts the porkchop.\n"
    },
    "craftAmethystBlock": {
        "code": "async function craftAmethystBlock(bot) {\n    // Check if there are enough amethyst shards in the inventory\n    let amethystsCount = bot.inventory.count(mcData.itemsByName.amethyst_shard.id);\n    // If not enough amethyst shards, mine some\n    while (amethystsCount < 4) {\n      await mineAmethystCluster(bot);\n      amethystsCount = bot.inventory.count(mcData.itemsByName.amethyst.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an amethyst block using the crafting table\n    await craftItem(bot, \"amethyst_block\", 1);\n    bot.chat(\"Crafted an amethyst block.\");\n}",
        "description": "Name: craftAmethystBlock; Description:This function crafts an amethyst block by first ensuring there are at least 4 amethyst shards in the inventory. If not, it mines amethyst clusters until enough shards are obtained. It then checks for a crafting table in the inventory, crafting one if necessary. The crafting table is placed near the bot, and an amethyst block is crafted using it. Finally, the bot announces that an amethyst block has been crafted.\n"
    },
    "craftArrow": {
        "code": "async function craftArrow(bot) {\n    // Check if there are enough feather, flint and stick in the inventory\n    let feathersCount = bot.inventory.count(mcData.itemsByName.feather.id);\n    let flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n    if (flintsCount < 1) {\n        await mineFlint(bot);\n    }\n    if (sticksCount < 1) {\n        await craftSticks(bot);\n    }\n    while (feathersCount < 1) {\n        await killOneChicken(bot);\n        feathersCount = bot.inventory.count(mcData.itemsByName.feather.id);\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an arrow using the crafting table\n    await craftItem(bot, \"arrow\", 1);\n    bot.chat(\"Crafted an arrow.\");\n}",
        "description": "Name: craftArrow; Description:This function crafts an arrow by checking the inventory for necessary materials (feathers, flint, and sticks). It ensures the presence of flint and sticks, and if not, mines flint or crafts sticks. It also kills chickens for feathers if needed. The function verifies if a crafting table is available, crafts one if not, places it near the bot, and then crafts an arrow using the crafting table. Finally, it sends a chat message confirming the action.\n"
    },
    "craftBed": {
        "code": "async function craftBed(bot) {\n    // Check if there are enough planks and wools in the inventory\n    let planksCount = await getPlanksCount(bot);\n    let woolsCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n    // If not, craft planks from logs\n    if (planksCount < 3) {\n        await craftWoodenPlanks(bot);\n    }\n    while (woolsCount < 3) {\n        await killOneSheep(bot);\n        woolsCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a bed using the crafting table\n    await craftItem(bot, \"bed\", 1);\n    bot.chat(\"Crafted a bed.\");\n  }",
        "description": "Name: craftBed; Description:This function crafts a bed in Minecraft. It first checks if there are enough planks and white wool in the inventory. If not, it crafts planks from logs and kills sheep to obtain wool. Then, it ensures a crafting table is available and places it near the bot. Finally, it uses the crafting table to craft a bed and informs the user via chat.\n"
    },
    "craftBoat": {
        "code": "async function craftBoat(bot) {\n    // Check if there are enough planks in the inventory\n    let planksCount = await getPlanksCount(bot);\n    bot.chat(`inventory planks count: ${planksCount}`);\n    // If not, craft planks from logs\n    while (planksCount < 5) {\n      await craftWoodenPlanks(bot);\n      planksCount = await getPlanksCount(bot);\n      bot.chat(`inventory planks count: ${planksCount}`);\n    }\n    // check wooden_shovel\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    if (!woodenShovel) {\n        await craftWoodenShovel(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a boat using the crafting table\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let type;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      if (plankCount >= 5)\n        type = plankName.match(/(\\w+)_planks/)[1];\n    }\n    await craftItem(bot, type + \"_boat\", 1);\n    bot.chat(\"Crafted a boat.\");\n  }",
        "description": "Name: craftBoat; Description:This function crafts a boat by ensuring there are at least 5 planks in the inventory, crafting planks if necessary. It also checks for a wooden shovel and crafts one if missing. The function then checks for a crafting table, crafting one if needed, placing it next to the bot, and finally crafting a boat.\n"
    },
    "craftBow": {
        "code": "async function craftBow(bot) {\n    // Check if there are enough strings and sticks in the inventory\n    const stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough strings or sticks, collect the required items\n    if (stringsCount < 3) {\n      bot.chat(\"Not enough strings.\")\n      return;\n    }\n    if (sticksCount < 3) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a bow using the crafting table\n    await craftItem(bot, \"bow\", 1);\n    bot.chat(\"Crafted a bow.\");\n  }",
        "description": "Name: craftBow; Description:This function crafts a bow in Minecraft by checking the inventory for necessary materials (strings and sticks), collecting or crafting them if needed, placing a crafting table, and then using it to craft the bow. It also communicates with the player through chat messages.\n"
    },
    "craftBucket": {
        "code": "async function craftBucket(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    bot.chat(\"Collected iron ores.\");\n    await smeltFiveRawIron(bot);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a bucket using the crafting table\n  await craftItem(bot, \"bucket\", 1);\n  bot.chat(\"Crafted a bucket.\");\n}",
        "description": "Name: craftBucket; Description:This function crafts a bucket in Minecraft by first ensuring there are enough iron ingots in the inventory. If not, it mines iron ores and smelts them into iron ingots. It then checks for a crafting table and crafts one if needed. The crafting table is placed near the bot, and finally, a bucket is crafted using the crafting table. The bot also chats messages at various stages of the process.\n"
    },
    "craftChest": {
        "code": "async function craftChest(bot) {\n    // Check if there are enough planks in the inventory\n    let planksCount = await getPlanksCount(bot);\n    // If not, craft planks from logs\n    while (planksCount < 8) {\n      await craftWoodenPlanks(bot);\n      planksCount = await getPlanksCount(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a chest using the crafting table\n    await craftItem(bot, \"chest\", 1);\n    bot.chat(\"Crafted a chest.\");\n  }",
        "description": "Name: craftChest; Description:This function crafts a chest by ensuring there are enough planks, crafting planks if needed, creating a crafting table if not available, placing it near the bot, and then crafting the chest. It also sends a chat message upon completion.\n"
    },
    "craftCopperBlock": {
        "code": "async function craftCopperBlock(bot) {\n    // smelt all raw copper first\n    await smeltAllRawCopper(bot);\n    // Check if there are enough copper ingots in the inventory\n    let copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n    // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n    while (copperIngotsCount < 9) {\n      await minecopperOre(bot);\n      copperIngotsCount += 1;\n    }\n    await smeltAllRawCopper(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an copper block using the crafting table\n    await craftItem(bot, \"copper_block\", 1);\n    bot.chat(\"Crafted an copper block.\");\n}",
        "description": "Name: craftCopperBlock; Description:This function crafts a copper block by first smelting all raw copper, checking and mining for more copper ores if needed, ensuring a crafting table is available, placing it nearby, and then crafting the copper block. It also sends a chat message upon completion.\n"
    },
    "craftCraftingTable": {
        "code": "async function craftCraftingTable(bot) {\n  // check log or planks\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const planksCount = await getPlanksCount(bot);\n  if (planksCount >= 4) {\n    // Craft a crafting table using planks\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  // if no enough planks\n  const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n  // if no logs, mine logs first\n  if (!logInInventory) {\n    bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n    await mineWoodLog(bot);\n    await craftWoodenPlanks(bot);\n  }\n\n  // Craft a crafting table using planks\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}",
        "description": "Name: craftCraftingTable; Description:This function crafts a crafting table in Minecraft. It first checks if the player has at least 4 planks in their inventory. If so, it crafts a crafting table. If not, it looks for wooden logs, mines one if none are found, crafts planks from the logs, and then crafts the crafting table. The function communicates the progress to the player via chat messages.\n"
    },
    "craftDiamondAxe": {
        "code": "async function craftDiamondAxe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 3) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond axe using the crafting table\n    await craftItem(bot, \"diamond_axe\", 1);\n    bot.chat(\"Crafted an diamond axe.\");\n  }",
        "description": "Name: craftDiamondAxe; Description:This function crafts a diamond axe in Minecraft. It first checks if the player has enough diamonds and sticks, gathering and crafting as needed. It then ensures a crafting table is available, crafting one if necessary. The crafting table is placed near the player, and finally, a diamond axe is crafted using the crafting table.\n"
    },
    "craftDiamondBlock": {
        "code": "async function craftDiamondBlock(bot) {\n    // Check if there are enough diamonds in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    // If not enough diamonds, mine some\n    while (diamondsCount < 9) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an diamond block using the crafting table\n    await craftItem(bot, \"diamond_block\", 1);\n    bot.chat(\"Crafted an diamond block.\");\n}",
        "description": "Name: craftDiamondBlock; Description:This function crafts a diamond block by first ensuring there are at least 9 diamonds in the inventory. It mines diamonds if necessary. Then, it checks if a crafting table is available and crafts one if needed. The crafting table is placed next to the bot, and finally, a diamond block is crafted using the crafting table. The function concludes by sending a chat message.\n"
    },
    "craftDiamondBoots": {
        "code": "async function craftDiamondBoots(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 4) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond boots using the crafting table\n    await craftItem(bot, \"diamond_boots\", 1);\n    bot.chat(\"Crafted an diamond boots.\");\n  }",
        "description": "Name: craftDiamondBoots; Description:This function crafts diamond boots for the bot. It first checks if there are at least 4 diamond ingots in the inventory. If not, it collects diamonds until there are enough. Then, it verifies if a crafting table is available; if not, it crafts one. The crafting table is placed near the bot, and finally, the function crafts diamond boots and announces the action.\n"
    },
    "craftDiamondChestplate": {
        "code": "async function craftDiamondChestplate(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 8) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond chestplate using the crafting table\n    await craftItem(bot, \"diamond_chestplate\", 1);\n    bot.chat(\"Crafted an diamond chestplate.\");\n  }",
        "description": "Name: craftDiamondChestplate; Description:This function crafts a diamond chestplate for the Minecraft player bot. It first checks if the bot has enough diamonds and collects more if necessary. Then, it ensures a crafting table is available and crafts one if needed. The crafting table is placed near the bot, and finally, the diamond chestplate is crafted and the bot announces the action.\n"
    },
    "craftDiamondHelmet": {
        "code": "async function craftDiamondHelemt(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 5) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond helemt using the crafting table\n    await craftItem(bot, \"diamond_helemt\", 1);\n    bot.chat(\"Crafted an diamond helemt.\");\n  }",
        "description": "Name: craftDiamondHelmet; Description:This function crafts a diamond helmet for the bot. It first checks if there are enough diamond ingots in the inventory, collects more if necessary, and ensures a crafting table is available. The crafting table is then placed near the bot, and a diamond helmet is crafted using it. Finally, the bot announces that it has crafted a diamond helmet.\n"
    },
    "craftDiamondHoe": {
        "code": "async function craftDiamondHoe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 2) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond hoe using the crafting table\n    await craftItem(bot, \"diamond_hoe\", 1);\n    bot.chat(\"Crafted an diamond hoe.\");\n  }",
        "description": "Name: craftDiamondHoe; Description:This function crafts a diamond hoe in Minecraft by checking for available diamonds and sticks, mining diamonds if needed, crafting sticks if needed, ensuring a crafting table is present, placing the crafting table, and finally crafting the diamond hoe. It also provides chat messages to inform about the progress.\n"
    },
    "craftDiamondLeggings": {
        "code": "async function craftDiamondLeggings(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 7) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond leggings using the crafting table\n    await craftItem(bot, \"diamond_leggings\", 1);\n    bot.chat(\"Crafted an diamond leggings.\");\n  }",
        "description": "Name: craftDiamondLeggings; Description:This function crafts diamond leggings by first checking if there are enough diamonds in the inventory. If not, it mines for diamonds until there are at least 7. It then checks for a crafting table and crafts one if necessary. The crafting table is placed near the bot, and finally, the diamond leggings are crafted and a chat message is sent to confirm.\n"
    },
    "craftDiamondPickaxe": {
        "code": "async function craftDiamondPickaxe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 3) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond pickaxe using the crafting table\n    await craftItem(bot, \"diamond_pickaxe\", 1);\n    bot.chat(\"Crafted an diamond pickaxe.\");\n  }",
        "description": "Name: craftDiamondPickaxe; Description:This function crafts a diamond pickaxe by ensuring the player has enough diamonds and sticks, collecting them if necessary, crafting a crafting table if needed, placing it nearby, and then using it to create the diamond pickaxe.\n"
    },
    "craftDiamondShovel": {
        "code": "async function craftDiamondShovel(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 1) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond shovel using the crafting table\n    await craftItem(bot, \"diamond_shovel\", 1);\n    bot.chat(\"Crafted an diamond shovel.\");\n  }",
        "description": "Name: craftDiamondShovel; Description:This function crafts a diamond shovel in Minecraft. It first checks if the player has enough diamonds and sticks, mining for diamonds and crafting sticks as needed. It then ensures a crafting table is available, crafting one if necessary. The crafting table is placed near the player, and finally, a diamond shovel is crafted using the crafting table. The function also sends chat messages to indicate progress.\n"
    },
    "craftDiamondSword": {
        "code": "async function craftDiamondSword(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 2) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond sword using the crafting table\n    await craftItem(bot, \"diamond_sword\", 1);\n    bot.chat(\"Crafted an diamond sword.\");\n  }",
        "description": "Name: craftDiamondSword; Description:This function crafts a diamond sword in Minecraft by ensuring the player has enough diamonds and sticks, potentially mining for them, crafting sticks if needed, placing a crafting table, and finally crafting the diamond sword.\n"
    },
    "craftEmeraldBlock": {
        "code": "async function craftEmeraldBlock(bot) {\n    // Check if there are enough emeralds in the inventory\n    let emeraldsCount = bot.inventory.count(mcData.itemsByName.emerald.id);\n    // If not enough emeralds, mine some\n    while (emeraldsCount < 9) {\n      await mineEmerald(bot);\n      emeraldsCount = bot.inventory.count(mcData.itemsByName.emerald.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an emerald block using the crafting table\n    await craftItem(bot, \"emerald_block\", 1);\n    bot.chat(\"Crafted an emerald block.\");\n}",
        "description": "Name: craftEmeraldBlock; Description:This function crafts an emerald block by first ensuring there are at least 9 emeralds in the inventory. If not, it mines emeralds until there are enough. It then checks if a crafting table is available, crafting one if necessary. The crafting table is placed near the bot, and an emerald block is crafted using the crafting table. Finally, the function sends a chat message indicating that an emerald block has been crafted.\n"
    },
    "craftFlintAndSteel": {
        "code": "async function craftFlintAndSteel(bot) {\n    \n    // Check if there are enough flints and iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 1) {\n      await mineIronOre(bot);\n      await smeltRawIron(bot);\n      ironIngotsCount += 1;\n    }\n    if (flintsCount < 1) {\n        await mineFlint(bot);\n        flintsCount += 1;\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a shield using the crafting table\n    await craftItem(bot, \"shield\", 1);\n    bot.chat(\"Crafted a shield.\");\n  }",
        "description": "Name: craftFlintAndSteel; Description:This function crafts a flint and steel in the Minecraft game. It first checks the inventory for sufficient iron ingots and flints. If any are missing, it mines iron ore, smelts it, and mines flint as needed. It then ensures a crafting table is available, crafting one if necessary. The crafting table is placed near the bot, and a shield is crafted using it. Finally, the bot announces that a shield has been crafted.\n"
    },
    "craftFurnace": {
        "code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n\n  // If not, check wooden pickaxe and mine the required cobblestones\n  const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n  if (cobblestoneCount < 8) {\n    if (woodenPickaxe < 1)\n      await craftWoodenPickaxe(bot);\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a furnace using the crafting table\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Crafted a furnace.\");\n}",
        "description": "Name: craftFurnace; Description:This function crafts a furnace by first checking if there are enough cobblestones in the inventory. If not, it mines cobblestones and crafts a wooden pickaxe if needed. It then checks for a crafting table and crafts one if absent. The crafting table is placed near the bot, and finally, a furnace is crafted using the crafting table.\n"
    },
    "craftGoldBlock": {
        "code": "async function craftGoldBlock(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    let goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, mine gold ores and smelt them into gold ingots\n    while (goldIngotsCount < 9) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an gold block using the crafting table\n    await craftItem(bot, \"gold_block\", 1);\n    bot.chat(\"Crafted an gold block.\");\n}",
        "description": "Name: craftGoldBlock; Description:This function crafts a gold block by first smelting all raw gold, checking for enough gold ingots, mining and smelting gold ores if necessary. It then ensures a crafting table is available, crafts one if needed, places it near the bot, and finally crafts the gold block. The process concludes with the bot chatting that a gold block has been crafted.\n"
    },
    "craftGoldenAxe": {
        "code": "async function craftGoldenAxe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 3) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden axe using the crafting table\n    await craftItem(bot, \"golden_axe\", 1);\n    bot.chat(\"Crafted an golden axe.\");\n  }",
        "description": "Name: craftGoldenAxe; Description:This function crafts a golden axe in Minecraft by first smelting all raw gold, checking if there are enough gold ingots and sticks, mining gold ore and crafting sticks if necessary. It also ensures a crafting table is available, places it near the bot, and finally crafts the golden axe using the crafting table. The function concludes by sending a chat message to confirm the action.\n"
    },
    "craftGoldenBoots": {
        "code": "async function craftGoldenBoots(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 4) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden boots using the crafting table\n    await craftItem(bot, \"golden_boots\", 1);\n    bot.chat(\"Crafted an golden boots.\");\n  }",
        "description": "Name: craftGoldenBoots; Description:This function crafts golden boots for the bot by first smelting all raw gold, checking if there are enough gold ingots, mining more gold ore if necessary, crafting a crafting table if needed, placing the crafting table nearby, and then crafting the golden boots. It also sends a chat message when the boots are crafted.\n"
    },
    "craftGoldenchestplate": {
        "code": "async function craftGoldenChestplate(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 8) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden chestplate using the crafting table\n    await craftItem(bot, \"golden_chestplate\", 1);\n    bot.chat(\"Crafted an golden chestplate.\");\n  }",
        "description": "Name: craftGoldenchestplate; Description:This function crafts a golden chestplate by smelting raw gold, mining gold ore if necessary, ensuring a crafting table is available, placing the crafting table, and then using it to craft the golden chestplate. It also sends a chat message when done.\n"
    },
    "craftGoldenHelmet": {
        "code": "async function craftGoldenHelmet(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 5) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden helmet using the crafting table\n    await craftItem(bot, \"golden_helmet\", 1);\n    bot.chat(\"Crafted an golden helmet.\");\n  }",
        "description": "Name: craftGoldenHelmet; Description:This function crafts a golden helmet in Minecraft by smelting raw gold, ensuring the necessary gold ingots and a crafting table are available, and then using the crafting table to create the helmet. It also communicates the successful crafting through chat.\n"
    },
    "craftGoldenHoe": {
        "code": "async function craftGoldenHoe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 2) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden hoe using the crafting table\n    await craftItem(bot, \"golden_hoe\", 1);\n    bot.chat(\"Crafted an golden hoe.\");\n  }",
        "description": "Name: craftGoldenHoe; Description:This function crafts a golden hoe in Minecraft by first smelting all raw gold, checking and collecting necessary materials (gold ingots and sticks), ensuring a crafting table is available, placing it near the bot, and finally crafting the golden hoe.\n"
    },
    "craftGoldenLeggings": {
        "code": "async function craftGoldenLeggings(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 7) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden leggings using the crafting table\n    await craftItem(bot, \"golden_leggings\", 1);\n    bot.chat(\"Crafted an golden leggings.\");\n  }",
        "description": "Name: craftGoldenLeggings; Description:This function crafts golden leggings in Minecraft by smelting raw gold, checking for gold ingots, mining gold ore if needed, crafting a crafting table, placing it near the bot, and finally crafting the golden leggings.\n"
    },
    "craftGoldenPickAxe": {
        "code": "async function craftGoldPickaxe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 3) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an gold pickaxe using the crafting table\n    await craftItem(bot, \"gold_pickaxe\", 1);\n    bot.chat(\"Crafted an gold pickaxe.\");\n  }",
        "description": "Name: craftGoldenPickAxe; Description:This function crafts a gold pickaxe in Minecraft by first smelting raw gold, ensuring there are enough gold ingots and sticks, and then arranging the necessary items, including a crafting table. It also places the crafting table near the player's position and finally crafts the gold pickaxe.\n"
    },
    "craftGoldenShovel": {
        "code": "async function craftGoldenShovel(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 1) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden shovel using the crafting table\n    await craftItem(bot, \"golden_shovel\", 1);\n    bot.chat(\"Crafted an golden shovel.\");\n  }",
        "description": "Name: craftGoldenShovel; Description:This function crafts a golden shovel in Minecraft by first smelting all raw gold, ensuring there are enough gold ingots and sticks in the inventory, and potentially mining gold ore, crafting sticks, and placing a crafting table nearby. It then crafts the golden shovel using the crafting table.\n"
    },
    "craftGoldenSword": {
        "code": "async function craftGoldenSword(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 2) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden sword using the crafting table\n    await craftItem(bot, \"golden_sword\", 1);\n    bot.chat(\"Crafted an golden sword.\");\n  }",
        "description": "Name: craftGoldenSword; Description:This function crafts a golden sword in Minecraft by first smelting all raw gold, checking and collecting the necessary materials (gold ingots and sticks), crafting a crafting table if needed, placing it near the bot, and finally crafting the golden sword.\n"
    },
    "craftIronAxe": {
        "code": "async function craftIronAxe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron axe using the crafting table\n  await craftItem(bot, \"iron_axe\", 1);\n  bot.chat(\"Crafted an iron axe.\");\n}",
        "description": "Name: craftIronAxe; Description:This function crafts an iron axe in Minecraft by first smelting raw iron, checking inventory for enough iron ingots and sticks, collecting or crafting missing items, ensuring a crafting table is available, placing it nearby, and finally crafting the iron axe.\n"
    },
    "craftIronBlock": {
        "code": "async function craftIronBlock(bot) {\n    // smelt all raw iron first\n    await smeltAllRawIron(bot);\n    // Check if there are enough iron ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n    while (ironIngotsCount < 9) {\n      await mineFiveIronOres(bot);\n      await smeltAllRawIron(bot);\n      ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an iron block using the crafting table\n    await craftItem(bot, \"iron_block\", 1);\n    bot.chat(\"Crafted an iron block.\");\n  }",
        "description": "Name: craftIronBlock; Description:This function crafts an iron block by first smelting raw iron, mining and smelting more if necessary. It checks for iron ingots in the inventory, ensures a crafting table is available and crafted if needed, places the crafting table near the bot, and finally crafts an iron block. The process ends with a chat message.\n"
    },
    "craftIronBoots": {
        "code": "async function craftIronBoots(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 4) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Crafted an iron boots.\");\n}",
        "description": "Name: craftIronBoots; Description:This function crafts iron boots for the bot by first smelting all raw iron, ensuring at least 4 iron ingots are available. It mines and smelts iron ores if necessary. It checks if a crafting table is present, crafts one if needed, places it near the bot, and finally crafts the iron boots using the crafting table. The bot then announces that it has crafted the iron boots.\n"
    },
    "craftIronChestplate": {
        "code": "async function craftIronChestplate(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 8) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron chestplate using the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Crafted an iron chestplate.\");\n}",
        "description": "Name: craftIronChestplate; Description:This function crafts an iron chestplate by first smelting all raw iron, ensuring there are at least 8 iron ingots. It mines and smelts iron ores if necessary. It checks for a crafting table, crafting one if needed, placing it beside the bot, and finally crafting the iron chestplate.\n"
    },
    "craftIronHelmet": {
        "code": "async function craftIronHelmet(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 5) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Crafted an iron helmet.\");\n}",
        "description": "Name: craftIronHelmet; Description:This function crafts an iron helmet by first smelting all raw iron, ensuring there are at least 5 iron ingots. It mines and smelts iron ores if necessary. It checks for a crafting table, crafting one if needed, places it next to the bot, and finally crafts the iron helmet.\n"
    },
    "craftIronHoe": {
        "code": "async function craftIronHoe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  if (ironIngotsCount < 2) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron hoe using the crafting table\n  await craftItem(bot, \"iron_hoe\", 1);\n  bot.chat(\"Crafted an iron hoe.\");\n}",
        "description": "Name: craftIronHoe; Description:This function crafts an iron hoe by ensuring there are enough iron ingots and sticks in the inventory. It smelts raw iron if necessary, collects sticks, and crafts a crafting table if one isn't available. The crafting table is then placed near the bot, and finally, an iron hoe is crafted.\n"
    },
    "craftIronLeggings": {
        "code": "async function craftIronLeggings(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 7) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Crafted an iron leggings.\");\n}",
        "description": "Name: craftIronLeggings; Description:This function crafts iron leggings for the bot by first smelting all raw iron, then ensuring there are at least 7 iron ingots. It mines and smelts iron ores if necessary. It checks for a crafting table, crafting one if needed, placing it near the bot, and finally crafting the iron leggings.\n"
    },
    "craftIronPickaxe": {
        "code": "async function craftIronPickaxe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron pickaxe using the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}",
        "description": "Name: craftIronPickaxe; Description:This function crafts an iron pickaxe by ensuring there are enough resources (iron ingots and sticks), smelting iron ore if necessary, crafting sticks, placing a crafting table, and finally crafting the iron pickaxe.\n"
    },
    "craftIronShovel": {
        "code": "async function craftIronShovel(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  if (ironIngotsCount < 1) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron shovel using the crafting table\n  await craftItem(bot, \"iron_shovel\", 1);\n  bot.chat(\"Crafted an iron shovel.\");\n}",
        "description": "Name: craftIronShovel; Description:This function crafts an iron shovel by smelting raw iron if necessary, ensuring there are enough iron ingots and sticks, crafting a crafting table if needed, placing it near the bot, and then using it to craft the iron shovel.\n"
    },
    "craftIronSword": {
        "code": "async function craftIronSword(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 1) {\n    await craftSticks(bot);\n  }\n  if (ironIngotsCount < 2) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron sword using the crafting table\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Crafted an iron sword.\");\n}",
        "description": "Name: craftIronSword; Description:This function crafts an iron sword by first smelting all raw iron, ensuring the presence of enough iron ingots and sticks in the inventory, and crafting a crafting table if needed. It then places the crafting table near the bot and uses it to craft the iron sword.\n"
    },
    "craftMinecart": {
        "code": "async function craftMinecart(bot) {\n    // Check if there are enough iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 5) {\n      await mineFiveIronOres(bot);\n      await smeltAllRawIron(bot);\n    }\n  \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a minecart using the crafting table\n    await craftItem(bot, \"minecart\", 1);\n    bot.chat(\"Crafted a minecart.\");\n  }",
        "description": "Name: craftMinecart; Description:This function crafts a minecart by first ensuring there are at least 5 iron ingots in the inventory. If not, it mines and smelts iron ores. It then checks for a crafting table and crafts one if necessary. The crafting table is placed near the bot, and finally, a minecart is crafted using the crafting table. The bot also sends a chat message confirming the action.\n"
    },
    "craftRails": {
        "code": "async function craftRails(bot) {\n    await smeltAllRawIron(bot);\n    // Check iron ingots and sticks\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough iron ingots, collect the required items.\n    do {\n      ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n      if (ironIngotsCount >= 6)\n       break;\n      await mineFiveIronOres(bot);\n      bot.chat(\"Collected iron ores.\");\n      await smeltAllRawIron(bot);\n      bot.chat(\"Smelted iron ores into iron ingots.\");\n    } while (ironIngotsCount < 6)\n    // If not enough sticks, craft some\n    if (!sticksCount) {\n        craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft rails using the crafting table\n    await craftItem(bot, \"rail\", 1);\n    bot.chat(\"Crafted rails.\");\n  }",
        "description": "Name: craftRails; Description:This function crafts rails by first ensuring there are enough iron ingots and sticks. It mines and smelts iron ores if necessary, crafts sticks if needed, and makes sure a crafting table is available. It places the crafting table near the bot and then crafts a rail.\n"
    },
    "craftShears": {
        "code": "async function craftShears(bot) {\n    // Check iron ingots\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not enough iron ingots, collect the required items.\n    if (ironIngotsCount < 2) {\n      await mineFiveIronOres(bot);\n      bot.chat(\"Collected iron ores.\");\n      await smeltAllRawIron(bot);\n      bot.chat(\"Smelted iron ores into iron ingots.\");\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a pair of shears using the crafting table\n    await craftItem(bot, \"shears\", 1);\n    bot.chat(\"Crafted a pair of shears.\");\n  }",
        "description": "Name: craftShears; Description:This function crafts shears by checking for iron ingots, collecting and smelting iron ores if needed, ensuring a crafting table is available, placing it nearby, and then crafting the shears using the crafting table.\n"
    },
    "craftShield": {
        "code": "async function craftShield(bot) {\n    // Check if there are enough planks and iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let totalPlanksCount = await getPlanksCount(bot);\n    // If not, craft some\n    while (totalPlanksCount < 6) {\n        await craftWoodenPlanks(bot);\n        totalPlanksCount += 4;\n    }\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 1) {\n      await mineIronOre(bot);\n      await smeltAllRawIron(bot);\n      ironIngotsCount += 1;\n    }\n  \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a shield using the crafting table\n    await craftItem(bot, \"shield\", 1);\n    bot.chat(\"Crafted a shield.\");\n  }",
        "description": "Name: craftShield; Description:This function crafts a shield by ensuring there are enough materials (planks and iron ingots) in the inventory. It first counts the available iron ingots and planks, crafting wooden planks if necessary. If there are no iron ingots, it mines iron ore, smelts it, and adds one iron ingot to the inventory. It checks for a crafting table and crafts one if needed. The crafting table is then placed near the bot, and finally, a shield is crafted using the crafting table.\n"
    },
    "craftSticks": {
        "code": "async function craftSticks(bot) {\n    const requiredPlanks = 2;\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    let totalPlanksCount = await getPlanksCount(bot);;\n    const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    // If not enough planks\n    if (totalPlanksCount < requiredPlanks) {\n      bot.chat(\"Not enough planks. Mining a log and crafting more...\");\n      if (!logInInventory) {\n        await mineWoodLog(bot);\n      } else {\n        await craftWoodenPlanks(bot);\n      }\n      bot.chat(\"Planks crafted.\");\n    }\n  \n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"4 sticks crafted.\");\n  }",
        "description": "Name: craftSticks; Description:This function crafts sticks in Minecraft by checking if the player has enough planks. It first determines the required number of planks and checks the inventory for logs and corresponding plank types. If there are insufficient planks, it mines a log and crafts wooden planks before crafting the sticks. The function also sends chat messages to update the progress.\n"
    },
    "craftStoneAxe": {
        "code": "async function craftStoneAxe(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    if (cobblestoneCount < 3) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone axe using the crafting table\n    await craftItem(bot, \"stone_axe\", 1);\n    bot.chat(\"Crafted a stone axe.\");\n  }",
        "description": "Name: craftStoneAxe; Description:This function crafts a stone axe in Minecraft. It first checks if the player has enough cobblestone and sticks in their inventory. If not, it collects the necessary items or crafts them. It also ensures a crafting table is available and places it near the player before crafting the stone axe. Finally, it informs the player that the stone axe has been crafted.\n"
    },
    "craftStoneHoe": {
        "code": "async function craftStoneHoe(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    if (cobblestoneCount < 2) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone hoe using the crafting table\n    await craftItem(bot, \"stone_hoe\", 1);\n    bot.chat(\"Crafted a stone hoe.\");\n  }",
        "description": "Name: craftStoneHoe; Description:This function crafts a stone hoe in Minecraft. It first checks if the player has enough cobblestone and sticks in their inventory. If not, it collects the necessary items or crafts them. It also ensures the player has a crafting table, crafts one if needed, places it nearby, and finally crafts the stone hoe.\n"
    },
    "craftStonePickaxe": {
        "code": "async function craftStonePickaxe(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough cobblestone or sticks, collect the required items\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n    bot.chat(\"Crafted sticks.\");\n  }\n  if (cobblestoneCount < 3) {\n    // Check wooden pickaxe\n    const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n    if (woodenPickaxe) {\n      await bot.equip(woodenPickaxe, \"hand\");\n    } else {\n      await craftWoodenPickaxe(bot);\n      const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n      await bot.equip(woodenPickaxe1, \"hand\");\n    }\n    await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(\n    mcData.itemsByName.crafting_table.id\n  );\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft a stone pickaxe using the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}",
        "description": "Name: craftStonePickaxe; Description:This function crafts a stone pickaxe in Minecraft by checking and gathering necessary materials (cobblestone and sticks), crafting a crafting table if needed, and using it to create the stone pickaxe. It also communicates with the player through chat messages.\n"
    },
    "craftStoneShovel": {
        "code": "async function craftStoneShovel(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    if (cobblestoneCount < 1) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone shovel using the crafting table\n    await craftItem(bot, \"stone_shovel\", 1);\n    bot.chat(\"Crafted a stone shovel.\");\n  }",
        "description": "Name: craftStoneShovel; Description:This function crafts a stone shovel by checking and gathering the necessary materials (cobblestone and sticks), crafting a wooden pickaxe and a crafting table if needed, and then placing and using the crafting table to create the stone shovel. It also communicates the progress through chat messages.\n"
    },
    "craftStoneSword": {
        "code": "async function craftStoneSword(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    if (cobblestoneCount < 2) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone sword using the crafting table\n    await craftItem(bot, \"stone_sword\", 1);\n    bot.chat(\"Crafted a stone sword.\");\n  }",
        "description": "Name: craftStoneSword; Description:This function crafts a stone sword by checking and gathering the required materials (cobblestone and sticks), mining cobblestone if needed, crafting sticks if necessary, ensuring a crafting table is available, placing it nearby, and finally crafting the stone sword. It also communicates progress through chat messages.\n"
    },
    "craftTorches": {
        "code": "async function craftTorches(bot) {\n    // check coals and sticks\n    let coalsCount = bot.inventory.count(mcData.itemsByName.coal.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    if (!coalsCount) {\n        mineFiveCoalOres(bot);\n    }\n    if (!sticksCount) {\n        craftSticks(bot);\n    }\n    await craftItem(bot, \"torch\", 1);\n    bot.chat(\"4 torches crafted.\");\n  }",
        "description": "Name: craftTorches; Description:This function crafts torches by checking the inventory for coal and sticks. If coal is missing, it mines five coal ores. If sticks are missing, it crafts sticks. It then crafts one torch and announces that four torches have been crafted.\n"
    },
    "craftWoodenAxe": {
        "code": "async function craftWoodenaxe(bot) {\n    let totalPlanksCount = await getPlanksCount(bot);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 3) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden axe using the crafting table\n    await craftItem(bot, \"wooden_axe\", 1);\n    bot.chat(\"Crafted a wooden axe.\");\n  }",
        "description": "Name: craftWoodenAxe; Description:This function crafts a wooden axe in Minecraft by checking and ensuring the availability of required materials (planks and sticks), crafting them if needed, placing a crafting table, and then finally crafting the wooden axe.\n"
    },
    "craftWoodenHoe": {
        "code": "async function craftWoodenHoe(bot) {\n    let totalPlanksCount = await getPlanksCount(bot);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 2) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden hoe using the crafting table\n    await craftItem(bot, \"wooden_hoe\", 1);\n    bot.chat(\"Crafted a wooden hoe.\");\n  }",
        "description": "Name: craftWoodenHoe; Description:This function crafts a wooden hoe in Minecraft by checking for required materials (planks and sticks), ensuring a crafting table is available, and using it to create the hoe. It also counts and manages existing resources in the bot's inventory.\n"
    },
    "craftWoodenPickaxe": {
        "code": "async function craftWoodenPickaxe(bot) {\n    let totalPlanksCount = await getPlanksCount(bot);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 3) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden pickaxe using the crafting table\n    await craftItem(bot, \"wooden_pickaxe\", 1);\n    bot.chat(\"Crafted a wooden pickaxe.\");\n  }",
        "description": "Name: craftWoodenPickaxe; Description:This function crafts a wooden pickaxe by checking if the necessary materials (planks and sticks) are available in the inventory. It also ensures a crafting table is present, and if not, crafts one and places it near the bot before finally crafting the wooden pickaxe.\n"
    },
    "craftWoodenPlanks": {
        "code": "async function craftWoodenPlanks(bot) {\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    if (!logInInventory) {\n      bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n      await mineWoodLog(bot);\n    }\n    logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    const logIndex = logNames.indexOf(logInInventory);\n    const plankName = plankNames[logIndex];\n    bot.chat(`Crafting 4 ${plankName}...`);\n    await craftItem(bot, plankName, 1);\n    bot.chat(`4 ${plankName} crafted.`);\n  }",
        "description": "Name: craftWoodenPlanks; Description:This function crafts wooden planks from available wooden logs in the bot's inventory. It checks for various types of logs, finds the first available type, mines a wooden log if none are found, then crafts four corresponding planks and announces the action.\n"
    },
    "craftWoodenShovel": {
        "code": "async function craftWoodenShovel(bot) {\n    let totalPlanksCount = await getPlanksCount(bot);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 1) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden shovel using the crafting table\n    await craftItem(bot, \"wooden_shovel\", 1);\n    bot.chat(\"Crafted a wooden shovel.\");\n  }",
        "description": "Name: craftWoodenShovel; Description:This function crafts a wooden shovel in Minecraft by checking and gathering necessary resources like planks and sticks, potentially crafting a crafting table, placing it nearby, and then using it to craft the wooden shovel.\n"
    },
    "craftWoodenSword": {
        "code": "async function craftWoodenSword(bot) {\n    let totalPlanksCount = await getPlanksCount(bot);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 2) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden sword using the crafting table\n    await craftItem(bot, \"wooden_sword\", 1);\n    bot.chat(\"Crafted a wooden sword.\");\n  }",
        "description": "Name: craftWoodenSword; Description:This function crafts a wooden sword in Minecraft by checking and gathering the required materials (planks and sticks), potentially crafting additional planks and sticks, ensuring a crafting table is available, placing the crafting table nearby, and finally using it to craft the wooden sword.\n"
    },
    "eatCookedPorkchop": {
        "code": "async function eatCookedPorkchop(bot) {\n  // Equip the cooked porkchop in the bot's hand\n  const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n  if (cookedPorkchop)\n    await bot.equip(cookedPorkchop, \"hand\");\n  else\n    await cookPorkchops(bot);\n  // Equip the cooked porkchop in the bot's hand\n  const cookedPorkchop1 = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n  await bot.equip(cookedPorkchop1, \"hand\");\n  // Consume the cooked porkchop\n  await bot.consume();\n\n  // Send a chat message to indicate the task is completed\n  bot.chat(\"Ate 1 cooked porkchop.\");\n}",
        "description": "Name: eatCookedPorkchop; Description:This function eats a cooked porkchop by equipping it, consuming it, and then sending a chat message to confirm completion. If the porkchop is not found, it calls the cookPorkchops function.\n"
    },
    "equipArmor": {
        "code": "async function equipArmor(bot) {\n    // Find the chestplate, leggings, helmet and boots in the inventory\n    const Chestplate =  bot.inventory.findInventoryItem(mcData.itemsByName.diamond_chestplate.id)   ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id)      ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.golden_chestplate.id)    ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.chainmail_chestplate.id) ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.leather_chestplate.id);\n    const Leggings =    bot.inventory.findInventoryItem(mcData.itemsByName.diamond_leggings.id)     ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id)        ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.golden_leggings.id)      ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.chainmail_leggings.id)   ||\n                        bot.inventory.findInventoryItem(mcData.itemsByName.leather_leggings.id);\n    const Helmet =  bot.inventory.findInventoryItem(mcData.itemsByName.diamond_helmet.id)     ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id)        ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.golden_helmet.id)      ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.chainmail_helmet.id)   ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.leather_helmet.id);\n    const Boots =   bot.inventory.findInventoryItem(mcData.itemsByName.diamond_boots.id)     ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id)        ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.golden_boots.id)      ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.chainmail_boots.id)   ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.leather_boots.id);\n  \n    // Equip the chestplate, leggings, helmet and boots in the appropriate slots\n    if (Chestplate) {\n        await bot.equip(Chestplate, \"torso\");\n    } else {\n        await bot.chat(\"No chestplate found in inventory.\");\n    }\n    if (Leggings) {\n        await bot.equip(Leggings, \"leg\");\n    } else {\n        await bot.chat(\"No leggings found in inventory.\");\n    }\n    if (Helmet) {\n        await bot.equip(Helmet, \"head\");\n    } else {\n        await bot.chat(\"No helmet found in inventory.\");\n    }\n    if (Boots) {\n        await bot.equip(Boots, \"feet\");\n    } else {\n        await bot.chat(\"No boots found in inventory.\");\n    }\n  }",
        "description": "Name: equipArmor; Description:This function equips the best available armor (chestplate, leggings, helmet, and boots) from the bot's inventory, using a specific order of priority based on the item types. If an item is not found, it sends a chat message indicating the missing armor piece.\n"
    },
    "equipBestSwordOrCraftOne": {
        "code": "async function equipBestSwordOrCraftOne(bot) {\n    // Find the best sword in the bot's inventory\n    let diamondSword = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_sword.id);\n    let ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n    let stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n    let woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n    // Equip the best sword\n    if (diamondSword) {\n        await bot.equip(diamondSword, \"hand\");\n    } else if (ironSword) {\n        await bot.equip(ironSword, \"hand\");\n    } else if (stoneSword) {\n        await bot.equip(stoneSword, \"hand\");\n    } else if (woodenSword) {\n        await bot.equip(woodenSword, \"hand\");\n    } else {\n        await craftWoodenSword(bot);\n        await bot.equip(woodenSword, \"hand\");\n    }\n    bot.chat(\"Sword equipped.\");\n  }",
        "description": "Name: equipBestSwordOrCraftOne; Description:This function equips the best sword available in the bot's inventory, prioritizing diamond, iron, stone, and then wooden swords. If no sword is found, it crafts a wooden sword and equips it. The bot then chats \"Sword equipped.\"\n"
    },
    "equipIronArmor": {
        "code": "async function equipIronArmor(bot) {\n  // Find the iron_chestplate, iron_leggings, iron_boots, and iron_helmet in the inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n\n  // Equip the iron_chestplate, iron_leggings, iron_boots, and iron_helmet in the appropriate slots (legs, feet, and head)\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Equipped iron chestplate.\");\n  } else {\n    bot.chat(\"Iron chestplate not found in inventory.\");\n  }\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Equipped iron leggings.\");\n  } else {\n    bot.chat(\"Iron leggings not found in inventory.\");\n  }\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Equipped iron boots.\");\n  } else {\n    bot.chat(\"Iron boots not found in inventory.\");\n  }\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Equipped iron helmet.\");\n  } else {\n    bot.chat(\"Iron helmet not found in inventory.\");\n  }\n}",
        "description": "Name: equipIronArmor; Description:This function equips the iron chestplate, leggings, boots, and helmet from the bot's inventory, if available, and informs about the status of each item via chat.\n"
    },
    "equipShield": {
        "code": "async function equipShield(bot) {\n    // Find the shield in the bot's inventory\n    const shield = bot.inventory.findInventoryItem(mcData.itemsByName[\"shield\"].id);\n    if (!shield)\n      bot.chat(\"No shield in inventory.\");\n    // Equip the shield in the off-hand slot\n    await bot.equip(shield, \"off-hand\");\n    bot.chat(\"Shield equipped.\");\n  }",
        "description": "Name: equipShield; Description:This function equips a shield in the bot's off-hand slot if it finds one in the inventory. If no shield is found, it sends a chat message saying \"No shield in inventory.\" After equipping the shield, it sends another chat message saying \"Shield equipped.\"\n"
    },
    "equipSword": {
        "code": "async function equipSword(bot) {\n    // Find the best sword in the bot's inventory\n    const Sword =   bot.inventory.findInventoryItem(mcData.itemsByName.diamond_sword.id)||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id)   ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id)  ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.golden_sword.id) ||\n                    bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n    // Equip the best sword\n    if (Sword) {\n        await bot.equip(Sword, \"hand\");\n        bot.chat(\"Sword equipped.\");\n    } else {\n        bot.chat(\"No sword in inventory.\");\n        return;\n    }\n}",
        "description": "Name: equipSword; Description:This function searches for the best available sword in the bot's inventory and equips it to the hand. If no sword is found, the bot chats that there is no sword in the inventory.\n"
    },
    "hoeFarmland": {
        "code": "async function hoeFarmland(bot) {\n    // check hoe\n    const hoe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_hoe.id)  ||\n                bot.inventory.findInventoryItem(mcData.itemsByName.iron_hoe.id)     ||\n                bot.inventory.findInventoryItem(mcData.itemsByName.stone_hoe.id)    ||\n                bot.inventory.findInventoryItem(mcData.itemsByName.golden_hoe.id)   ||\n                bot.inventory.findInventoryItem(mcData.itemsByName.wooden_hoe.id);\n    if (!hoe) {\n        bot.chat(\"No hoe found in inventory.\");\n        return;\n    } else {\n        await bot.equip(hoe, \"hand\");\n    }\n    // find water\n    const water = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const water = bot.findBlocks({\n            matching: block => block.name === \"water\",\n            maxDistance: 4,\n            count: 1\n        });\n        return water.length >= 1 ? water : null;\n    });\n    if (!water) {\n        bot.chat(\"No water nearby.\");\n        return;\n    }\n    // find dirt or grass_block near water\n    const dirtNearWater = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const dirtNearWater = bot.findBlocks({\n            matching: block => (block.name === \"dirt\" ||  block.name === \"grass_block\"),\n            maxDistance: 4,\n            count: 10\n        });\n        return dirtNearWater.length >= 10 ? dirtNearWater : null;\n    });\n    for (pos of dirtNearWater) {\n        // hoe a farmland\n        const farmland = bot.blockAt(pos);\n        await bot.lookAt(pos);\n        await bot.activateBlock(farmland);\n        bot.chat(`hoed block at ${pos}`);\n    }\n}",
        "description": "Name: hoeFarmland; Description:This function checks if the player has a hoe in their inventory, equips it, and then hoes a farmland block at the player's position.\n"
    },
    "killOneBat": {
        "code": "async function killOneBat(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest bat\n    const bat = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const bat = bot.nearestEntity(entity => {\n        return entity.name === \"bat\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return bat;\n    });\n    if (!bat) {\n      bot.chat(\"Could not find a bat.\");\n      return;\n    }\n  \n    // Kill the bat using the sword\n    await killMob(bot, \"bat\", 300);\n    bot.chat(\"Killed a bat.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(bat.position.x, bat.position.y, bat.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneBat; Description:This function equips a sword, finds and kills the nearest bat within a certain range, then collects the dropped items.\n"
    },
    "killOneCamel": {
        "code": "async function killOneCamel(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest camel\n    const camel = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const camel = bot.nearestEntity(entity => {\n        return entity.name === \"camel\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return camel;\n    });\n    if (!camel) {\n      bot.chat(\"Could not find a camel.\");\n      return;\n    }\n  \n    // Kill the camel using the sword\n    await killMob(bot, \"camel\", 300);\n    bot.chat(\"Killed a camel.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(camel.position.x, camel.position.y, camel.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCamel; Description:This function equips a sword, finds and kills the nearest camel within a 60 block radius, then collects the dropped items. It also sends chat messages to indicate progress and completion.\n"
    },
    "killOneChicken": {
        "code": "async function killOneChicken(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest chicken\n    const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const chicken = bot.nearestEntity(entity => {\n        return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return chicken;\n    });\n    if (!chicken) {\n      bot.chat(\"Could not find a chicken.\");\n      return;\n    }\n  \n    // Kill the chicken using the sword\n    await killMob(bot, \"chicken\", 300);\n    bot.chat(\"Killed a chicken.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(chicken.position.x, chicken.position.y, chicken.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneChicken; Description:This function equips a sword, finds and kills the nearest chicken within a certain range, then collects the dropped items.\n"
    },
    "killOneCow": {
        "code": "async function killOneCow(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest cow\n    const cow = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cow = bot.nearestEntity(entity => {\n        return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return cow;\n    });\n    if (!cow) {\n      bot.chat(\"Could not find a cow.\");\n      return;\n    }\n  \n    // Kill the cow using the sword\n    await killMob(bot, \"cow\", 300);\n    bot.chat(\"Killed a cow.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(cow.position.x, cow.position.y, cow.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCow; Description:This function equips a sword, finds and kills the nearest cow within a specified range, then collects the dropped items.\n"
    },
    "killOneCreeper": {
        "code": "async function killOneCreeper(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest creeper\n    const creeper = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const creeper = bot.nearestEntity(entity => {\n        return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return creeper;\n    });\n    if (!creeper) {\n      bot.chat(\"Could not find a creeper.\");\n      return;\n    }\n  \n    // Kill the creeper using the sword\n    await killMob(bot, \"creeper\", 300);\n    bot.chat(\"Killed a creeper.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(creeper.position.x, creeper.position.y, creeper.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCreeper; Description:This function equips a sword, finds and kills the nearest creeper within a specified range, then collects the dropped items.\n"
    },
    "killOneDonkey": {
        "code": "async function killOneDonkey(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest Donkey\n    const Donkey = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const Donkey = bot.nearestEntity(entity => {\n        return entity.name === \"Donkey\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return Donkey;\n    });\n    if (!Donkey) {\n      bot.chat(\"Could not find a Donkey.\");\n      return;\n    }\n  \n    // Kill the Donkey using the sword\n    await killMob(bot, \"Donkey\", 300);\n    bot.chat(\"Killed a Donkey.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(Donkey.position.x, Donkey.position.y, Donkey.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneDonkey; Description:This function equips a sword, finds and kills the nearest Donkey within a specified range, then collects the dropped items.\n"
    },
    "killOneEnderman": {
        "code": "async function killOneEnderman(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest enderman\n    const enderman = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const enderman = bot.nearestEntity(entity => {\n        return entity.name === \"enderman\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return enderman;\n    });\n    if (!enderman) {\n      bot.chat(\"Could not find a enderman.\");\n      return;\n    }\n  \n    // Kill the enderman using the sword\n    await killMob(bot, \"enderman\", 300);\n    bot.chat(\"Killed a enderman.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(enderman.position.x, enderman.position.y, enderman.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneEnderman; Description:This function equips a sword, finds and kills the nearest enderman within a 60 block radius, and collects the dropped items.\n"
    },
    "killOneHorse": {
        "code": "async function killOneHorse(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest horse\n    const horse = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const horse = bot.nearestEntity(entity => {\n        return entity.name === \"horse\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return horse;\n    });\n    if (!horse) {\n      bot.chat(\"Could not find a horse.\");\n      return;\n    }\n  \n    // Kill the horse using the sword\n    await killMob(bot, \"horse\", 300);\n    bot.chat(\"Killed a horse.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(horse.position.x, horse.position.y, horse.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneHorse; Description:This function equips a sword, finds and kills the nearest horse within a specified range, then collects the dropped items.\n"
    },
    "killOneMule": {
        "code": "async function killOneMule(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest ule\n    const ule = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const ule = bot.nearestEntity(entity => {\n        return entity.name === \"ule\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return ule;\n    });\n    if (!ule) {\n      bot.chat(\"Could not find a ule.\");\n      return;\n    }\n  \n    // Kill the ule using the sword\n    await killMob(bot, \"ule\", 300);\n    bot.chat(\"Killed a ule.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(ule.position.x, ule.position.y, ule.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneMule; Description:This function equips a sword, finds and kills the nearest ule within a specified range, then collects the dropped items.\n"
    },
    "killOnePig": {
        "code": "async function killOnePig(bot) {\n  // Equip the sword\n  await equipSword(bot);\n  // Find the nearest pig\n  const pig = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const pig = bot.nearestEntity(entity => {\n      return entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return pig;\n  });\n  if (!pig) {\n    bot.chat(\"Could not find a pig.\");\n    return;\n  }\n\n  // Kill the pig using the sword\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed a pig.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(pig.position.x, pig.position.y, pig.position.z));\n  bot.chat(\"Collected dropped items.\");\n}",
        "description": "Name: killOnePig; Description:This function equips a sword, finds and kills the nearest pig within a 32 block radius, collects the dropped items, and chats about each action.\n"
    },
    "killOnePlayer": {
        "code": "async function killOnePlayer(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest player\n    const player = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const player = bot.nearestEntity(entity => {\n        return entity.name === \"player\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return player;\n    });\n    if (!player) {\n      bot.chat(\"Could not find a player.\");\n      return;\n    }\n  \n    // Kill the player using the sword\n    await killMob(bot, \"player\", 300);\n    bot.chat(\"Killed a player.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(player.position.x, player.position.y, player.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOnePlayer; Description:This function equips a sword, finds and kills the nearest player within a 32-block radius, collects the dropped items, and chats messages accordingly.\n"
    },
    "killOneRabbit": {
        "code": "async function killOneRabbit(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest rabbit\n    const rabbit = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const rabbit = bot.nearestEntity(entity => {\n        return entity.name === \"rabbit\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return rabbit;\n    });\n    if (!rabbit) {\n      bot.chat(\"Could not find a rabbit.\");\n      return;\n    }\n  \n    // Kill the rabbit using the sword\n    await killMob(bot, \"rabbit\", 300);\n    bot.chat(\"Killed a rabbit.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(rabbit.position.x, rabbit.position.y, rabbit.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneRabbit; Description:This function equips a sword, finds and kills the nearest rabbit within a certain range, then collects the dropped items.\n"
    },
    "killOneSheep": {
        "code": "async function killOneSheep(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest sheep\n    const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return sheep;\n    });\n    if (!sheep) {\n      bot.chat(\"Could not find a sheep.\");\n      return;\n    }\n  \n    // Kill the sheep using the sword\n    await killMob(bot, \"sheep\", 300);\n    bot.chat(\"Killed a sheep.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSheep; Description:This function equips a sword, finds and kills the nearest sheep within a specified range, and collects the dropped items.\n"
    },
    "killOneSkeleton": {
        "code": "async function killOneSkeleton(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest skeleton\n    const skeleton = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const skeleton = bot.nearestEntity(entity => {\n        return entity.name === \"skeleton\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return skeleton;\n    });\n    if (!skeleton) {\n      bot.chat(\"Could not find a skeleton.\");\n      return;\n    }\n  \n    // Kill the skeleton using the sword\n    await killMob(bot, \"skeleton\", 300);\n    bot.chat(\"Killed a skeleton.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(skeleton.position.x, skeleton.position.y, skeleton.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSkeleton; Description:This function equips a sword, finds and kills the nearest skeleton within a certain range, and then collects the dropped items.\n"
    },
    "killOneSpider": {
        "code": "async function killOneSpider(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest spider\n    const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const spider = bot.nearestEntity(entity => {\n        return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return spider;\n    });\n    if (!spider) {\n      bot.chat(\"Could not find a spider.\");\n      return;\n    }\n  \n    // Kill the spider using the sword\n    await killMob(bot, \"spider\", 300);\n    bot.chat(\"Killed a spider.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(spider.position.x, spider.position.y, spider.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSpider; Description:This function equips a sword, finds and kills the nearest spider within a certain range, then collects the dropped items.\n"
    },
    "killOneTurtle": {
        "code": "async function killOneTurtle(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest turtle\n    const turtle = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const turtle = bot.nearestEntity(entity => {\n        return entity.name === \"turtle\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return turtle;\n    });\n    if (!turtle) {\n      bot.chat(\"Could not find a turtle.\");\n      return;\n    }\n  \n    // Kill the turtle using the sword\n    await killMob(bot, \"turtle\", 300);\n    bot.chat(\"Killed a turtle.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(turtle.position.x, turtle.position.y, turtle.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneTurtle; Description:This function equips a sword, finds and kills the nearest turtle within a specified range, then collects the dropped items.\n"
    },
    "killOneZombie": {
        "code": "async function killOneZombie(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest zombie\n    const zombie = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const zombie = bot.nearestEntity(entity => {\n        return entity.name === \"zombie\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return zombie;\n    });\n    if (!zombie) {\n      bot.chat(\"Could not find a zombie.\");\n      return;\n    }\n  \n    // Kill the zombie using the sword\n    await killMob(bot, \"zombie\", 300);\n    bot.chat(\"Killed a zombie.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(zombie.position.x, zombie.position.y, zombie.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneZombie; Description:This function equips a sword, finds and kills the nearest zombie within a specified range, and collects the dropped items.\n"
    },
    "killSkeletons": {
        "code": "async function killSkeletons(bot) {\n    do {\n      await equipSword(bot);\n      await equipIronArmor(bot);\n      // Kill the skeleton\n      await killMob(bot, \"skeleton\", 300);\n      bot.chat(\"Killed a skeleton.\");\n      } while (true);\n  }\n  ",
        "description": "Name: killSkeletons; Description:This function equips a sword and iron armor, then continuously kills skeletons in the vicinity until interrupted. After killing a skeleton, it sends a chat message saying \"Killed a skeleton.\"\n"
    },
    "killZombies": {
        "code": "async function killZombies(bot) {\n    do {\n      await equipSword(bot);\n      await equipIronArmor(bot);\n      // Kill the zombie\n      await killMob(bot, \"zombie\", 300);\n      bot.chat(\"Killed a zombie.\");\n      } while (true);\n  }\n  ",
        "description": "Name: killZombies; Description:This function continuously equips a sword and iron armor, kills zombies indefinitely, and chats \"Killed a zombie.\" after each kill. It uses the mineflayer framework for Minecraft gameplay.\n"
    },
    "mineAmethystCluster": {
        "code": "async function mineAmethystCluster(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else {\n        await craftStonePickaxe(bot);\n        stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n    }\n    \n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundAmethystCluster = bot.findBlock({\n        matching: mcData.blocksByName.AmethystCluster_ore.id,\n        maxDistance: 32\n      });\n      return foundAmethystCluster;\n    });\n    await mineBlock(bot, \"amethyst_cluster\", 1);\n    bot.chat(\"1 amethyst_cluster mined.\");\n  }",
        "description": "Name: mineAmethystCluster; Description:This function equips an iron or stone pickaxe if available, crafts a stone pickaxe if necessary, then explores the area until an Amethyst Cluster is found within a 32 block radius. It mines the Amethyst Cluster and sends a chat message confirming the action.\n"
    },
    "mineCopperOre": {
        "code": "async function mineCopperOre(bot) {\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      // Equip the stone pickaxe\n      const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      if (!stonePickaxe) {\n        await craftStonePickaxe(bot);\n        const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe1, \"hand\");\n      }\n      await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 copper_ore block\n    const copperOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const copperOres = bot.findBlocks({\n        matching: block => block.name === \"copper_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return copperOres.length >= 1 ? copperOres : null;\n    });\n    if (!copperOres) {\n      bot.chat(\"Could not find enough copper ores.\");\n      return;\n    }\n  \n    // Mine the 1 copper_ore block\n    await mineBlock(bot, \"copper_ore\", 1);\n    bot.chat(\"1 copper ore mined.\");\n  }",
        "description": "Name: mineCopperOre; Description:This function mines a single copper ore block using an iron or stone pickaxe. It first checks if an iron pickaxe is available, equips it if found, otherwise, it checks for a stone pickaxe or crafts one if needed. It then searches for a nearby copper ore block and mines it, displaying a chat message upon success.\n"
    },
    "mineDiamond": {
        "code": "async function mineDiamond(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (!ironPickaxe) {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    }\n    await bot.equip(ironPickaxe, \"hand\");\n    const oreNames = [\"diamond_ore\", \"deepslate_diamond_ore\"];\n    let y = bot.entity.position.y;\n    let direction;\n    if (y > 16) {\n      direction = new Vec3(0, -1, 0);\n    } else {\n      direction = new Vec3(1, 0, 0);\n    }\n    const oreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => oreNames.includes(block.name),\n        maxDistance: 32\n      });\n    });\n    // bot.chat(`${oreBlock}`);\n    if (!oreBlock) {\n      bot.chat(\"Could not find a diamond ore.\");\n      return;\n    }\n    await mineBlock(bot, oreBlock.name, 1);\n    bot.chat(\"1 diamond mined.\");\n  }",
        "description": "Name: mineDiamond; Description:This function mines a diamond in the game by first checking if the player has an iron pickaxe. If not, it crafts one and equips it. Then, it explores the area to find a diamond ore block within a specific range. Once a diamond ore is found, the function mines it and sends a chat message indicating that a diamond has been mined.\n"
    },
    "mineEmerald": {
        "code": "async function mineEmerald(bot) {\n    let diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (diamondPickaxe) {\n        await bot.equip(diamondPickaxe, \"hand\");\n    } else if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    const oreNames = [\"emerald_ore\", \"deepslate_emerald_ore\"];\n    let y = bot.entity.position.y;\n    let direction;\n    if (y > 16) {\n      direction = new Vec3(0, -1, 0);\n    } else {\n      direction = new Vec3(1, 0, 0);\n    }\n    const oreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => oreNames.includes(block.name),\n        maxDistance: 32\n      });\n    });\n    // bot.chat(`${oreBlock}`);\n    if (!oreBlock) {\n      bot.chat(\"Could not find a emerald ore.\");\n      return;\n    }\n    await mineBlock(bot, oreBlock.name, 1);\n    bot.chat(\"1 emerald mined.\");\n  }",
        "description": "Name: mineEmerald; Description:This function mines an emerald ore block using the best available pickaxe (diamond or iron) or crafts an iron pickaxe if none are present. It equips the pickaxe, explores the area for an emerald ore, mines it, and then sends a chat message indicating that 1 emerald has been mined.\n"
    },
    "mineFiveCoalOres": {
        "code": "async function mineFiveCoalOres(bot) {\n  // Equip the wooden/stone pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (stonePickaxe) {\n    await bot.equip(stonePickaxe, \"hand\");\n  } else if (woodenPickaxe) {\n    await bot.equip(woodenPickaxe, \"hand\");\n  } else {\n    await craftWoodenPickaxe(bot);\n    const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n    await bot.equip(woodenPickaxe1, \"hand\");\n  }\n\n  // Find 5 coal_ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: block => block.name === \"coal_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n  if (!coalOres) {\n    bot.chat(\"Could not find enough coal ores.\");\n    return;\n  }\n\n  // Mine the 5 coal_ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}",
        "description": "Name: mineFiveCoalOres; Description:This function equips a wooden or stone pickaxe, finds and mines 5 coal_ore blocks, and chats a message upon completion.\n"
    },
    "mineFiveIronOres": {
        "code": "async function mineFiveIronOres(bot) {\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else {\n    // Equip the stone pickaxe\n    const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (!stonePickaxe) {\n      await craftStonePickaxe(bot);\n      const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      await bot.equip(stonePickaxe1, \"hand\");\n    }\n    await bot.equip(stonePickaxe, \"hand\");\n  }\n\n  // Find 5 iron_ore blocks\n  const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const ironOres = bot.findBlocks({\n      matching: block => block.name === \"iron_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return ironOres.length >= 5 ? ironOres : null;\n  });\n  if (!ironOres) {\n    bot.chat(\"Could not find enough iron ores.\");\n    return;\n  }\n\n  // Mine the 5 iron_ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}",
        "description": "Name: mineFiveIronOres; Description:This function mines five iron ore blocks using an iron or stone pickaxe. It first checks if an iron pickaxe is available, equips it if found, or crafts and equips a stone pickaxe if not. Then, it searches for at least 5 iron ore blocks within a certain range and mines them. If no iron ores are found, it sends a chat message. After mining, it sends another chat message confirming the action.\n"
    },
    "mineFlint": {
        "code": "async function mineFlint(bot) {\n    let ironShovel = bot.inventory.findInventoryItem(mcData.itemsByName.iron_shovel.id);\n    let stoneShovel = bot.inventory.findInventoryItem(mcData.itemsByName.stone_shovel.id);\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    const flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    let newFlintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    if (ironShovel) {\n        await bot.equip(ironShovel, \"hand\");\n    } else if (stoneShovel) {\n        await bot.equip(stoneShovel, \"hand\");\n    } else if (woodenShovel) {\n        await bot.equip(woodenShovel, \"hand\");\n    } else {\n        await craftWoodenShovel(bot);\n        woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n        await bot.equip(woodenShovel, \"hand\");\n    }\n    // find gravel\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const foundGravel = bot.findBlock({\n        matching: mcData.blocksByName.gravel.id,\n        maxDistance: 32\n      });\n      return foundGravel;\n    });\n    // mine gravel until flint count increase 1\n    while (newFlintsCount == flintsCount) {\n        await mineBlock(bot, \"gravel\", 1);\n        newFlintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    }\n    bot.chat(\"1 flint mined.\");\n  }",
        "description": "Name: mineFlint; Description:This function mines flint by equipping the best available shovel (iron, stone, or wooden) and searching for gravel blocks within a certain distance. It then mines gravel until it obtains at least one flint, and informs the user when a flint has been mined.\n"
    },
    "mineGoldOre": {
        "code": "async function mineGoldOre(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    // Find 1 gold_ore block\n    const goldOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const goldOres = bot.findBlocks({\n        matching: block => block.name === \"gold_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return goldOres.length >= 1 ? goldOres : null;\n    });\n    if (!goldOres) {\n      bot.chat(\"Could not find enough gold ores.\");\n      return;\n    }\n  \n    // Mine the 1 gold_ore block\n    await mineBlock(bot, \"gold_ore\", 1);\n    bot.chat(\"1 gold ore mined.\");\n  }",
        "description": "Name: mineGoldOre; Description:This function mines a single gold_ore block using an iron pickaxe. It first checks if the bot has an iron pickaxe in its inventory. If not, it crafts one and equips it. Then, it searches for a gold_ore block within a specified radius. If a gold_ore block is found, it mines it and sends a chat message. If no gold_ore block is found within the time limit, it informs the user via chat.\n"
    },
    "mineIronOre": {
        "code": "async function mineIronOre(bot) {\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      // Equip the stone pickaxe\n      const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      if (!stonePickaxe) {\n        await craftStonePickaxe(bot);\n        const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe1, \"hand\");\n      }\n      await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 iron_ore block\n    const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const ironOres = bot.findBlocks({\n        matching: block => block.name === \"iron_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return ironOres.length >= 1 ? ironOres : null;\n    });\n    if (!ironOres) {\n      bot.chat(\"Could not find enough iron ores.\");\n      return;\n    }\n  \n    // Mine the 1 iron_ore block\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"1 iron ore mined.\");\n  }",
        "description": "Name: mineIronOre; Description:This function mines 1 iron ore block using an iron or stone pickaxe. It first checks if an iron pickaxe is available, and if so, equips it. If not, it checks for a stone pickaxe and crafts one if needed. Then, it searches for a single iron ore block within a certain range and mines it. Finally, it sends a chat message confirming the mining of the iron ore.\n"
    },
    "mineLapisLazuliOre": {
        "code": "async function mineLapisLazuliOre(bot) {\n    // Equip the iron pickaxe or stone pickaxe\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else {\n        await craftStonePickaxe(bot);\n        stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 lapis_lazuli_ore block\n    const lapisOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const lapisOres = bot.findBlocks({\n        matching: block => block.name === \"lapis_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return lapisOres.length >= 1 ? lapisOres : null;\n    });\n    if (!lapisOres) {\n      bot.chat(\"Could not find lapis lazuli ores.\");\n      return;\n    }\n  \n    // Mine the 1 lapis_lazuli_ore blocks\n    await mineBlock(bot, \"lapis_ore\", 1);\n    bot.chat(\"1 lapis lazuli ores mined.\");\n  }",
        "description": "Name: mineLapisLazuliOre; Description:This function equips an iron or stone pickaxe, searches for a single lapis lazuli ore block within a specified range, mines it, and then sends a chat message indicating the successful mining of one lapis lazuli ore. If no suitable pickaxe is found, it crafts a stone pickaxe before proceeding.\n"
    },
    "mineRedstoneOre": {
        "code": "async function mineRedstoneOre(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    // Find 1 redstone_ore block\n    const redstoneOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const redstoneOres = bot.findBlocks({\n        matching: block => block.name === \"redstone_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return redstoneOres.length >= 1 ? redstoneOres : null;\n    });\n    if (!redstoneOres) {\n      bot.chat(\"Could not find enough redstone ores.\");\n      return;\n    }\n  \n    // Mine the 1 redstone_ore block\n    await mineBlock(bot, \"redstone_ore\", 1);\n    bot.chat(\"1 redstone ore mined.\");\n  }",
        "description": "Name: mineRedstoneOre; Description:This function mines a single redstone ore block using an iron pickaxe. If the bot doesn't have an iron pickaxe, it crafts one first, then equips it. It searches for a nearby redstone ore block within a range of 32 blocks and mines it once found. If no redstone ore is found, the bot sends a chat message.\n"
    },
    "placeMinecartOnRail": {
        "code": "async function placeMinecartOnRail(bot) {\n    // check minecart\n    const minecart = bot.inventory.findInventoryItem(mcData.itemsByName.minecart.id);\n    if (!minecart) {\n        bot.chat(\"No minecart found in inventory.\");\n        return;\n    }\n    // find rail\n    const rail = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const rails = bot.findBlocks({\n          matching: block => block.name === \"rail\",\n          maxDistance: 32,\n          count: 1\n        });\n        return rails.length >= 1 ? rails[0] : null;\n      });\n      if (!rail) {\n        bot.chat(\"Could not find rail.\");\n        return;\n      }\n    // place the minecart\n    // bot.chat(`found rail at ${rail}`);\n    bot.chat(`/summon minecraft:minecart ${rail.x} ${rail.y} ${rail.z}`)\n    bot.chat(`/clear @s minecraft:minecart 1`);\n}",
        "description": "Name: placeMinecartOnRail; Description:This function places a minecart on a rail by first checking if the bot has a minecart in its inventory. If not, it informs the user. It then searches for a rail within a certain range and, upon finding one, summons a minecart at the rail's position. Lastly, it clears one minecart from the bot's inventory.\n"
    },
    "placeRail": {
        "code": "async function placeRail(bot) {\n    // Check rail\n    const rail = bot.inventory.findInventoryItem(mcData.itemsByName.rail.id);\n    if (!rail) {\n        bot.chat(\"No rail found in inventory.\");\n        return;\n    }\n    // Place the rail\n    const railPosition = bot.entity.position;\n    await placeItem(bot, \"rail\", railPosition);\n}",
        "description": "Name: placeRail; Description:This function checks if the player has a rail in their inventory. If not, it sends a chat message. Otherwise, it places a rail at the player's position.\n"
    },
    "placeWater": {
        "code": "async function placeWater(bot) {\n    // Check water\n    const waterBucket = bot.inventory.findInventoryItem(mcData.itemsByName.water_bucket.id);\n    if (!waterBucket) {\n        bot.chat(\"No water_bucket found in inventory.\");\n        return;\n    }\n    // Place the water\n    const waterPosition = bot.entity.position;\n    await bot.equip(waterBucket, \"hand\");\n    await bot.lookAt(waterPosition);\n    await bot.activateItem();\n    bot.chat(\"water placed.\");\n}",
        "description": "Name: placeWater; Description:This function places a water block using a water bucket from the bot's inventory. It first checks if the bot has a water_bucket, then equips it, looks at the bot's position, and activates the item to place the water. If no water_bucket is found, it informs the chat.\n"
    },
    "shearOneSheep": {
        "code": "async function shearOneSheep(bot) {\n    // check shears\n    let shears = bot.inventory.findInventoryItem(mcData.itemsByName.shears.id);\n    if (!shears) {\n        await craftShears(bot);\n    }\n    // Equip the shears\n    await bot.equip(shears, \"hand\");\n    // Find the nearest sheep\n    let sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      let sheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return sheep;\n    });\n    if (!sheep) {\n      bot.chat(\"Could not find a sheep.\");\n      return;\n    }\n  \n    // shear the sheep using the shears\n    sheep = bot.nearestEntity(entity => {return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;});\n    await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    await bot.activateEntity(sheep);\n\n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    bot.chat(\"Collected wools.\");\n  }",
        "description": "Name: shearOneSheep; Description:This function shears one sheep in the Minecraft game. It first checks if the player has shears, crafts them if necessary, equips the shears, finds the nearest sheep within a 32-block range, approaches the sheep to shear it, and then collects any dropped items. If no sheep are found, it sends a chat message.\n"
    },
    "smeltAllRawCopper": {
        "code": "async function smeltAllRawCopper(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  let rawCopperCount = bot.inventory.count(mcData.itemsByName.raw_copper.id)\n  // check raw copper\n  if (!rawCopperCount) {\n    return;\n  }\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Place the furnace near the bot\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt all raw copper using the available coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", rawCopperCount);\n  bot.chat(\"Raw copper smelted.\");\n}",
        "description": "Name: smeltAllRawCopper; Description:This function smelts all raw copper in the bot's inventory. It first checks if there is a furnace and coal available. If a furnace is missing, it crafts one, and if there's no coal, it mines five coal ores. Then, it places the furnace near the bot and uses the coal to smelt the raw copper. Upon completion, it sends a chat message.\n"
    },
    "smeltAllRawGold": {
        "code": "async function smeltAllRawGold(bot) {\n    // Check if there is a furnace and some coals in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n    let rawGoldCount = bot.inventory.count(mcData.itemsByName.raw_gold.id)\n    // check raw gold\n    if (!rawGoldCount) {\n        return;\n    }\n    // If not, craft a furnace using the available cobblestone\n    if (!furnaceItem) {\n        await craftFurnace(bot);\n    }\n    // Place the furnace near the bot\n    const furnacePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"furnace\", furnacePosition);\n    if (!coal)\n        await mineFiveCoalOres(bot);\n    // Smelt all raw gold using the available coal as fuel\n    await smeltItem(bot, \"raw_gold\", \"coal\", rawGoldCount);\n    bot.chat(\"Raw gold smelted.\");\n}",
        "description": "Name: smeltAllRawGold; Description:This function smelts all raw gold in the bot's inventory. It first checks for a furnace and coal. If a furnace is missing, it crafts one, and if there's no coal, it mines five coal ores. Then, it places the furnace near the bot and uses the available coal to smelt the raw gold. Finally, it sends a chat message indicating that the raw gold has been smelted.\n"
    },
    "smeltAllRawIron": {
        "code": "async function smeltAllRawIron(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  let rawIronCount = bot.inventory.count(mcData.itemsByName.raw_iron.id)\n  // check raw iron\n  if (!rawIronCount) {\n    return;\n  }\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Place the furnace near the bot\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt all raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", rawIronCount);\n  bot.chat(\"Raw iron smelted.\");\n}",
        "description": "Name: smeltAllRawIron; Description:This function asynchronously smelts all raw iron in the bot's inventory. It first checks for a furnace and coal, crafting a furnace if needed and mining coal if none is available. It then places the furnace nearby, uses coal to smelt the raw iron, and notifies when the process is complete.\n"
    },
    "smeltCactusIntoGreenDye": {
        "code": "async function smeltCactusIntoGreenDye(bot) {\n    // Check if there is a furnace in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const cactusCount = bot.inventory.count(mcData.itemsByName.cactus.id)\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id)\n    // If not, craft a furnace using the available cobblestone\n    if (!furnaceItem) {\n      await craftFurnace(bot);\n    }\n    // If not enough cactus, collect some\n    if (cactusCount < 5) {\n      await collectFiveCactusBlocks(bot);\n    }\n    // If not enough coal, collect some\n    if (!coal) {\n      await mineFiveCoalOres(bot);\n    }\n    // Find a suitable position to place the furnace\n    const furnacePosition = await findSuitablePosition(bot);\n    if (!furnacePosition) {\n      bot.chat(\"Could not find a suitable position to place the furnace.\");\n      return;\n    }\n  \n    // Place the furnace at the suitable position\n    await placeItem(bot, \"furnace\", furnacePosition);\n  \n    // Smelt 5 cactus using the available coal as fuel\n    await smeltItem(bot, \"cactus\", \"coal\", 5);\n    bot.chat(\"5 cactus smelted into green dye.\");\n  }",
        "description": "Name: smeltCactusIntoGreenDye; Description:This function smelts 5 cactus blocks into green dye using a furnace. It first checks if a furnace is in the inventory, crafts one if needed. Then, it ensures there are at least 5 cactus blocks and sufficient coal. It finds a suitable position to place the furnace, places it, and proceeds to smelt the cactus blocks. Finally, it informs that the process is complete.\n"
    },
    "smeltFiveRawIron": {
        "code": "async function smeltFiveRawIron(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Place the furnace near the bot\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt 5 raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron smelted.\");\n}",
        "description": "Name: smeltFiveRawIron; Description:This function smelts five raw iron into iron ingots using a furnace and coal. It first checks for an existing furnace and coal in the bot's inventory. If no furnace is found, it crafts one. Then, it places the furnace near the bot and, if there's no coal, mines five coal ores. Finally, it uses the coal to smelt the raw iron and informs the chat that 5 raw iron have been smelted.\n"
    },
    "takeAndMoveMinecart": {
        "code": "async function takeAndMoveMinecart(bot) {\n    // find minecart\n    let minecart = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        let minecart = bot.nearestEntity(entity => {\n          return entity.name === \"minecart\" && entity.position.distanceTo(bot.entity.position) < 32;\n        });\n        return minecart;\n      });\n      if (!minecart) {\n        bot.chat(\"Could not find a minecart.\");\n        return;\n      }\n    await bot.pathfinder.goto(new GoalBlock(minecart.position.x, minecart.position.y, minecart.position.z));\n    bot.chat(`${minecart.position}`);\n    await bot.activateEntity(minecart);\n    // move the minecart along the rails\n    let lastPosition = bot.entity.position.clone();\n    do {\n        let forward = minecart.velocity.z > 0 ? 1 : -1;\n        let left = minecart.velocity.x > 0 ? 1 : -1;\n        bot.chat(`minecart.velocity: ${minecart.velocity}, next direction: (x, z) = (${left}, ${forward})`);\n        await bot.moveVehicle(left, forward);\n\n        // check if the position has changed\n        if (lastPosition.equals(bot.entity.position)) {\n            break; // exit the loop if the position has not changed\n        }\n        lastPosition = bot.entity.position.clone();\n    } while (true)\n\n    // dismount from the minecart\n    await bot.dismount();\n}",
        "description": "Name: takeAndMoveMinecart; Description:This function searches for a nearby minecart, moves the bot to it, rides the minecart along the rails, and then dismounts.\n"
    }
}