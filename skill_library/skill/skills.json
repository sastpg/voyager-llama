{
    "collectBamboo": {
        "code": "async function collectBamboo(bot) {\n  // equip wooden sword\n  const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n  if (!woodenSword) {\n    await craftWoodenSword(bot);\n    const newWoodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n    if (newWoodenSword) {\n      await bot.equip(newWoodenSword, \"hand\");\n    } else {\n      console.log(\"Failed to craft wooden sword.\");\n    }\n  } else {\n    await bot.equip(woodenSword, \"hand\");\n  }\n\n  // Find bamboo plants using the exploreUntil function\n  const bambooPlants = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const bambooPlants = bot.findBlocks({\n      matching: block => block.name === \"bamboo\",\n      maxDistance: 32,\n      count: 10\n    });\n    return bambooPlants.length >= 10 ? bambooPlants : null;\n  });\n  if (!bambooPlants) {\n    bot.chat(\"Could not find enough bamboo plants.\");\n    return;\n  }\n\n  // Break 10 bamboo plants using the iron sword\n  for (const bambooPlant of bambooPlants) {\n    const block = bot.blockAt(bambooPlant);\n    await bot.dig(block);\n  }\n  bot.chat(\"Broke 10 bamboo plants.\");\n\n  // Collect the dropped bamboo items\n  for (const bambooPlant of bambooPlants) {\n    await bot.pathfinder.goto(new GoalBlock(bambooPlant.x, bambooPlant.y, bambooPlant.z));\n  }\n  bot.chat(\"Collected 10 bamboo.\");\n}",
        "description": "Name: collectBamboo; Description: This function collects bamboo by equipping a wooden sword, finding bamboo plants using the exploreUntil function, breaking 10 bamboo plants using the iron sword, and collecting the dropped bamboo items.\n"
    },
    "collectCobblestone": {
        "code": "async function collectCobblestone(bot) {\n    // Check if the bot has a pickaxe in the inventory\n    const pickaxe = bot.inventory.items().find(item => item.name.endsWith(\"_pickaxe\"));\n    // If not, craft a wooden pickaxe using the available resources in the inventory\n    if (!pickaxe) {\n      await craftWoodenPickaxe(bot);\n    } else {\n      // Equip the pickaxe\n      await bot.equip(pickaxe, \"hand\");\n    }\n    // Use the exploreUntil function to find cobblestone blocks\n    const cobblestoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cobblestoneBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 10\n      });\n      return cobblestoneBlocks.length >= 10 ? cobblestoneBlocks : null;\n    });\n    if (!cobblestoneBlocks) {\n      bot.chat(\"Could not find enough cobblestone.\");\n      return;\n    }\n    // Mine 10 cobblestone blocks using the mineBlock function\n    await mineBlock(bot, \"stone\", 10);\n    bot.chat(\"10 cobblestone mined.\");\n  }",
        "description": "Name: collectCobblestone; Description: This function collects cobblestone blocks by using a pickaxe to mine them. It first checks if the bot has a pickaxe in its inventory, and if not, crafts a wooden pickaxe using available resources. It then equips the pickaxe and uses the exploreUntil function to find cobblestone blocks within a certain distance. If enough cobblestone blocks are found, the function mines 10 of them using the mineBlock function.\n"
    },
    "collectDirt": {
        "code": "async function collectDirt(bot) {\n    // Check if the bot has a shovel in the inventory\n    const shovel = bot.inventory.items().find(item => item.name.endsWith(\"_shovel\"));\n    // If not, craft a wooden shovel using the available resources in the inventory\n    if (!shovel) {\n      await craftWoodenshovel(bot);\n    } else {\n      // Equip the shovel\n      await bot.equip(shovel, \"hand\");\n    }\n    // Use the exploreUntil function to find dirt blocks\n    const dirtBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const dirtBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 10\n      });\n      return dirtBlocks.length >= 10 ? dirtBlocks : null;\n    });\n    if (!dirtBlocks) {\n      bot.chat(\"Could not find enough dirt.\");\n      return;\n    }\n    // Mine 10 dirt blocks using the mineBlock function\n    await mineBlock(bot, \"dirt\", 10);\n    bot.chat(\"10 dirt mined.\");\n  }",
        "description": "Name: collectDirt; Description: This function collects dirt blocks in Minecraft using the Mineflayer framework. It first checks if the bot has a shovel in its inventory, and if not, crafts a wooden shovel using available resources. The function then equips the shovel and uses the exploreUntil function to find dirt blocks within a 32-block radius. If enough dirt blocks are found, the function mines 10 dirt blocks using the mineBlock function and reports the success in the chat.\n"
    },
    "collectFiveCactusBlocks": {
        "code": "async function collectFiveCactusBlocks(bot) {\n    // Find 5 cactus blocks using the exploreUntil function\n    const cactusBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cactusBlocks = bot.findBlocks({\n        matching: block => block.name === \"cactus\",\n        maxDistance: 32,\n        count: 5\n      });\n      return cactusBlocks.length >= 5 ? cactusBlocks : null;\n    });\n    if (!cactusBlocks) {\n      bot.chat(\"Could not find enough cactus blocks.\");\n      return;\n    }\n  \n    // Mine the 5 cactus blocks using the mineBlock function\n    await mineBlock(bot, \"cactus\", 5);\n    bot.chat(\"5 cactus blocks mined.\");\n  \n    // Collect the dropped cactus items\n    for (const cactusBlock of cactusBlocks) {\n      await bot.pathfinder.goto(new GoalBlock(cactusBlock.x, cactusBlock.y, cactusBlock.z));\n    }\n    bot.chat(\"Collected 5 cactus blocks.\");\n  }",
        "description": "Name: collectFiveCactusBlocks; Description: This function collects five cactus blocks and mines them to drop cactus items. It first uses the exploreUntil function to find five cactus blocks within a 32-block radius, and then mines all of them using the mineBlock function. Finally, it collects the dropped cactus items by navigating to each block and picking it up.\n"
    },
    "collectLavaWithBucket": {
        "code": "async function collectLavaWithBucket(bot) {\n    // check bucket\n    let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n    if (!bucket) {\n        await craftBucket(bot);\n    }\n    // find lava\n    const lavaBlock = bot.findBlock({\n        matching: mcData.blocksByName.lava.id,\n        maxDistance: 32\n    });\n    if (!lavaBlock) {\n        bot.chat(\"No lava block found nearby. Exploring...\");\n        await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const foundlavaBlock = bot.findBlock({\n            matching: mcData.blocksByName.lava.id,\n            maxDistance: 32\n        });\n        return foundlavaBlock;\n        });\n    }\n\n    await bot.equip(bucket, \"hand\");\n    await bot.lookAt(lavaBlock.position);\n    await bot.activateItem();\n    bot.chat(\"lava collected with bucket.\");\n}",
        "description": "Name: collectLavaWithBucket; Description: This function collects lava with a bucket. It first checks if the player has a bucket in their inventory, and if not, it crafts one. Then, it searches for lava blocks within a 32-block radius, and if none are found, it explores the area until a lava block is found. Once a lava block is found, the function equips the bucket, looks at the lava block, and activates the item to collect the lava. Finally, it sends a message to the player indicating that the lava has been collected.\n"
    },
    "collectSand": {
        "code": "async function collectSand(bot) {\n    // Check if the bot has a shovel in the inventory\n    const shovel = bot.inventory.items().find(item => item.name.endsWith(\"_shovel\"));\n    // If not, craft a wooden shovel using the available resources in the inventory\n    if (!shovel) {\n      await craftWoodenshovel(bot);\n    } else {\n      // Equip the shovel\n      await bot.equip(shovel, \"hand\");\n    }\n    // Use the exploreUntil function to find sand blocks\n    const sandBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sandBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 10\n      });\n      return sandBlocks.length >= 10 ? sandBlocks : null;\n    });\n    if (!sandBlocks) {\n      bot.chat(\"Could not find enough sand.\");\n      return;\n    }\n    // Mine 10 sand blocks using the mineBlock function\n    await mineBlock(bot, \"sand\", 10);\n    bot.chat(\"10 sand mined.\");\n  }",
        "description": "Name: collectSand; Description: This function collects sand blocks in Minecraft using the Mineflayer framework. It first checks if the bot has a shovel in its inventory, and if not, crafts a wooden shovel using available resources. The function then equips the shovel and uses the exploreUntil function to find sand blocks within a 32-block radius. If enough sand blocks are found, the function mines 10 sand blocks using the mineBlock function.\n"
    },
    "collectWaterWithBucket": {
        "code": "async function collectWaterWithBucket(bot) {\n  // check bucket\n  let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  if (!bucket) {\n      await craftBucket(bot);\n  }\n  // find water\n  const waterBlock = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!waterBlock) {\n    bot.chat(\"No water block found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n  }\n  \n  await bot.equip(bucket, \"hand\");\n  await bot.lookAt(waterBlock.position);\n  await bot.activateItem();\n  bot.chat(\"Water collected with bucket.\");\n}",
        "description": "Name: collectWaterWithBucket; Description: This function collects water with a bucket. It first checks if the player has a bucket in their inventory, and if not, it crafts one. Then, it searches for water blocks within a 32-block radius, and if none are found, it explores the area until a water block is found. Once a water block is found, the function equips the bucket, looks at the water block, and activates the item to collect the water.\n"
    },
    "cookPorkchops": {
        "code": "async function cookPorkchops(bot) {\n  // Check if there is a furnace and some coals and porks in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  const pork = bot.inventory.findInventoryItem(mcData.itemsByName.porkchop.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!pork)\n    await killOnePig(bot);\n  if (!furnaceItem) \n    await craftFurnace(bot);\n  if (!coal)\n    await mineFiveCoalOres(bot); \n  // Place the furnace near the bot, Smelt 1 porkchops using the available coal as fuel\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  await smeltItem(bot, \"porkchop\", \"coal\", 1);\n  bot.chat(\"1 porkchops cooked.\");\n}",
        "description": "Name: cookPorkchops; Description: This function cooks porkchops using a furnace. It first checks if the player has a furnace, coal, and porkchops in their inventory, and if not, it performs certain actions to obtain them. If all the items are present, it places the furnace near the player and smelts one porkchop using the available coal as fuel. Finally, it sends a message to the player indicating that one porkchop has been cooked.\n"
    },
    "craftAmethystBlock": {
        "code": "async function craftAmethystBlock(bot) {\n    // Check if there are enough amethyst shards in the inventory\n    let amethystsCount = bot.inventory.count(mcData.itemsByName.amethyst_shard.id);\n    // If not enough amethyst shards, mine some\n    while (amethystsCount < 4) {\n      await mineAmethystCluster(bot);\n      amethystsCount = bot.inventory.count(mcData.itemsByName.amethyst.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an amethyst block using the crafting table\n    await craftItem(bot, \"amethyst_block\", 1);\n    bot.chat(\"Crafted an amethyst block.\");\n}",
        "description": "Name: craftAmethystBlock; Description: This function crafts an amethyst block using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough amethyst shards in the inventory, and if not, mines some using the `mineAmethystCluster` function. It then checks if a crafting table is in the inventory, and if not, crafts one using the `craftCraftingTable` function. Finally, it places the crafting table near the bot and crafts an amethyst block using the crafting table.\n"
    },
    "craftArrow": {
        "code": "async function craftArrow(bot) {\n    // Check if there are enough feather, flint and stick in the inventory\n    let feathersCount = bot.inventory.count(mcData.itemsByName.feather.id);\n    let flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n    if (flintsCount < 1) {\n        await mineFlint(bot);\n    }\n    if (sticksCount < 1) {\n        await craftSticks(bot);\n    }\n    while (feathersCount < 1) {\n        await killOneChicken(bot);\n        feathersCount = bot.inventory.count(mcData.itemsByName.feather.id);\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an arrow using the crafting table\n    await craftItem(bot, \"arrow\", 1);\n    bot.chat(\"Crafted an arrow.\");\n}",
        "description": "Name: craftArrow; Description: This function crafts an arrow using the Mineflayer framework for Minecraft gameplay. It checks if the player has enough feathers, flint, and sticks in their inventory, and if not, it crafts them using the appropriate commands. Once the necessary items are available, it places a crafting table near the player and crafts an arrow using the table. Finally, it sends a chat message to the player indicating that an arrow has been crafted.\n"
    },
    "craftBed": {
        "code": "async function craftBed(bot) {\n    // Check if there are enough planks and wools in the inventory\n    const planksNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"]\n    let planksCount = bot.inventory.count({matching: block => planksNames.includes(block.name)});\n    let woolsCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n    // If not, craft planks from logs\n    if (planksCount < 3) {\n        await craftWoodenPlanks(bot);\n    }\n    while (woolsCount < 3) {\n        await killOneSheep(bot);\n        woolsCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a bed using the crafting table\n    await craftItem(bot, \"bed\", 1);\n    bot.chat(\"Crafted a bed.\");\n  }",
        "description": "Name: craftBed; Description: This function crafts a bed using the Mineflayer framework for Minecraft gameplay. It checks if the player has enough planks and wools in their inventory, and if not, crafts them from logs and sheep. It also checks if a crafting table is in the player's inventory, and if not, crafts one. Finally, it places the crafting table near the player and crafts a bed using the table.\n"
    },
    "craftBoat": {
        "code": "async function craftBoat(bot) {\n    // Check if there are enough planks in the inventory\n    const planksNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"]\n    let planksCount = bot.inventory.count({matching: block => planksNames.includes(block.name)});\n    // If not, craft planks from logs\n    while (planksCount < 5) {\n      await craftWoodenPlanks(bot);\n      planksCount = bot.inventory.count({matching: block => planksNames.includes(block.name)});\n    }\n    // check wooden_shovel\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    if (!woodenShovel) {\n        await craftWoodenShovel(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a boat using the crafting table\n    await craftItem(bot, \"boat\", 1);\n    bot.chat(\"Crafted a boat.\");\n  }",
        "description": "Name: craftBoat; Description: This function crafts a boat using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough planks in the inventory, and if not, crafts planks from logs. It then checks if a wooden shovel is in the inventory, and if not, crafts one. Finally, it places a crafting table near the bot and crafts a boat using the table.\n"
    },
    "craftBow": {
        "code": "async function craftBow(bot) {\n    // Check if there are enough strings and sticks in the inventory\n    const stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough strings or sticks, collect the required items\n    if (stringsCount < 3) {\n      bot.chat(\"Not enough strings.\")\n      return;\n    }\n    if (sticksCount < 3) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a bow using the crafting table\n    await craftItem(bot, \"bow\", 1);\n    bot.chat(\"Crafted a bow.\");\n  }",
        "description": "Name: craftBow; Description: This function crafts a bow using the Mineflayer framework for Minecraft gameplay. It checks if the player has enough strings and sticks in their inventory, and if not, collects them. It also checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the player and crafts a bow using the table.\n"
    },
    "craftBucket": {
        "code": "async function craftBucket(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    bot.chat(\"Collected iron ores.\");\n    await smeltFiveRawIron(bot);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a bucket using the crafting table\n  await craftItem(bot, \"bucket\", 1);\n  bot.chat(\"Crafted a bucket.\");\n}",
        "description": "Name: craftBucket; Description: This function crafts a bucket using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough iron ingots in the inventory, and if not, mines iron ores and smelts them into iron ingots. It then checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the bot and crafts a bucket using the crafting table.\n"
    },
    "craftChest": {
        "code": "async function craftChest(bot) {\n    // Check if there are enough planks in the inventory\n    const planksNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"]\n    let planksCount = bot.inventory.count({matching: block => planksNames.includes(block.name)});\n    // If not, craft planks from logs\n    while (planksCount < 8) {\n      await craftWoodenPlanks(bot);\n      planksCount = bot.inventory.count({matching: block => planksNames.includes(block.name)});\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a chest using the crafting table\n    await craftItem(bot, \"chest\", 1);\n    bot.chat(\"Crafted a chest.\");\n  }",
        "description": "Name: craftChest; Description: This function crafts a chest using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough planks in the inventory, and if not, crafts planks from logs. It then checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the bot and crafts a chest using the table.\n"
    },
    "craftCopperBlock": {
        "code": "async function craftCopperBlock(bot) {\n    // smelt all raw copper first\n    await smeltAllRawCopper(bot);\n    // Check if there are enough copper ingots in the inventory\n    let copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n    // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n    while (copperIngotsCount < 9) {\n      await minecopperOre(bot);\n      copperIngotsCount += 1;\n    }\n    await smeltAllRawCopper(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an copper block using the crafting table\n    await craftItem(bot, \"copper_block\", 1);\n    bot.chat(\"Crafted an copper block.\");\n}",
        "description": "Name: craftCopperBlock; Description: This function crafts a copper block by first smelting all raw copper, then checking if there are enough copper ingots in the inventory. If not, it mines copper ores and smelts them into copper ingots. If a crafting table is not in the inventory, it crafts one and places it near the bot. Finally, it crafts a copper block using the crafting table.\n"
    },
    "craftCraftingTable": {
        "code": "async function craftCraftingTable(bot) {\n  // check log or planks\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const planksNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"]\n  const planksCount = bot.inventory.count({\n    matching: block => planksNames.includes(block.name),\n  });\n  if (planksCount >= 4) {\n    // Craft a crafting table using planks\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  // if no enough planks\n  const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n  // if no logs, mine logs first\n  if (!logInInventory) {\n    bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n    await mineWoodLog(bot);\n  }\n  const logInInventory1 = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n  // craft planks using correspongding logs\n  const logIndex = logNames.indexOf(logInInventory1);\n  const plankName = planksNames[logIndex];\n  bot.chat(`Crafting 4 ${plankName}...`);\n  await craftItem(bot, plankName, 1);\n  bot.chat(`4 ${plankName} crafted.`);\n\n  // Craft a crafting table using planks\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}",
        "description": "Name: craftCraftingTable; Description: This function crafts a crafting table using planks and logs. It first checks if the player has enough planks in their inventory, and if not, mines a wooden log. It then crafts four planks using the corresponding logs and crafts a crafting table using the planks.\n"
    },
    "craftDiamondAxe": {
        "code": "async function craftDiamondAxe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    while (diamondsCount < 3) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\")\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond axe using the crafting table\n    await craftItem(bot, \"diamond_axe\", 1);\n    bot.chat(\"Crafted an diamond axe.\");\n  }",
        "description": "Name: craftDiamondAxe; Description: This function crafts a diamond axe using the Mineflayer framework for Minecraft gameplay. It first checks if the player has enough diamonds and sticks in their inventory, and if not, collects the required items. It then crafts a crafting table if one is not already in the player's inventory, and places it near the player. Finally, it crafts a diamond axe using the crafting table.\n"
    },
    "craftDiamondBlock": {
        "code": "async function craftDiamondBlock(bot) {\n    // Check if there are enough diamonds in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    // If not enough diamonds, mine some\n    while (diamondsCount < 9) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an diamond block using the crafting table\n    await craftItem(bot, \"diamond_block\", 1);\n    bot.chat(\"Crafted an diamond block.\");\n}",
        "description": "Name: craftDiamondBlock; Description: This function crafts a diamond block using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough diamonds in the inventory, and if not, mines some. Then, it checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the bot and crafts a diamond block using the table.\n"
    },
    "craftDiamondBoots": {
        "code": "async function craftDiamondBoots(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 4) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond boots using the crafting table\n    await craftItem(bot, \"diamond_boots\", 1);\n    bot.chat(\"Crafted an diamond boots.\");\n  }",
        "description": "Name: craftDiamondBoots; Description: This function crafts diamond boots using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough diamonds in the inventory and collects more if necessary. It then checks if a crafting table is in the inventory and crafts one if not. Finally, it places the crafting table near the bot and crafts an diamond boots using the crafting table.\n"
    },
    "craftDiamondChestplate": {
        "code": "async function craftDiamondChestplate(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 8) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond chestplate using the crafting table\n    await craftItem(bot, \"diamond_chestplate\", 1);\n    bot.chat(\"Crafted an diamond chestplate.\");\n  }",
        "description": "Name: craftDiamondChestplate; Description: This function crafts a diamond chestplate using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough diamonds in the inventory, and if not, collects some by mining diamonds. It then checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the bot and crafts a diamond chestplate using the table.\n"
    },
    "craftDiamondHelmet": {
        "code": "async function craftDiamondHelemt(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 5) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond helemt using the crafting table\n    await craftItem(bot, \"diamond_helemt\", 1);\n    bot.chat(\"Crafted an diamond helemt.\");\n  }",
        "description": "Name: craftDiamondHelmet; Description: This function crafts a diamond helmet using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough diamonds in the inventory and collects more if necessary. It then checks if a crafting table is in the inventory and crafts one if not. Finally, it places the crafting table near the bot and crafts a diamond helmet using the crafting table.\n"
    },
    "craftDiamondHoe": {
        "code": "async function craftDiamondHoe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    while (diamondsCount < 2) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\")\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond hoe using the crafting table\n    await craftItem(bot, \"diamond_hoe\", 1);\n    bot.chat(\"Crafted an diamond hoe.\");\n  }",
        "description": "Name: craftDiamondHoe; Description: This function crafts a diamond hoe using the Mineflayer framework for Minecraft gameplay. It first checks if the player has enough diamonds and sticks in their inventory, and if not, collects the required items. It then crafts a crafting table if one is not already in the player's inventory, and places it near the player. Finally, it crafts a diamond hoe using the crafting table.\n"
    },
    "craftDiamondLeggings": {
        "code": "async function craftDiamondLeggings(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 7) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond leggings using the crafting table\n    await craftItem(bot, \"diamond_leggings\", 1);\n    bot.chat(\"Crafted an diamond leggings.\");\n  }",
        "description": "Name: craftDiamondLeggings; Description: This function crafts diamond leggings using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough diamonds in the inventory and collects more if necessary. It then checks if a crafting table is in the inventory and crafts one if not. Finally, it places the crafting table near the bot and crafts an diamond leggings using the crafting table.\n"
    },
    "craftDiamondPickaxe": {
        "code": "async function craftDiamondPickaxe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    while (diamondsCount < 3) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\")\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond pickaxe using the crafting table\n    await craftItem(bot, \"diamond_pickaxe\", 1);\n    bot.chat(\"Crafted an diamond pickaxe.\");\n  }",
        "description": "Name: craftDiamondPickaxe; Description: This function crafts a diamond pickaxe using the Mineflayer framework for Minecraft gameplay. It first checks if the player has enough diamonds and sticks in their inventory, and if not, collects the required items. It then crafts a crafting table if one is not already in the player's inventory, and places it near the player. Finally, it uses the crafting table to craft a diamond pickaxe.\n"
    },
    "craftDiamondShovel": {
        "code": "async function craftDiamondShovel(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    while (diamondsCount < 1) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\")\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond shovel using the crafting table\n    await craftItem(bot, \"diamond_shovel\", 1);\n    bot.chat(\"Crafted an diamond shovel.\");\n  }",
        "description": "Name: craftDiamondShovel; Description: This function crafts a diamond shovel using the Mineflayer framework for Minecraft gameplay. It first checks if the player has enough diamonds and sticks in their inventory, and if not, collects the required items. It then crafts a crafting table if one is not already in the player's inventory, and places it near the player. Finally, it uses the crafting table to craft a diamond shovel.\n"
    },
    "craftDiamondSword": {
        "code": "async function craftDiamondSword(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    while (diamondsCount < 2) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\")\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond sword using the crafting table\n    await craftItem(bot, \"diamond_sword\", 1);\n    bot.chat(\"Crafted an diamond sword.\");\n  }",
        "description": "Name: craftDiamondSword; Description: This function crafts a diamond sword using the Mineflayer framework for Minecraft gameplay. It first checks if the player has enough diamonds and sticks in their inventory, and if not, collects the required items. It then crafts a crafting table if one is not already in the player's inventory, and places it near the player. Finally, it uses the crafting table to craft a diamond sword.\n"
    },
    "craftEmeraldBlock": {
        "code": "async function craftEmeraldBlock(bot) {\n    // Check if there are enough emeralds in the inventory\n    let emeraldsCount = bot.inventory.count(mcData.itemsByName.emerald.id);\n    // If not enough emeralds, mine some\n    while (emeraldsCount < 9) {\n      await mineEmerald(bot);\n      emeraldsCount = bot.inventory.count(mcData.itemsByName.emerald.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an emerald block using the crafting table\n    await craftItem(bot, \"emerald_block\", 1);\n    bot.chat(\"Crafted an emerald block.\");\n}",
        "description": "Name: craftEmeraldBlock; Description: This function crafts an emerald block using the Mineflayer framework for Minecraft gameplay. It first checks if there are enough emeralds in the inventory, and if not, mines some. Then, it checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the bot and crafts an emerald block using the crafting table.\n"
    },
    "craftFlintAndSteel": {
        "code": "async function craftFlintAndSteel(bot) {\n    \n    // Check if there are enough flints and iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 1) {\n      await mineIronOre(bot);\n      await smeltRawIron(bot);\n      ironIngotsCount += 1;\n    }\n    if (flintsCount < 1) {\n        await mineFlint(bot);\n        flintsCount += 1;\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a shield using the crafting table\n    await craftItem(bot, \"shield\", 1);\n    bot.chat(\"Crafted a shield.\");\n  }",
        "description": "Name: craftFlintAndSteel; Description: This function crafts a shield using a crafting table. It first checks if the player has enough flints and iron ingots in their inventory, and if not, it explores the world to find and mine iron ore and flint. Once the necessary items are collected, it crafts a crafting table and uses it to craft a shield.\n"
    },
    "craftFurnace": {
        "code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n\n  // If not, check wooden pickaxe and mine the required cobblestones\n  const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n  if (cobblestoneCount < 8) {\n    if (woodenPickaxe < 1)\n      await craftWoodenPickaxe(bot);\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a furnace using the crafting table\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Crafted a furnace.\");\n}",
        "description": "Name: craftFurnace; Description: This function crafts a furnace using the Mineflayer framework for Minecraft gameplay. It checks if the player has enough cobblestones in their inventory, and if not, mines the required cobblestones using a wooden pickaxe. It then crafts a crafting table and places it near the player, before crafting the furnace using the crafting table.\n"
    },
    "craftGoldBlock": {
        "code": "async function craftGoldBlock(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    let goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, mine gold ores and smelt them into gold ingots\n    while (goldIngotsCount < 9) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an gold block using the crafting table\n    await craftItem(bot, \"gold_block\", 1);\n    bot.chat(\"Crafted an gold block.\");\n}",
        "description": "Name: craftGoldBlock; Description: This function crafts a gold block by first smelting all raw gold, then checking if there are enough gold ingots in the inventory. If not, it mines gold ores and smelts them into gold ingots. If a crafting table is not in the inventory, it crafts one and places it near the bot. Finally, it crafts a gold block using the crafting table.\n"
    },
    "craftGoldenAxe": {
        "code": "async function craftGoldenAxe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 3) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden axe using the crafting table\n    await craftItem(bot, \"golden_axe\", 1);\n    bot.chat(\"Crafted an golden axe.\");\n  }",
        "description": "Name: craftGoldenAxe; Description: This function crafts a golden axe using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an golden axe using the table.\n"
    },
    "craftGoldenBoots": {
        "code": "async function craftGoldenBoots(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 4) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden boots using the crafting table\n    await craftItem(bot, \"golden_boots\", 1);\n    bot.chat(\"Crafted an golden boots.\");\n  }",
        "description": "Name: craftGoldenBoots; Description: This function crafts golden boots in Minecraft using the Mineflayer framework. It first smelts all raw gold and checks if there are enough gold ingots in the inventory. If not, it collects the required items and smelts the gold ore again. Then, it checks if a crafting table is in the inventory and crafts one if it's not present. Finally, it places the crafting table near the bot and crafts an golden boots using the crafting table.\n"
    },
    "craftGoldenchestplate": {
        "code": "async function craftGoldenChestplate(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 8) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden chestplate using the crafting table\n    await craftItem(bot, \"golden_chestplate\", 1);\n    bot.chat(\"Crafted an golden chestplate.\");\n  }",
        "description": "Name: craftGoldenchestplate; Description: This function crafts a golden chestplate using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots in the inventory. If not, it collects the required items and smelts the gold ore again. Then, it checks if a crafting table is in the inventory and crafts one if it's not present. Finally, it places the crafting table near the bot and crafts a golden chestplate using the crafting table.\n"
    },
    "craftGoldenHelmet": {
        "code": "async function craftGoldenHelmet(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 5) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden helmet using the crafting table\n    await craftItem(bot, \"golden_helmet\", 1);\n    bot.chat(\"Crafted an golden helmet.\");\n  }",
        "description": "Name: craftGoldenHelmet; Description: This function crafts a golden helmet using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots in the inventory. If not, it collects the required items and smelts the raw gold again. Then, it checks if a crafting table is in the inventory and crafts one if it's not present. Finally, it places the crafting table near the bot and crafts an golden helmet using the crafting table.\n"
    },
    "craftGoldenHoe": {
        "code": "async function craftGoldenHoe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 2) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden hoe using the crafting table\n    await craftItem(bot, \"golden_hoe\", 1);\n    bot.chat(\"Crafted an golden hoe.\");\n  }",
        "description": "Name: craftGoldenHoe; Description: This function crafts a golden hoe using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an golden hoe using the crafting table.\n"
    },
    "craftGoldenLeggings": {
        "code": "async function craftGoldenLeggings(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 7) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden leggings using the crafting table\n    await craftItem(bot, \"golden_leggings\", 1);\n    bot.chat(\"Crafted an golden leggings.\");\n  }",
        "description": "Name: craftGoldenLeggings; Description: This function crafts golden leggings in Minecraft using the Mineflayer framework. It first smelts all raw gold and checks if there are enough gold ingots in the inventory. If not, it collects the required items and smelts the raw gold again. Then, it checks if a crafting table is in the inventory and crafts one if it's not present. Finally, it places the crafting table near the bot and crafts an golden leggings using the crafting table.\n"
    },
    "craftGoldenPickAxe": {
        "code": "async function craftGoldPickaxe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 3) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an gold pickaxe using the crafting table\n    await craftItem(bot, \"gold_pickaxe\", 1);\n    bot.chat(\"Crafted an gold pickaxe.\");\n  }",
        "description": "Name: craftGoldenPickAxe; Description: This function crafts a gold pickaxe using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if necessary. Finally, it places the crafting table near the bot and crafts an gold pickaxe using the crafting table.\n"
    },
    "craftGoldenShovel": {
        "code": "async function craftGoldenShovel(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 1) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden shovel using the crafting table\n    await craftItem(bot, \"golden_shovel\", 1);\n    bot.chat(\"Crafted an golden shovel.\");\n  }",
        "description": "Name: craftGoldenShovel; Description: This function crafts a golden shovel using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an golden shovel using the crafting table.\n"
    },
    "craftGoldenSword": {
        "code": "async function craftGoldenSword(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 2) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden sword using the crafting table\n    await craftItem(bot, \"golden_sword\", 1);\n    bot.chat(\"Crafted an golden sword.\");\n  }",
        "description": "Name: craftGoldenSword; Description: This function crafts a golden sword using the Mineflayer framework for Minecraft gameplay. It first smelts all raw gold and checks if there are enough gold ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if necessary. Finally, it places the crafting table near the bot and crafts an golden sword using the crafting table.\n"
    },
    "craftIronAxe": {
        "code": "async function craftIronAxe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron axe using the crafting table\n  await craftItem(bot, \"iron_axe\", 1);\n  bot.chat(\"Crafted an iron axe.\");\n}",
        "description": "Name: craftIronAxe; Description: This function crafts an iron axe using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots and sticks in the inventory. If not, it collects the required items. It then checks if a crafting table is in the inventory and, if not, crafts one. Finally, it places the crafting table near the bot and crafts an iron axe using the table.\n"
    },
    "craftIronBlock": {
        "code": "async function craftIronBlock(bot) {\n    // smelt all raw iron first\n    await smeltAllRawIron(bot);\n    // Check if there are enough iron ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n    while (ironIngotsCount < 9) {\n      await mineFiveIronOres(bot);\n      await smeltAllRawIron(bot);\n      ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an iron block using the crafting table\n    await craftItem(bot, \"iron_block\", 1);\n    bot.chat(\"Crafted an iron block.\");\n  }",
        "description": "Name: craftIronBlock; Description: This function crafts an iron block by first smelting all raw iron, then checking if there are enough iron ingots in the inventory. If not, it mines five iron ores and smelts them into iron ingots. If a crafting table is not in the inventory, it crafts one. Finally, it places the crafting table near the bot and crafts an iron block using the table.\n"
    },
    "craftIronBoots": {
        "code": "async function craftIronBoots(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 4) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Crafted an iron boots.\");\n}",
        "description": "Name: craftIronBoots; Description: This function crafts iron boots for the player using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron in the player's inventory, then checks if there are enough iron ingots to craft the boots. If not, it mines iron ores and smelts them into iron ingots. If a crafting table is not in the player's inventory, it crafts one and places it near the player. Finally, it crafts the iron boots using the crafting table.\n"
    },
    "craftIronChestplate": {
        "code": "async function craftIronChestplate(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 8) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron chestplate using the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Crafted an iron chestplate.\");\n}",
        "description": "Name: craftIronChestplate; Description: This function crafts an iron chestplate using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots in the inventory. If not, it mines iron ores and smelts them into iron ingots. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron chestplate using the crafting table.\n"
    },
    "craftIronHelmet": {
        "code": "async function craftIronHelmet(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 5) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Crafted an iron helmet.\");\n}",
        "description": "Name: craftIronHelmet; Description: This function crafts an iron helmet using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots in the inventory. If not, it mines iron ores and smelts them into iron ingots. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron helmet using the crafting table.\n"
    },
    "craftIronHoe": {
        "code": "async function craftIronHoe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (ironIngotsCount < 2) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron hoe using the crafting table\n  await craftItem(bot, \"iron_hoe\", 1);\n  bot.chat(\"Crafted an iron hoe.\");\n}",
        "description": "Name: craftIronHoe; Description: This function crafts an iron hoe using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron hoe using the crafting table.\n"
    },
    "craftIronLeggings": {
        "code": "async function craftIronLeggings(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 7) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n    ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Crafted an iron leggings.\");\n}",
        "description": "Name: craftIronLeggings; Description: This function crafts iron leggings using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots in the inventory. If not, it mines iron ores and smelts them into iron ingots. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron leggings using the crafting table.\n"
    },
    "craftIronPickaxe": {
        "code": "async function craftIronPickaxe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron pickaxe using the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}",
        "description": "Name: craftIronPickaxe; Description: This function crafts an iron pickaxe using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron pickaxe using the crafting table.\n"
    },
    "craftIronShovel": {
        "code": "async function craftIronShovel(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (ironIngotsCount < 1) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron shovel using the crafting table\n  await craftItem(bot, \"iron_shovel\", 1);\n  bot.chat(\"Crafted an iron shovel.\");\n}",
        "description": "Name: craftIronShovel; Description: This function crafts an iron shovel using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron shovel using the crafting table.\n"
    },
    "craftIronSword": {
        "code": "async function craftIronSword(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (ironIngotsCount < 2) {\n    await mineFiveIronOres(bot);\n    await smeltAllRawIron(bot);\n  }\n  if (sticksCount < 1) {\n    await craftSticks(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron sword using the crafting table\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Crafted an iron sword.\");\n}",
        "description": "Name: craftIronSword; Description: This function crafts an iron sword using the Mineflayer framework for Minecraft gameplay. It first smelts all raw iron and checks if there are enough iron ingots and sticks in the inventory. If not, it collects the required items. Then, it checks if a crafting table is in the inventory and crafts one if it is not present. Finally, it places the crafting table near the bot and crafts an iron sword using the crafting table.\n"
    },
    "craftShears": {
        "code": "async function craftShears(bot) {\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // If not enough iron ingots, collect the required items.\n    if (ironIngotsCount < 2) {\n      await mineFiveIronOres(bot);\n      bot.chat(\"Collected iron ores.\");\n      await smeltFiveRawIron(bot);\n      bot.chat(\"Smelted iron ores into iron ingots.\");\n    }\n    // Craft a pair of shears using the crafting table\n    await craftItem(bot, \"shears\", 1);\n    bot.chat(\"Crafted a pair of shears.\");\n  }",
        "description": "Name: craftShears; Description: This function crafts a pair of shears using the Mineflayer framework for Minecraft gameplay. It first checks if a crafting table is in the player's inventory, and if not, crafts one using the `craftCraftingTable` function. It then places the crafting table near the player's position. If the player does not have enough iron ingots, the function collects five iron ores, smelts them into iron ingots, and then crafts the shears using the crafting table. Finally, the function sends a chat message to the player indicating that the shears have been crafted.\n"
    },
    "craftShield": {
        "code": "async function craftShield(bot) {\n    // Check if there are enough planks and iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    // If not, craft some\n    while (totalPlanksCount < 6) {\n        await craftWoodenPlanks(bot);\n        totalPlanksCount += 4;\n    }\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 1) {\n      await mineIronOre(bot);\n      await smeltRawIron(bot);\n      ironIngotsCount += 1;\n    }\n  \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a shield using the crafting table\n    await craftItem(bot, \"shield\", 1);\n    bot.chat(\"Crafted a shield.\");\n  }",
        "description": "Name: craftShield; Description: This function crafts a shield using the Mineflayer framework for Minecraft gameplay. It checks if the player has enough planks and iron ingots in their inventory, and if not, crafts them or explores to find and mine iron ore. It then crafts a crafting table and places it near the player, and finally crafts a shield using the crafting table.\n"
    },
    "craftSticks": {
        "code": "async function craftSticks(bot) {\n    const requiredPlanks = 2;\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    // If not enough planks\n    if (totalPlanksCount < requiredPlanks) {\n      bot.chat(\"Not enough planks. Mining a log and crafting more...\");\n      if (!logInInventory) {\n        await MineWoodLog(bot);\n      } else {\n        await craftWoodenPlanks(bot);\n      }\n      bot.chat(\"Planks crafted.\");\n    }\n  \n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"4 sticks crafted.\");\n  }",
        "description": "Name: craftSticks; Description: This function crafts sticks in Minecraft using the Mineflayer framework. It checks the player's inventory for the required planks and crafts them if necessary. If there are not enough planks, the function will mine a log and craft wooden planks before crafting the sticks. The function then crafts 4 sticks and notifies the player in the chat.\n"
    },
    "craftStoneAxe": {
        "code": "async function craftStoneAxe(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (cobblestoneCount < 3) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone axe using the crafting table\n    await craftItem(bot, \"stone_axe\", 1);\n    bot.chat(\"Crafted a stone axe.\");\n  }",
        "description": "Name: craftStoneAxe; Description: This function crafts a stone axe using a crafting table. It first checks if there are enough cobblestone and sticks in the inventory, and if not, collects them or crafts them as needed. It then places a crafting table near the player and crafts a stone axe using the table.\n"
    },
    "craftStoneHoe": {
        "code": "async function craftStoneHoe(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (cobblestoneCount < 2) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone hoe using the crafting table\n    await craftItem(bot, \"stone_hoe\", 1);\n    bot.chat(\"Crafted a stone hoe.\");\n  }",
        "description": "Name: craftStoneHoe; Description: This function crafts a stone hoe using a crafting table. It checks if the player has enough cobblestone and sticks in their inventory, and if not, collects them or crafts them as needed. It then places a crafting table near the player and crafts a stone hoe using the table.\n"
    },
    "craftStonePickaxe": {
        "code": "async function craftStonePickaxe(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough cobblestone or sticks, collect the required items\n  if (cobblestoneCount < 3) {\n    // Check wooden pickaxe\n    const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n    if (woodenPickaxe) {\n      await bot.equip(woodenPickaxe, \"hand\");\n    } else {\n      await craftWoodenPickaxe(bot);\n      const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n      await bot.equip(woodenPickaxe1, \"hand\");\n    }\n    await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n    bot.chat(\"Crafted sticks.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(\n    mcData.itemsByName.crafting_table.id\n  );\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft a stone pickaxe using the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}",
        "description": "Name: craftStonePickaxe; Description: This function crafts a stone pickaxe using the Mineflayer framework for Minecraft gameplay. It checks if there are enough cobblestone and sticks in the inventory, and if not, collects the required items. It also checks if a crafting table is in the inventory, and if not, crafts one. Finally, it places the crafting table near the bot and crafts a stone pickaxe using the table.\n"
    },
    "craftStoneShovel": {
        "code": "async function craftStoneShovel(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (cobblestoneCount < 1) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone shovel using the crafting table\n    await craftItem(bot, \"stone_shovel\", 1);\n    bot.chat(\"Crafted a stone shovel.\");\n  }",
        "description": "Name: craftStoneShovel; Description: This function crafts a stone shovel using a crafting table. It first checks if the player has enough cobblestone and sticks in their inventory, and if not, collects them using a wooden pickaxe or crafts them if necessary. It then places a crafting table near the player and crafts a stone shovel using the table.\n"
    },
    "craftStoneSword": {
        "code": "async function craftStoneSword(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (cobblestoneCount < 2) {\n      // Check wooden pickaxe\n      const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n      if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n      } else {\n        await craftWoodenPickaxe(bot);\n        const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe1, \"hand\");\n      }\n      await mineBlock(bot, \"stone\", 3 - cobblestoneCount);\n      bot.chat(\"Collected cobblestone.\");\n    }\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone sword using the crafting table\n    await craftItem(bot, \"stone_sword\", 1);\n    bot.chat(\"Crafted a stone sword.\");\n  }",
        "description": "Name: craftStoneSword; Description: This function crafts a stone sword using the Mineflayer framework for Minecraft gameplay. It checks if there are enough cobblestone and sticks in the inventory, and if not, collects them using a wooden pickaxe or crafts them if necessary. It then places a crafting table near the player and crafts a stone sword using the table.\n"
    },
    "craftTorches": {
        "code": "async function craftTorches(bot) {\n    // check coals and sticks\n    let coalsCount = bot.inventory.count(mcData.itemsByName.coal.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    if (!coalsCount) {\n        mineFiveCoalOres(bot);\n    }\n    if (!sticksCount) {\n        craftSticks(bot);\n    }\n    await craftItem(bot, \"torch\", 1);\n    bot.chat(\"4 torches crafted.\");\n  }",
        "description": "Name: craftTorches; Description: Sure! Here's the brief description based on the content and comments of the provided JavaScript code:\n\nThis function crafts torches using coals and sticks. It first checks if the player has enough coals and sticks in their inventory, and if not, it performs the necessary actions to obtain them. Once the player has the required items, the function crafts 4 torches and notifies the player of the successful crafting.\n"
    },
    "craftWoodenAxe": {
        "code": "async function craftWoodenaxe(bot) {\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 3) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden axe using the crafting table\n    await craftItem(bot, \"wooden_axe\", 1);\n    bot.chat(\"Crafted a wooden axe.\");\n  }",
        "description": "Name: craftWoodenAxe; Description: This function crafts a wooden axe using a crafting table. It first checks if the player has enough planks and sticks in their inventory, and if not, crafts them using the crafting table. It then places the crafting table near the player and crafts a wooden axe using the table.\n"
    },
    "craftWoodenHoe": {
        "code": "async function craftWoodenHoe(bot) {\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 2) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden hoe using the crafting table\n    await craftItem(bot, \"wooden_hoe\", 1);\n    bot.chat(\"Crafted a wooden hoe.\");\n  }",
        "description": "Name: craftWoodenHoe; Description: This function crafts a wooden hoe using a crafting table. It first checks if the player has enough planks and sticks in their inventory, and if not, crafts them using the crafting table. It then places the crafting table near the player and crafts a wooden hoe using the table.\n"
    },
    "craftWoodenPickaxe": {
        "code": "async function craftWoodenPickaxe(bot) {\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 3) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden pickaxe using the crafting table\n    await craftItem(bot, \"wooden_pickaxe\", 1);\n    bot.chat(\"Crafted a wooden pickaxe.\");\n  }",
        "description": "Name: craftWoodenPickaxe; Description: This function crafts a wooden pickaxe using a crafting table and the available planks and sticks in the bot's inventory. It first checks if there are enough planks and sticks, and if not, crafts them using the crafting table. It then places the crafting table near the bot and crafts a wooden pickaxe using the table.\n"
    },
    "craftWoodenPlanks": {
        "code": "async function craftWoodenPlanks(bot) {\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    if (!logInInventory) {\n      bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n      await mineWoodLog(bot);\n    }\n    logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    const logIndex = logNames.indexOf(logInInventory);\n    const plankName = plankNames[logIndex];\n    bot.chat(`Crafting 4 ${plankName}...`);\n    await craftItem(bot, plankName, 1);\n    bot.chat(`4 ${plankName} crafted.`);\n  }",
        "description": "Name: craftWoodenPlanks; Description: This function crafts wooden planks in Minecraft using the Mineflayer framework. It first checks if there is a wooden log in the player's inventory, and if not, it mines a wooden log. Then, it crafts 4 wooden planks using the log and the player's crafting interface. Finally, it updates the player's chat with the message \"4 wooden planks crafted.\"\n"
    },
    "craftWoodenShovel": {
        "code": "async function craftWoodenShovel(bot) {\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 1) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden shovel using the crafting table\n    await craftItem(bot, \"wooden_shovel\", 1);\n    bot.chat(\"Crafted a wooden shovel.\");\n  }",
        "description": "Name: craftWoodenShovel; Description: This function crafts a wooden shovel using a crafting table. It first checks if the player has enough planks and sticks in their inventory, and if not, crafts them using the crafting table. It then places the crafting table near the player and crafts a wooden shovel using the table.\n"
    },
    "craftWoodenSword": {
        "code": "async function craftWoodenSword(bot) {\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let totalPlanksCount = 0;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      totalPlanksCount += plankCount;\n    }\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (totalPlanksCount < 2) {\n      await craftWoodenPlanks(bot);\n    }\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden sword using the crafting table\n    await craftItem(bot, \"wooden_sword\", 1);\n    bot.chat(\"Crafted a wooden sword.\");\n  }",
        "description": "Name: craftWoodenSword; Description: This function crafts a wooden sword using the Mineflayer framework for Minecraft gameplay. It first checks if the player has enough planks and sticks in their inventory, and if not, crafts them using the crafting table. Once the crafting table is placed and the wooden sword is crafted, the function ends with a chat message indicating the successful crafting of the sword.\n"
    },
    "eatCookedPorkchop": {
        "code": "async function eatCookedPorkchop(bot) {\n  // Equip the cooked porkchop in the bot's hand\n  const cookedPorkchop = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n  if (cookedPorkchop)\n    await bot.equip(cookedPorkchop, \"hand\");\n  else\n    await cookPorkchops(bot);\n  // Equip the cooked porkchop in the bot's hand\n  const cookedPorkchop1 = bot.inventory.findInventoryItem(mcData.itemsByName.cooked_porkchop.id);\n  await bot.equip(cookedPorkchop1, \"hand\");\n  // Consume the cooked porkchop\n  await bot.consume();\n\n  // Send a chat message to indicate the task is completed\n  bot.chat(\"Ate 1 cooked porkchop.\");\n}",
        "description": "Name: eatCookedPorkchop; Description: This function eats a cooked porkchop using the Mineflayer framework for Minecraft gameplay. It first equips the cooked porkchop in the bot's hand, then consumes it, and finally sends a chat message to indicate the task is completed.\n"
    },
    "equipBestSwordOrCraftOne": {
        "code": "async function equipBestSwordOrCraftOne(bot) {\n    // Find the best sword in the bot's inventory\n    let diamondSword = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_sword.id);\n    let ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n    let stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n    let woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n    // Equip the best sword\n    if (diamondSword) {\n        await bot.equip(diamondSword, \"hand\");\n    } else if (ironSword) {\n        await bot.equip(ironSword, \"hand\");\n    } else if (stoneSword) {\n        await bot.equip(stoneSword, \"hand\");\n    } else if (woodenSword) {\n        await bot.equip(woodenSword, \"hand\");\n    } else {\n        await craftWoodenSword(bot);\n        await bot.equip(woodenSword, \"hand\");\n    }\n    bot.chat(\"Sword equipped.\");\n  }",
        "description": "Name: equipBestSwordOrCraftOne; Description: This function equips the best sword in the bot's inventory or crafts a wooden sword if no suitable sword is found.\n"
    },
    "equipIronArmor": {
        "code": "async function equipIronArmor(bot) {\n  // Find the iron_chestplate, iron_leggings, iron_boots, and iron_helmet in the inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n\n  // Equip the iron_chestplate, iron_leggings, iron_boots, and iron_helmet in the appropriate slots (legs, feet, and head)\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Equipped iron chestplate.\");\n  } else {\n    bot.chat(\"Iron chestplate not found in inventory.\");\n  }\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Equipped iron leggings.\");\n  } else {\n    bot.chat(\"Iron leggings not found in inventory.\");\n  }\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Equipped iron boots.\");\n  } else {\n    bot.chat(\"Iron boots not found in inventory.\");\n  }\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Equipped iron helmet.\");\n  } else {\n    bot.chat(\"Iron helmet not found in inventory.\");\n  }\n}",
        "description": "Name: equipIronArmor; Description: This function equips iron armor on a Mineflayer bot. It first finds the iron chestplate, leggings, boots, and helmet in the bot's inventory, then equips them in the appropriate slots (torso, legs, feet, and head). If any of the items are not found in the inventory, the function will display a message indicating their absence.\n"
    },
    "equipShield": {
        "code": "async function equipShield(bot) {\n    // Find the shield in the bot's inventory\n    const shield = bot.inventory.findInventoryItem(mcData.itemsByName[\"shield\"].id);\n    if (!shield)\n      bot.chat(\"No shield in inventory.\");\n    // Equip the shield in the off-hand slot\n    await bot.equip(shield, \"off-hand\");\n    bot.chat(\"Shield equipped.\");\n  }",
        "description": "Name: equipShield; Description: Sure! Here's the brief description based on the content and comments of the provided JavaScript code:\n\nThis function equips a shield in the off-hand slot for a bot in a Minecraft game. It first finds the shield in the bot's inventory using the `mcData.itemsByName` object, and then equips it in the off-hand slot using the `bot.equip()` method. If no shield is found in the inventory, the function displays a message indicating that no shield is available.\n"
    },
    "equipSword": {
        "code": "async function equipSword(bot) {\n    // Find the best sword in the bot's inventory\n    const diamondSword = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_sword.id);\n    const ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n    const stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n    const woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n    // Equip the best sword\n    if (diamondSword) {\n        await bot.equip(diamondSword, \"hand\");\n    } else if (ironSword) {\n        await bot.equip(ironSword, \"hand\");\n    } else if (stoneSword) {\n        await bot.equip(stoneSword, \"hand\");\n    } else if (woodenSword) {\n        await bot.equip(woodenSword, \"hand\");\n    } else {\n        bot.chat(\"No sword in inventory.\");\n        return;\n    }\n    bot.chat(\"Sword equipped.\");\n  }",
        "description": "Name: equipSword; Description: Sure! Here is the description of the provided JavaScript code:\n\nThis function equips the best sword in the bot's inventory. It first finds the diamond sword, iron sword, stone sword, and wooden sword in the bot's inventory using the `findInventoryItem` method. If any of these swords are found, the function equips the corresponding sword using the `equip` method and sends a chat message to the bot indicating that the sword has been equipped. If no swords are found in the inventory, the function sends a chat message indicating that no sword could be equipped.\n"
    },
    "findSuitablePosition": {
        "code": "async function findSuitablePosition(bot) {\n    const offsets = [\n      new Vec3(1, 0, 0),\n      new Vec3(-1, 0, 0),\n      new Vec3(0, 0, 1),\n      new Vec3(0, 0, -1),\n    ];\n    for (const offset of offsets) {\n      const position = bot.entity.position.offset(offset.x, offset.y, offset.z);\n      const block = bot.blockAt(position);\n      if (block.name === \"air\") {\n        return position;\n      }\n    }\n    return null;\n  }",
        "description": "Name: findSuitablePosition; Description: Sure! Here's the description based on the provided JavaScript code:\n\nThis function finds a suitable position for a bot to place a block in Minecraft. It iterates through a list of offsets and checks if the block at the position created by offsetting the bot's current position is \"air\". If it is, the function returns the position. If no \"air\" block is found, the function returns null.\n"
    },
    "killOneBat": {
        "code": "async function killOneBat(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest bat\n    const bat = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const bat = bot.nearestEntity(entity => {\n        return entity.name === \"bat\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return bat;\n    });\n    if (!bat) {\n      bot.chat(\"Could not find a bat.\");\n      return;\n    }\n  \n    // Kill the bat using the wooden sword\n    await killMob(bot, \"bat\", 300);\n    bot.chat(\"Killed a bat.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(bat.position.x, bat.position.y, bat.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneBat; Description: This function kills a bat using a wooden sword and collects the dropped items.\n"
    },
    "killOneCamel": {
        "code": "async function killOneCamel(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest camel\n    const camel = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const camel = bot.nearestEntity(entity => {\n        return entity.name === \"camel\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return camel;\n    });\n    if (!camel) {\n      bot.chat(\"Could not find a camel.\");\n      return;\n    }\n  \n    // Kill the camel using the wooden sword\n    await killMob(bot, \"camel\", 300);\n    bot.chat(\"Killed a camel.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(camel.position.x, camel.position.y, camel.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCamel; Description: This function kills a camel using a wooden sword and collects the dropped items.\n"
    },
    "killOneChicken": {
        "code": "async function killOneChicken(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest chicken\n    const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const chicken = bot.nearestEntity(entity => {\n        return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return chicken;\n    });\n    if (!chicken) {\n      bot.chat(\"Could not find a chicken.\");\n      return;\n    }\n  \n    // Kill the chicken using the wooden sword\n    await killMob(bot, \"chicken\", 300);\n    bot.chat(\"Killed a chicken.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(chicken.position.x, chicken.position.y, chicken.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneChicken; Description: This function kills a chicken using a wooden sword and collects the dropped items.\n"
    },
    "killOneCow": {
        "code": "async function killOneCow(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest cow\n    const cow = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cow = bot.nearestEntity(entity => {\n        return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return cow;\n    });\n    if (!cow) {\n      bot.chat(\"Could not find a cow.\");\n      return;\n    }\n  \n    // Kill the cow using the wooden sword\n    await killMob(bot, \"cow\", 300);\n    bot.chat(\"Killed a cow.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(cow.position.x, cow.position.y, cow.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCow; Description: This function kills a cow using a wooden sword and collects the dropped items.\n"
    },
    "killOneCreeper": {
        "code": "async function killOneCreeper(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest creeper\n    const creeper = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const creeper = bot.nearestEntity(entity => {\n        return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return creeper;\n    });\n    if (!creeper) {\n      bot.chat(\"Could not find a creeper.\");\n      return;\n    }\n  \n    // Kill the creeper using the wooden sword\n    await killMob(bot, \"creeper\", 300);\n    bot.chat(\"Killed a creeper.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(creeper.position.x, creeper.position.y, creeper.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCreeper; Description: This function kills a creeper using a wooden sword and collects the dropped items.\n"
    },
    "killOneDonkey": {
        "code": "async function killOneDonkey(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest Donkey\n    const Donkey = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const Donkey = bot.nearestEntity(entity => {\n        return entity.name === \"Donkey\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return Donkey;\n    });\n    if (!Donkey) {\n      bot.chat(\"Could not find a Donkey.\");\n      return;\n    }\n  \n    // Kill the Donkey using the wooden sword\n    await killMob(bot, \"Donkey\", 300);\n    bot.chat(\"Killed a Donkey.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(Donkey.position.x, Donkey.position.y, Donkey.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneDonkey; Description: This function kills a Donkey using a wooden sword and collects the dropped items.\n"
    },
    "killOneEnderman": {
        "code": "async function killOneEnderman(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest enderman\n    const enderman = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const enderman = bot.nearestEntity(entity => {\n        return entity.name === \"enderman\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return enderman;\n    });\n    if (!enderman) {\n      bot.chat(\"Could not find a enderman.\");\n      return;\n    }\n  \n    // Kill the enderman using the wooden sword\n    await killMob(bot, \"enderman\", 300);\n    bot.chat(\"Killed a enderman.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(enderman.position.x, enderman.position.y, enderman.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneEnderman; Description: This function kills an enderman using a wooden sword and collects the dropped items.\n"
    },
    "killOneHorse": {
        "code": "async function killOneHorse(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest horse\n    const horse = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const horse = bot.nearestEntity(entity => {\n        return entity.name === \"horse\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return horse;\n    });\n    if (!horse) {\n      bot.chat(\"Could not find a horse.\");\n      return;\n    }\n  \n    // Kill the horse using the wooden sword\n    await killMob(bot, \"horse\", 300);\n    bot.chat(\"Killed a horse.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(horse.position.x, horse.position.y, horse.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneHorse; Description: This function kills one horse using a wooden sword and collects the dropped items.\n"
    },
    "killOneMule": {
        "code": "async function killOneMule(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest ule\n    const ule = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const ule = bot.nearestEntity(entity => {\n        return entity.name === \"ule\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return ule;\n    });\n    if (!ule) {\n      bot.chat(\"Could not find a ule.\");\n      return;\n    }\n  \n    // Kill the ule using the wooden sword\n    await killMob(bot, \"ule\", 300);\n    bot.chat(\"Killed a ule.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(ule.position.x, ule.position.y, ule.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneMule; Description: This function kills a ule using a wooden sword and collects the dropped items.\n"
    },
    "killOnePig": {
        "code": "async function killOnePig(bot) {\n  // Equip the sword\n  await equipBestSwordOrCraftOne(bot);\n  // Find the nearest pig\n  const pig = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const pig = bot.nearestEntity(entity => {\n      return entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return pig;\n  });\n  if (!pig) {\n    bot.chat(\"Could not find a pig.\");\n    return;\n  }\n\n  // Kill the pig using the wooden sword\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed a pig.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(pig.position.x, pig.position.y, pig.position.z));\n  bot.chat(\"Collected dropped items.\");\n}",
        "description": "Name: killOnePig; Description: This function kills one pig using a wooden sword and collects the dropped items.\n"
    },
    "killOneRabbit": {
        "code": "async function killOneRabbit(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest rabbit\n    const rabbit = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const rabbit = bot.nearestEntity(entity => {\n        return entity.name === \"rabbit\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return rabbit;\n    });\n    if (!rabbit) {\n      bot.chat(\"Could not find a rabbit.\");\n      return;\n    }\n  \n    // Kill the rabbit using the wooden sword\n    await killMob(bot, \"rabbit\", 300);\n    bot.chat(\"Killed a rabbit.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(rabbit.position.x, rabbit.position.y, rabbit.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneRabbit; Description: This function kills one rabbit using a wooden sword and collects the dropped items.\n"
    },
    "killOneSheep": {
        "code": "async function killOneSheep(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest sheep\n    const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return sheep;\n    });\n    if (!sheep) {\n      bot.chat(\"Could not find a sheep.\");\n      return;\n    }\n  \n    // Kill the sheep using the wooden sword\n    await killMob(bot, \"sheep\", 300);\n    bot.chat(\"Killed a sheep.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSheep; Description: This function kills a sheep using a wooden sword and collects the dropped items.\n"
    },
    "killOneSkeleton": {
        "code": "async function killOneSkeleton(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest skeleton\n    const skeleton = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const skeleton = bot.nearestEntity(entity => {\n        return entity.name === \"skeleton\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return skeleton;\n    });\n    if (!skeleton) {\n      bot.chat(\"Could not find a skeleton.\");\n      return;\n    }\n  \n    // Kill the skeleton using the wooden sword\n    await killMob(bot, \"skeleton\", 300);\n    bot.chat(\"Killed a skeleton.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(skeleton.position.x, skeleton.position.y, skeleton.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSkeleton; Description: This function kills one skeleton using a wooden sword and collects the dropped items.\n"
    },
    "killOneSpider": {
        "code": "async function killOneSpider(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest spider\n    const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const spider = bot.nearestEntity(entity => {\n        return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return spider;\n    });\n    if (!spider) {\n      bot.chat(\"Could not find a spider.\");\n      return;\n    }\n  \n    // Kill the spider using the wooden sword\n    await killMob(bot, \"spider\", 300);\n    bot.chat(\"Killed a spider.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(spider.position.x, spider.position.y, spider.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSpider; Description: This function kills one spider using a wooden sword and collects the dropped items.\n"
    },
    "killOneTurtle": {
        "code": "async function killOneTurtle(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest turtle\n    const turtle = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const turtle = bot.nearestEntity(entity => {\n        return entity.name === \"turtle\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return turtle;\n    });\n    if (!turtle) {\n      bot.chat(\"Could not find a turtle.\");\n      return;\n    }\n  \n    // Kill the turtle using the wooden sword\n    await killMob(bot, \"turtle\", 300);\n    bot.chat(\"Killed a turtle.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(turtle.position.x, turtle.position.y, turtle.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneTurtle; Description: This function kills a turtle using a wooden sword and collects the dropped items.\n"
    },
    "killOneZombie": {
        "code": "async function killOneZombie(bot) {\n    // Equip the sword\n    await equipBestSwordOrCraftOne(bot);\n    // Find the nearest zombie\n    const zombie = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const zombie = bot.nearestEntity(entity => {\n        return entity.name === \"zombie\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return zombie;\n    });\n    if (!zombie) {\n      bot.chat(\"Could not find a zombie.\");\n      return;\n    }\n  \n    // Kill the zombie using the wooden sword\n    await killMob(bot, \"zombie\", 300);\n    bot.chat(\"Killed a zombie.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(zombie.position.x, zombie.position.y, zombie.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneZombie; Description: This function kills one zombie using a wooden sword and collects the dropped items.\n"
    },
    "killSkeletons": {
        "code": "async function killSkeletons(bot) {\n    do {\n      await equipSword(bot);\n      await equipIronArmor(bot);\n      // Kill the skeleton\n      await killMob(bot, \"skeleton\", 300);\n      bot.chat(\"Killed a skeleton.\");\n      } while (true);\n  }\n  ",
        "description": "Name: killSkeletons; Description: Sure! Here's the brief description based on the provided JavaScript code:\n\nThis function equips a sword and iron armor on a bot, then repeatedly kills skeletons until the bot's health is low enough to need healing.\n"
    },
    "killZombies": {
        "code": "async function killZombies(bot) {\n    do {\n      await equipSword(bot);\n      await equipIronArmor(bot);\n      // Kill the zombie\n      await killMob(bot, \"zombie\", 300);\n      bot.chat(\"Killed a zombie.\");\n      } while (true);\n  }\n  ",
        "description": "Name: killZombies; Description: Sure! Here's the brief description based on the provided JavaScript code:\n\nThis function equips a sword and iron armor on a bot, then repeatedly kills zombies until the bot's health is depleted.\n"
    },
    "mineAmethystCluster": {
        "code": "async function mineAmethystCluster(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else {\n        await craftStonePickaxe(bot);\n        stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n    }\n    \n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundAmethystCluster = bot.findBlock({\n        matching: mcData.blocksByName.AmethystCluster_ore.id,\n        maxDistance: 32\n      });\n      return foundAmethystCluster;\n    });\n    await mineBlock(bot, \"amethyst_cluster\", 1);\n    bot.chat(\"1 amethyst_cluster mined.\");\n  }",
        "description": "Name: mineAmethystCluster; Description: This function mines an amethyst cluster using a stone or iron pickaxe. It first equips the appropriate pickaxe and then explores the area until it finds an amethyst cluster within a 32-block radius. Once the cluster is found, it mines the block using the \"mineBlock\" function. Finally, it sends a chat message to the player indicating that one amethyst cluster has been mined.\n"
    },
    "mineCopperOre": {
        "code": "async function mineCopperOre(bot) {\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      // Equip the stone pickaxe\n      const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      if (!stonePickaxe) {\n        await craftStonePickaxe(bot);\n        const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe1, \"hand\");\n      }\n      await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 copper_ore block\n    const copperOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const copperOres = bot.findBlocks({\n        matching: block => block.name === \"copper_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return copperOres.length >= 1 ? copperOres : null;\n    });\n    if (!copperOres) {\n      bot.chat(\"Could not find enough copper ores.\");\n      return;\n    }\n  \n    // Mine the 1 copper_ore block\n    await mineBlock(bot, \"copper_ore\", 1);\n    bot.chat(\"1 copper ore mined.\");\n  }",
        "description": "Name: mineCopperOre; Description: This function mines one copper ore using the Mineflayer framework for Minecraft gameplay. It first equips an iron pickaxe or a stone pickaxe if one is not found in the inventory, and then explores the area within a 32-block radius to find at least one copper ore block. Once a copper ore block is found, the function mines it using the `mineBlock` method. Finally, the function sends a chat message to the player indicating that one copper ore has been mined.\n"
    },
    "mineDiamond": {
        "code": "async function mineDiamond(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (!ironPickaxe) {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const foundDiamond = bot.findBlock({\n        matching: mcData.blocksByName.diamond_ore.id,\n        maxDistance: 32\n      });\n      return foundDiamond;\n    });\n    await mineBlock(bot, \"diamond_ore\", 1);\n    bot.chat(\"1 diamond mined.\");\n  }",
        "description": "Name: mineDiamond; Description: This function mines diamonds using the Mineflayer framework for Minecraft gameplay. It first equips an iron pickaxe and then explores the surrounding area until it finds diamond ore within a 32-block radius. Once the diamond ore is found, the function mines the block using the `mineBlock` method. Finally, the function sends a chat message to the player indicating that one diamond has been mined.\n"
    },
    "mineEmerald": {
        "code": "async function mineEmerald(bot) {\n    let diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (diamondPickaxe) {\n        await bot.equip(diamondPickaxe, \"hand\");\n    } else if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const foundEmerald = bot.findBlock({\n        matching: mcData.blocksByName.Emerald_ore.id,\n        maxDistance: 32\n      });\n      return foundEmerald;\n    });\n    await mineBlock(bot, \"emerald_ore\", 1);\n    bot.chat(\"1 emerald mined.\");\n  }",
        "description": "Name: mineEmerald; Description: This function mines emeralds using a diamond or iron pickaxe. It first checks if the player has a diamond or iron pickaxe in their inventory, and if so, equips it. If neither are found, the function crafts an iron pickaxe and equips it. Then, it explores the area until it finds an emerald ore within a 32-block radius, and mines the block. Finally, the function sends a chat message to the player indicating that one emerald has been mined.\n"
    },
    "mineFiveCoalOres": {
        "code": "async function mineFiveCoalOres(bot) {\n  // Equip the wooden/stone pickaxe\n  const woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n  const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n  if (stonePickaxe) {\n    await bot.equip(stonePickaxe, \"hand\");\n  } else if (woodenPickaxe) {\n    await bot.equip(woodenPickaxe, \"hand\");\n  } else {\n    await craftWoodenPickaxe(bot);\n    const woodenPickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n    await bot.equip(woodenPickaxe1, \"hand\");\n  }\n\n  // Find 5 coal_ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: block => block.name === \"coal_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n  if (!coalOres) {\n    bot.chat(\"Could not find enough coal ores.\");\n    return;\n  }\n\n  // Mine the 5 coal_ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}",
        "description": "Name: mineFiveCoalOres; Description: This function mines 5 coal ores using the Mineflayer framework for Minecraft gameplay. It equips a wooden or stone pickaxe and then explores the area to find 5 coal ore blocks. Once the coal ores are found, the function mines them using the mineBlock method.\n"
    },
    "mineFiveIronOres": {
        "code": "async function mineFiveIronOres(bot) {\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else {\n    // Equip the stone pickaxe\n    const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (!stonePickaxe) {\n      await craftStonePickaxe(bot);\n      const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      await bot.equip(stonePickaxe1, \"hand\");\n    }\n    await bot.equip(stonePickaxe, \"hand\");\n  }\n\n  // Find 5 iron_ore blocks\n  const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const ironOres = bot.findBlocks({\n      matching: block => block.name === \"iron_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return ironOres.length >= 5 ? ironOres : null;\n  });\n  if (!ironOres) {\n    bot.chat(\"Could not find enough iron ores.\");\n    return;\n  }\n\n  // Mine the 5 iron_ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}",
        "description": "Name: mineFiveIronOres; Description: This function mines 5 iron ores using the Mineflayer framework for Minecraft gameplay. It first equips an iron pickaxe or a stone pickaxe if no iron pickaxe is found in the inventory. Then, it explores the area around the player until it finds 5 iron ore blocks within a 32-block radius. Finally, it mines all the found iron ore blocks.\n"
    },
    "mineFlint": {
        "code": "async function mineFlint(bot) {\n    let ironShovel = bot.inventory.findInventoryItem(mcData.itemsByName.iron_shovel.id);\n    let stoneShovel = bot.inventory.findInventoryItem(mcData.itemsByName.stone_shovel.id);\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    const flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    let newFlintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    if (ironShovel) {\n        await bot.equip(ironShovel, \"hand\");\n    } else if (stoneShovel) {\n        await bot.equip(stoneShovel, \"hand\");\n    } else if (woodenShovel) {\n        await bot.equip(woodenShovel, \"hand\");\n    } else {\n        await craftWoodenShovel(bot);\n        woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n        await bot.equip(woodenShovel, \"hand\");\n    }\n    // find gravel\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const foundGravel = bot.findBlock({\n        matching: mcData.blocksByName.gravel.id,\n        maxDistance: 32\n      });\n      return foundGravel;\n    });\n    // mine gravel until flint count increase 1\n    while (newFlintsCount == flintsCount) {\n        await mineBlock(bot, \"gravel\", 1);\n        newFlintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    }\n    bot.chat(\"1 flint mined.\");\n  }",
        "description": "Name: mineFlint; Description: This function mines flint by using different types of shovels and exploring the area to find gravel. It then mines the gravel until the flint count increases by 1.\n"
    },
    "mineGoldOre": {
        "code": "async function mineGoldOre(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    // Find 1 gold_ore block\n    const goldOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const goldOres = bot.findBlocks({\n        matching: block => block.name === \"gold_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return goldOres.length >= 1 ? goldOres : null;\n    });\n    if (!goldOres) {\n      bot.chat(\"Could not find enough gold ores.\");\n      return;\n    }\n  \n    // Mine the 1 gold_ore block\n    await mineBlock(bot, \"gold_ore\", 1);\n    bot.chat(\"1 gold ore mined.\");\n  }",
        "description": "Name: mineGoldOre; Description: This function mines gold ore using an iron pickaxe. It first checks if the player has an iron pickaxe in their inventory, and if not, crafts one and equips it. Then, it uses the exploreUntil function to find a gold ore block within a 32-block radius, and mines it using the mineBlock function. Finally, it reports the successful mining of one gold ore to the player through the chat.\n"
    },
    "mineIronOre": {
        "code": "async function mineIronOre(bot) {\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      // Equip the stone pickaxe\n      const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      if (!stonePickaxe) {\n        await craftStonePickaxe(bot);\n        const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe1, \"hand\");\n      }\n      await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 iron_ore block\n    const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const ironOres = bot.findBlocks({\n        matching: block => block.name === \"iron_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return ironOres.length >= 1 ? ironOres : null;\n    });\n    if (!ironOres) {\n      bot.chat(\"Could not find enough iron ores.\");\n      return;\n    }\n  \n    // Mine the 1 iron_ore block\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"1 iron ore mined.\");\n  }",
        "description": "Name: mineIronOre; Description: This function mines iron ore in Minecraft using the Mineflayer framework. It first equips an iron pickaxe or a stone pickaxe if one is not found, and then explores the area to find at least one iron ore block. Once an iron ore block is found, the function mines it using the `mineBlock` method. Finally, the function reports the successful mining of one iron ore block in the chat.\n"
    },
    "mineLapisLazuliOre": {
        "code": "async function mineLapisLazuliOre(bot) {\n    // Equip the iron pickaxe or stone pickaxe\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else {\n        await craftStonePickaxe(bot);\n        stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 lapis_lazuli_ore block\n    const lapisOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const lapisOres = bot.findBlocks({\n        matching: block => block.name === \"lapis_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return lapisOres.length >= 1 ? lapisOres : null;\n    });\n    if (!lapisOres) {\n      bot.chat(\"Could not find lapis lazuli ores.\");\n      return;\n    }\n  \n    // Mine the 1 lapis_lazuli_ore blocks\n    await mineBlock(bot, \"lapis_ore\", 1);\n    bot.chat(\"1 lapis lazuli ores mined.\");\n  }",
        "description": "Name: mineLapisLazuliOre; Description: This function mines lapis lazuli ore in Minecraft using the Mineflayer framework. It equips an iron or stone pickaxe, finds a lapis lazuli ore block within a 32-block radius, and then mines the block.\n"
    },
    "mineRedstoneOre": {
        "code": "async function mineRedstoneOre(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    // Find 1 redstone_ore block\n    const redstoneOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const redstoneOres = bot.findBlocks({\n        matching: block => block.name === \"redstone_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return redstoneOres.length >= 1 ? redstoneOres : null;\n    });\n    if (!redstoneOres) {\n      bot.chat(\"Could not find enough redstone ores.\");\n      return;\n    }\n  \n    // Mine the 1 redstone_ore block\n    await mineBlock(bot, \"redstone_ore\", 1);\n    bot.chat(\"1 redstone ore mined.\");\n  }",
        "description": "Name: mineRedstoneOre; Description: This function mines redstone ore using a provided Mineflayer bot. It first equips an iron pickaxe and then explores the area around the bot until it finds a redstone ore block. Once the block is found, it mines the block using the equipped pickaxe.\n"
    },
    "mineWoodLog": {
        "code": "async function mineWoodLog(bot) {\n    const woodLogNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  \n    // Find a wood log block\n    const woodLogBlock = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      return bot.findBlock({\n        matching: block => woodLogNames.includes(block.name),\n        maxDistance: 32\n      });\n    });\n    if (!woodLogBlock) {\n      bot.chat(\"Could not find a wood log.\");\n      return;\n    }\n  \n    // Mine the wood log block\n    await mineBlock(bot, woodLogBlock.name, 1);\n    bot.chat(\"Wood log mined.\");\n  }",
        "description": "Name: mineWoodLog; Description: This function mines a wood log block in Minecraft.\n"
    },
    "smeltAllRawCopper": {
        "code": "async function smeltAllRawCopper(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  let rawCopperCount = bot.inventory.count(mcData.itemsByName.raw_copper.id)\n  // check raw copper\n  if (!rawCopperCount) {\n    return;\n  }\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Place the furnace near the bot\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt all raw copper using the available coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", rawCopperCount);\n  bot.chat(\"Raw copper smelted.\");\n}",
        "description": "Name: smeltAllRawCopper; Description: This function smelts all raw copper in the inventory using a furnace and coal as fuel. It first checks if there is a furnace and coal in the inventory, and if not, crafts a furnace using available cobblestone and places it near the bot. Then, it smelts all raw copper using the available coal as fuel, and notifies the bot in chat.\n"
    },
    "smeltAllRawGold": {
        "code": "async function smeltAllRawGold(bot) {\n    // Check if there is a furnace and some coals in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n    let rawGoldCount = bot.inventory.count(mcData.itemsByName.raw_gold.id)\n    // check raw gold\n    if (!rawGoldCount) {\n        return;\n    }\n    // If not, craft a furnace using the available cobblestone\n    if (!furnaceItem) {\n        await craftFurnace(bot);\n    }\n    // Place the furnace near the bot\n    const furnacePosition = bot.entity.position.offset(1, 0, 0);\n    await placeItem(bot, \"furnace\", furnacePosition);\n    if (!coal)\n        await mineFiveCoalOres(bot);\n    // Smelt all raw gold using the available coal as fuel\n    await smeltItem(bot, \"raw_gold\", \"coal\", rawGoldCount);\n    bot.chat(\"Raw gold smelted.\");\n}",
        "description": "Name: smeltAllRawGold; Description: This function smelts all raw gold using available coal as fuel. It first checks if there is a furnace and coals in the inventory, and if not, crafts a furnace using available cobblestone. It then places the furnace near the bot and smelts all raw gold using the available coal as fuel.\n"
    },
    "smeltAllRawIron": {
        "code": "async function smeltAllRawIron(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  let rawIronCount = bot.inventory.count(mcData.itemsByName.raw_iron.id)\n  // check raw iron\n  if (!rawIronCount) {\n    return;\n  }\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Place the furnace near the bot\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt all raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", rawIronCount);\n  bot.chat(\"Raw iron smelted.\");\n}",
        "description": "Name: smeltAllRawIron; Description: This function smelts all raw iron in the inventory using a furnace and coal as fuel. It first checks if there is a furnace and coal in the inventory, and if not, crafts a furnace using available cobblestone and places it near the bot. Then, it smelts all raw iron using the available coal as fuel, and notifies the bot in chat.\n"
    },
    "smeltCactusIntoGreenDye": {
        "code": "async function smeltCactusIntoGreenDye(bot) {\n    // Check if there is a furnace in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const cactusCount = bot.inventory.count(mcData.itemsByName.cactus.id)\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id)\n    // If not, craft a furnace using the available cobblestone\n    if (!furnaceItem) {\n      await craftFurnace(bot);\n    }\n    // If not enough cactus, collect some\n    if (cactusCount < 5) {\n      await collectFiveCactusBlocks(bot);\n    }\n    // If not enough coal, collect some\n    if (!coal) {\n      await mineFiveCoalOres(bot);\n    }\n    // Find a suitable position to place the furnace\n    const furnacePosition = await findSuitablePosition(bot);\n    if (!furnacePosition) {\n      bot.chat(\"Could not find a suitable position to place the furnace.\");\n      return;\n    }\n  \n    // Place the furnace at the suitable position\n    await placeItem(bot, \"furnace\", furnacePosition);\n  \n    // Smelt 5 cactus using the available coal as fuel\n    await smeltItem(bot, \"cactus\", \"coal\", 5);\n    bot.chat(\"5 cactus smelted into green dye.\");\n  }",
        "description": "Name: smeltCactusIntoGreenDye; Description: This function smelts 5 cactus blocks into green dye using a furnace, coal, and a suitable position. It first checks if a furnace and coal are available in the inventory, and if not, crafts them using available cobblestone. It then collects enough cactus blocks and coal ores before smelting the cactus using the available coal as fuel. Finally, it places the furnace at a suitable position and smelts the cactus, resulting in 5 green dye.\n"
    },
    "smeltFiveRawIron": {
        "code": "async function smeltFiveRawIron(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Place the furnace near the bot\n  const furnacePosition = bot.entity.position.offset(1, 0, 0);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt 5 raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron smelted.\");\n}",
        "description": "Name: smeltFiveRawIron; Description: This function smelts 5 raw iron using a furnace and coal as fuel. It first checks if there is a furnace and coal in the inventory, and if not, crafts a furnace using available cobblestone. It then places the furnace near the bot and smelts 5 raw iron using the available coal as fuel.\n"
    }
}