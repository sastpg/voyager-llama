{
    "breedChicken": {
        "code": "async function breedChicken(bot) {\n    let wheatSeedsCount = bot.inventory.count(mcData.itemsByName.wheat_seeds.id);\n    let wheatSeed = bot.inventory.findInventoryItem(mcData.itemsByName.wheat_seeds.id);\n    if (wheatSeedsCount <= 2) {\n        bot.chat(\"Not enough wheat seeds for breeding. Need 2 wheat seeds.\");\n        return;\n    }\n    await bot.equip(wheatSeed, \"hand\");\n    await feedAnimals(bot, 2, \"chicken\");\n}",
        "description": "Name: breedChicken; Description:This function checks if the bot has more than 2 wheat seeds in its inventory, equips one of them, and then feeds two wheat seeds to a chicken for breeding purposes.\n"
    },
    "breedCow": {
        "code": "async function breedCow(bot) {\n    let wheatCount = bot.inventory.count(mcData.itemsByName.wheat.id);\n    let wheat = bot.inventory.findInventoryItem(mcData.itemsByName.wheat.id);\n    if (wheatCount <= 2) {\n        bot.chat(\"Not enough wheat for breeding. Need 2 wheat.\");\n        return;\n    }\n    await bot.equip(wheat, \"hand\");\n    await feedAnimals(bot, 2, \"cow\");\n}",
        "description": "Name: breedCow; Description:This function checks if the bot has at least 2 wheat items in its inventory, equips one of them, and then feeds two wheat to a cow for breeding purposes.\n"
    },
    "breedPig": {
        "code": "async function breedPig(bot) {\n    let carrotsCount = bot.inventory.count(mcData.itemsByName.carrot.id);\n    let carrot = bot.inventory.findInventoryItem(mcData.itemsByName.carrot.id);\n    if (carrotsCount <= n) {\n        bot.chat(\"Not enough carrots for breeding. Need 2 carrots.\");\n        return;\n    }\n    await bot.equip(carrot, \"hand\");\n    await feedAnimals(bot, 2, \"pig\");\n}",
        "description": "Name: breedPig; Description:This function checks if the bot has a sufficient amount of carrots, equips one if available, and then performs an action to feed pigs, likely for breeding purposes.\n"
    },
    "breedSheep": {
        "code": "async function breedSheep(bot) {\n    let wheatCount = bot.inventory.count(mcData.itemsByName.wheat.id);\n    let wheat = bot.inventory.findInventoryItem(mcData.itemsByName.wheat.id);\n    if (wheatCount <= 2) {\n        bot.chat(\"Not enough wheat for breeding. Need 2 wheat.\");\n        return;\n    }\n    await bot.equip(wheat, \"hand\");\n    await feedAnimals(bot, 2, \"sheep\");\n}",
        "description": "Name: breedSheep; Description:This function checks if the bot has at least 2 wheat items in its inventory, equips one of them, and then feeds 2 wheat to sheep entities.\n"
    },
    "collectBamboo": {
        "code": "async function collectBamboo(bot) {\n  // equip sword if there is one\n  await equipSword(bot);\n\n  // Find bamboo plants using the exploreUntil function\n  const bambooPlants = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const bambooPlants = bot.findBlocks({\n      matching: block => block.name === \"bamboo\",\n      maxDistance: 32,\n      count: 10\n    });\n    return bambooPlants.length >= 10 ? bambooPlants : null;\n  });\n  if (!bambooPlants) {\n    bot.chat(\"Could not find enough bamboo plants.\");\n    return;\n  }\n\n  // Break 10 bamboo plants\n  for (const bambooPlant of bambooPlants) {\n    const block = bot.blockAt(bambooPlant);\n    await bot.dig(block);\n  }\n  bot.chat(\"Broke 10 bamboo plants.\");\n\n  // Collect the dropped bamboo items\n  for (const bambooPlant of bambooPlants) {\n    await bot.pathfinder.goto(new GoalBlock(bambooPlant.x, bambooPlant.y, bambooPlant.z));\n  }\n  bot.chat(\"Collected 10 bamboo.\");\n}",
        "description": "Name: collectBamboo; Description:This function equips a sword, searches for and finds 10 bamboo plants within a 32-block radius, breaks them, and then navigates to each plant's location to collect the dropped bamboo items.\n"
    },
    "collectBeetroots": {
        "code": "async function collectBeetroots(bot) {\n    // Use the exploreUntil function to find beetroots\n    const beetroots = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const beetroots = bot.findBlocks({\n        matching: block => block.name === \"beetroots\" && block.getProperties().age === 3,\n        maxDistance: 32,\n        count: 1\n    });\n    return beetroots.length >= 1 ? beetroots : null;\n    });\n    if (!beetroots) {\n        bot.chat(\"Could not find enough beetroots.\");\n        return;\n    }\n    const block = bot.blockAt(beetroots[0]);\n    await bot.pathfinder.goto(new GoalBlock(beetroots[0].x, beetroots[0].y, beetroots[0].z));\n    await bot.dig(block);\n}",
        "description": "Name: collectBeetroots; Description:This function searches for beetroots within a 32-block radius, navigates to the first found beetroots, and then digs it.\n"
    },
    "collectCactusBlocks": {
        "code": "async function collectCactusBlocks(bot) {\n    // Find 5 cactus blocks using the exploreUntil function\n    const cactusBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cactusBlocks = bot.findBlocks({\n        matching: block => block.name === \"cactus\",\n        maxDistance: 32,\n        count: 5\n      });\n      return cactusBlocks.length >= 5 ? cactusBlocks : null;\n    });\n    if (!cactusBlocks) {\n      bot.chat(\"Could not find enough cactus blocks.\");\n      return;\n    }\n  \n    // Mine the 5 cactus blocks using the mineBlock function\n    await mineBlock(bot, \"cactus\", 5);\n    bot.chat(\"5 cactus blocks mined.\");\n  \n    // Collect the dropped cactus items\n    for (const cactusBlock of cactusBlocks) {\n      await bot.pathfinder.goto(new GoalBlock(cactusBlock.x, cactusBlock.y, cactusBlock.z));\n    }\n    bot.chat(\"Collected 5 cactus blocks.\");\n  }",
        "description": "Name: collectCactusBlocks; Description:This function searches for 5 cactus blocks within a 32-block radius, mines them, and then navigates to each block's location to collect the dropped items.\n"
    },
    "collectCarrots": {
        "code": "async function collectCarrots(bot) {\n    // Use the exploreUntil function to find carrots\n    const carrots = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const carrots = bot.findBlocks({\n        matching: block => block.name === \"carrots\" && block.getProperties().age === 7,\n        maxDistance: 32,\n        count: 1\n    });\n    return carrots.length >= 1 ? carrots : null;\n    });\n    if (!carrots) {\n        bot.chat(\"Could not find enough carrots.\");\n        return;\n    }\n    const block = bot.blockAt(carrots[0]);\n    await bot.pathfinder.goto(new GoalBlock(carrots[0].x, carrots[0].y, carrots[0].z));\n    await bot.dig(block);\n}",
        "description": "Name: collectCarrots; Description:This function searches for carrots within a 32-block radius, navigates to the first found carrot, and then digs it up, stopping if no carrots are found.\n"
    },
    "collectCobblestone": {
        "code": "async function collectCobblestone(bot) {\n    await equipPickaxeOrCraftOne(bot);\n    // Use the exploreUntil function to find cobblestone blocks\n    const cobblestoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cobblestoneBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 10\n      });\n      return cobblestoneBlocks.length >= 10 ? cobblestoneBlocks : null;\n    });\n    if (!cobblestoneBlocks) {\n      bot.chat(\"Could not find enough stones.\");\n      return;\n    }\n    // Mine 10 cobblestone blocks using the mineBlock function\n    await mineBlock(bot, \"stone\", 10);\n    bot.chat(`10 cobblestones mined.`);\n  }",
        "description": "Name: collectCobblestone; Description:This function equips a pickaxe, searches for and finds 10 cobblestone blocks within a 32-block radius, and then mines them.\n"
    },
    "collectCocoaBeans": {
        "code": "async function collectCocoaBeans(bot) {\n  // equip axe if there is one\n  await equipAxe(bot);\n  // Find bamboo plants using the exploreUntil function\n  const cocoaPods = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const cocoaPods = bot.findBlocks({\n      matching: block => block.name === \"cocoa\",\n      maxDistance: 32,\n      count: 1\n    });\n    return cocoaPods.length >= 1 ? cocoaPods : null;\n  });\n  if (!cocoaPods) {\n    bot.chat(\"Could not find cocoaPods.\");\n    return;\n  }\n  for (const cocoa of cocoaPods) {\n    const block = bot.blockAt(cocoa);\n    await bot.dig(block);\n    await bot.pathfinder.goto(new GoalBlock(cocoa.x, cocoa.y, cocoa.z));\n  }\n  bot.chat(\"cocoa beans collected.\")\n}",
        "description": "Name: collectCocoaBeans; Description:This function equips an axe, searches for and finds cocoa pods within a 32-block radius, digs them up, and then navigates to each pod's location to collect the beans.\n"
    },
    "collectDirt": {
        "code": "async function collectDirt(bot) {\n  await equipShovelOrCraftOne(bot);\n  // Use the exploreUntil function to find dirt blocks\n  const dirtBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const dirtBlocks = bot.findBlocks({\n      matching: block => block.name === \"dirt\",\n      maxDistance: 32,\n      count: 10\n    });\n    return dirtBlocks.length >= 10 ? dirtBlocks : null;\n  });\n  if (!dirtBlocks) {\n    bot.chat(\"Could not find enough dirt.\");\n    return;\n  }\n  // Mine 10 dirt blocks using the mineBlock function\n  await mineBlock(bot, \"dirt\", 10);\n  bot.chat(\"10 dirt mined.\");\n}",
        "description": "Name: collectDirt; Description:This function equips a shovel, searches for 10 dirt blocks within a 32-block radius, and if found, mines them.\n"
    },
    "collectLavaWithBucket": {
        "code": "async function collectLavaWithBucket(bot) {\n    // check bucket\n    let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n    if (!bucket) {\n        await craftBucket(bot);\n    }\n    // find lava\n    const lavaBlock = bot.findBlock({\n        matching: mcData.blocksByName.lava.id,\n        maxDistance: 32\n    });\n    if (!lavaBlock) {\n        bot.chat(\"No lava block found nearby. Exploring...\");\n        await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const foundlavaBlock = bot.findBlock({\n            matching: mcData.blocksByName.lava.id,\n            maxDistance: 32\n        });\n        return foundlavaBlock;\n        });\n    }\n\n    await bot.equip(bucket, \"hand\");\n    await bot.lookAt(lavaBlock.position);\n    await bot.activateItem();\n    bot.chat(\"lava collected with bucket.\");\n}",
        "description": "Name: collectLavaWithBucket; Description:This function searches for a lava block within a 32-block radius, and if none is found, it explores the surroundings until one is discovered, then equips a bucket and uses it to collect the lava.\n"
    },
    "collectMelon": {
        "code": "async function collectMelon(bot) {\n    await equipAxe(bot);\n    // Use the exploreUntil function to find melon blocks\n    const melonBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const melonBlocks = bot.findBlocks({\n        matching: block => block.name === \"melon\",\n        maxDistance: 32,\n        count: 1\n      });\n      return melonBlocks.length >= 1 ? melonBlocks : null;\n    });\n    if (!melonBlocks) {\n      bot.chat(\"Could not find enough melon.\");\n      return;\n    }\n    // Mine 1 melon block using the mineBlock function\n    await mineBlock(bot, \"melon\", 1);\n    bot.chat(\"1 melon collected.\");\n  }",
        "description": "Name: collectMelon; Description:This function equips an axe, searches for melon blocks within a 32-block radius, and if found, mines one of them.\n"
    },
    "collectMelonSeeds": {
        "code": "async function collectMelonSeeds(bot) {\n    let melonSlice = bot.inventory.findInventoryItem(mcData.itemsByName.melon_slice.id);\n    if (!melonSlice) {\n        await bot.chat(\"No melon slice found in inventory.\");\n        return;\n    }\n    await craftItem(bot, \"melon_seeds\", 1);\n}",
        "description": "Name: collectMelonSeeds; Description:This function searches for a melon slice in the inventory, and if found, crafts one melon seed.\n"
    },
    "collectMilkWithBucket": {
        "code": "async function collectMilkWithBucket(bot) {\n    // check bucket\n    let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n    if (!bucket) {\n        await craftBucket(bot);\n    }\n    // Equip the bucket\n    await bot.equip(bucket, \"hand\");\n    // Find the nearest cow\n    let cow = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        let cow = bot.nearestEntity(entity => {\n            return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n            });\n            return cow;\n        });\n        if (!cow) {\n            bot.chat(\"Could not find a cow.\");\n            return;\n        }\n    // collect milk\n    cow = bot.nearestEntity(entity => {return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;});\n    await bot.pathfinder.goto(new GoalBlock(cow.position.x, cow.position.y, cow.position.z));\n    await bot.lookAt(cow.position);\n    await bot.useOn(cow);\n  }",
        "description": "Name: collectMilkWithBucket; Description:This function ensures the bot has a bucket, equips it, finds the nearest cow within 32 blocks, moves to the cow, looks at it, and then uses the bucket on the cow to collect milk.\n"
    },
    "collectPotatoes": {
        "code": "async function collectPotatoes(bot) {\n    // Use the exploreUntil function to find potatoes\n    const potatoes = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const potatoes = bot.findBlocks({\n        matching: block => block.name === \"potatoes\" && block.getProperties().age === 7,\n        maxDistance: 32,\n        count: 1\n    });\n    return potatoes.length >= 1 ? potatoes : null;\n    });\n    if (!potatoes) {\n        bot.chat(\"Could not find enough potatoes.\");\n        return;\n    }\n    const block = bot.blockAt(potatoes[0]);\n    await bot.pathfinder.goto(new GoalBlock(potatoes[0].x, potatoes[0].y, potatoes[0].z));\n    await bot.dig(block);\n  }",
        "description": "Name: collectPotatoes; Description:This function searches for potatoes within a 32-block radius, navigates to the first found potato, and then digs it up.\n"
    },
    "collectPumpkin": {
        "code": "async function collectPumpkin(bot) {\n    await equipAxe(bot);\n    // Use the exploreUntil function to find pumpkin blocks\n    const pumpkinBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const pumpkinBlocks = bot.findBlocks({\n        matching: block => block.name === \"pumpkin\",\n        maxDistance: 32,\n        count: 1\n      });\n      return pumpkinBlocks.length >= 1 ? pumpkinBlocks : null;\n    });\n    if (!pumpkinBlocks) {\n      bot.chat(\"Could not find enough pumpkin.\");\n      return;\n    }\n    // Mine 1 pumpkin block using the mineBlock function\n    await mineBlock(bot, \"pumpkin\", 1);\n    bot.chat(\"1 pumpkin collected.\");\n  }",
        "description": "Name: collectPumpkin; Description:This function equips an axe, searches for pumpkin blocks within a 32-block radius, and if found, mines one of them.\n"
    },
    "collectPumpkinSeeds": {
        "code": "async function collectPumpkinSeeds(bot) {\n    let pumpkin = bot.inventory.findInventoryItem(mcData.itemsByName.pumpkin.id);\n    if (!pumpkin) {\n        await bot.chat(\"No pumpkin found in inventory.\");\n        return;\n    }\n    await craftItem(bot, \"pumpkin_seeds\", 1);\n}",
        "description": "Name: collectPumpkinSeeds; Description:This function searches for a pumpkin in the inventory and if found, crafts pumpkin seeds.\n"
    },
    "collectSand": {
        "code": "async function collectSand(bot) {\n  await equipShovelOrCraftOne(bot);\n  // Use the exploreUntil function to find sand blocks\n  const sandBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const sandBlocks = bot.findBlocks({\n      matching: block => block.name === \"sand\",\n      maxDistance: 32,\n      count: 10\n    });\n    return sandBlocks.length >= 10 ? sandBlocks : null;\n  });\n  if (!sandBlocks) {\n    bot.chat(\"Could not find enough sand.\");\n    return;\n  }\n  // Mine 10 sand blocks using the mineBlock function\n  await mineBlock(bot, \"sand\", 10);\n  bot.chat(\"10 sand mined.\");\n}",
        "description": "Name: collectSand; Description:This function equips a shovel, searches for 10 sand blocks within a 32-block radius, and if found, mines them.\n"
    },
    "collectSandstone": {
        "code": "async function collectSandstone(bot) {\n    await equipPickaxeOrCraftOne(bot);\n    // Use the exploreUntil function to find sandstone blocks\n    const sandstoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sandstoneBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 10\n      });\n      return sandstoneBlocks.length >= 10 ? sandstoneBlocks : null;\n    });\n    if (!sandstoneBlocks) {\n      bot.chat(\"Could not find enough stones.\");\n      return;\n    }\n    // Mine 10 sandstone blocks using the mineBlock function\n    await mineBlock(bot, \"stone\", 10);\n    bot.chat(`10 sandstones mined.`);\n  }",
        "description": "Name: collectSandstone; Description:This function collects sandstone blocks by equipping a pickaxe or crafting one, exploring for stone blocks, and then mining 10 of them.\n"
    },
    "collectSugarCane": {
        "code": "async function collectSugarCane(bot) {\n    // Find sugar cane plants using the exploreUntil function\n    const sugarCanePlants = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sugarCanePlants = bot.findBlocks({\n        matching: block => block.name === \"sugar_cane\",\n        maxDistance: 32,\n        count: 1\n      });\n      return sugarCanePlants.length >= 1 ? sugarCanePlants : null;\n    });\n    if (!sugarCanePlants) {\n      bot.chat(\"Could not find sugar cane plants.\");\n      return;\n    }\n    for (const sugarCanePlant of sugarCanePlants) {\n      const block = bot.blockAt(sugarCanePlant);\n      await bot.dig(block);\n      await bot.pathfinder.goto(new GoalBlock(sugarCanePlant.x, sugarCanePlant.y, sugarCanePlant.z));\n    }\n    bot.chat(\"sugar cane collected.\");\n}",
        "description": "Name: collectSugarCane; Description:This function searches for sugar cane plants within a 32-block radius, then digs and navigates to each plant to collect it.\n"
    },
    "collectWaterWithBucket": {
        "code": "async function collectWaterWithBucket(bot) {\n  // check bucket\n  let bucket = bot.inventory.findInventoryItem(mcData.itemsByName.bucket.id);\n  if (!bucket) {\n      await craftBucket(bot);\n  }\n  // find water\n  const waterBlock = bot.findBlock({\n    matching: mcData.blocksByName.water.id,\n    maxDistance: 32\n  });\n  if (!waterBlock) {\n    bot.chat(\"No water block found nearby. Exploring...\");\n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundWaterBlock = bot.findBlock({\n        matching: mcData.blocksByName.water.id,\n        maxDistance: 32\n      });\n      return foundWaterBlock;\n    });\n  }\n  await bot.pathfinder.goto(new GoalBlock(waterBlock.position.x, waterBlock.position.y, waterBlock.position.z))\n  await bot.equip(bucket, \"hand\");\n  await bot.lookAt(waterBlock.position);\n  await bot.activateItem();\n  bot.chat(\"Water collected with bucket.\");\n}",
        "description": "Name: collectWaterWithBucket; Description:This function searches for a bucket in the inventory, crafts one if not found, then searches for a nearby water block, explores to find one if not found, navigates to the water block, equips the bucket, looks at the water block, and activates the bucket to collect water.\n"
    },
    "collectWheat": {
        "code": "async function collectWheat(bot) {\n    // Use the exploreUntil function to find wheat\n    const ripe_wheat = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const wheat = bot.findBlocks({\n            matching: block => block.name === \"wheat\" && block.getProperties().age === 7,\n            maxDistance: 32,\n            count: 1\n        });\n        return wheat.length >= 1 ? wheat : null;\n    });\n    if (!ripe_wheat) {\n        bot.chat(\"Could not find ripe wheat. Plant seeds or wait for seeds to ripen first!\");\n        return;\n    }\n    const block = bot.blockAt(ripe_wheat[0]);\n    // const blockProperties = block.getProperties();\n    // bot.chat(`${blockProperties.age}`);\n    // bot.chat(JSON.stringify(blockProperties));\n    await bot.pathfinder.goto(new GoalBlock(ripe_wheat[0].x, ripe_wheat[0].y, ripe_wheat[0].z));\n    await bot.dig(block);\n  }",
        "description": "Name: collectWheat; Description:This function searches for ripe wheat within a 32-block radius, navigates to the found wheat, and then digs it up.\n"
    },
    "collectWheatSeeds": {
        "code": "async function collectWheatSeeds(bot) {\n    // Check seeds\n    let seedsCount = bot.inventory.count(mcData.itemsByName.wheat_seeds.id);\n    let newSeedsCount = seedsCount;\n    // Use the exploreUntil function to find grass\n    do {\n        const grasses = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const grasses = bot.findBlocks({\n            matching: block => block.name === \"grass\",\n            maxDistance: 32,\n            count: 10\n        });\n        return grasses.length >= 10 ? grasses : null;\n        });\n        if (!grasses) {\n            bot.chat(\"Could not find enough grass.\");\n            return;\n        }\n        // Mine 10 grass using the dig function (The mineBlock function is not applicable for collecting plants or crops)\n        for (const grass of grasses) {\n            const block = bot.blockAt(grass);\n            await bot.pathfinder.goto(new GoalBlock(grass.x, grass.y, grass.z));\n            await bot.dig(block);\n            await bot.pathfinder.goto(new GoalBlock(grass.x, grass.y, grass.z));\n        }\n        // Check seeds\n        newSeedsCount = bot.inventory.count(mcData.itemsByName.wheat_seeds.id);\n    } while (newSeedsCount == seedsCount)\n    await bot.chat(`${newSeedsCount-seedsCount} wheat seeds collected.`)\n  }",
        "description": "Name: collectWheatSeeds; Description:This function searches for grass blocks within a 32-block radius, mines 10 of them, and repeats the process until it collects new wheat seeds, which are then counted and stored in the inventory.\n"
    },
    "cookBeef": {
        "code": "async function cookBeef(bot) {\n    // Check if there is a furnace and some coals and beef in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n    const beef = bot.inventory.findInventoryItem(mcData.itemsByName.beef.id);\n    // If not, craft a furnace using the available cobblestone\n    if (!beef)\n        await killOneCow(bot);\n    if (!furnaceItem) \n        await craftFurnace(bot);\n    if (!coal)\n        await mineFiveCoalOres(bot); \n    await cookFood(bot, \"beef\");\n}",
        "description": "Name: cookBeef; Description:This function ensures the necessary items are available to cook beef, crafting a furnace and mining coal if needed, and then killing a cow to obtain beef if it's not already in the inventory, before finally cooking the beef.\n"
    },
    "cookChicken": {
        "code": "async function cookChicken(bot) {\n    // Check if there is a furnace and some coals and chicken in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n    const chicken = bot.inventory.findInventoryItem(mcData.itemsByName.chicken.id);\n    // If not, craft a furnace using the available cobblestone\n    if (!chicken)\n        await killOneChicken(bot);\n    if (!furnaceItem) \n        await craftFurnace(bot);\n    if (!coal)\n        await mineFiveCoalOres(bot); \n    await cookFood(bot, \"chicken\");\n}",
        "description": "Name: cookChicken; Description:This function ensures the necessary items are available to cook chicken, crafting a furnace and mining coal if needed, and then killing a chicken if none is available, before proceeding to cook the chicken.\n"
    },
    "cookMutton": {
        "code": "async function cookMutton(bot) {\n    // Check if there is a furnace and some coals and mutton in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n    const mutton = bot.inventory.findInventoryItem(mcData.itemsByName.mutton.id);\n    // If not, craft a furnace using the available cobblestone\n    if (!mutton)\n        await killOneSheep(bot);\n    if (!furnaceItem) \n        await craftFurnace(bot);\n    if (!coal)\n        await mineFiveCoalOres(bot); \n    await cookFood(bot, \"mutton\");\n}",
        "description": "Name: cookMutton; Description:This function ensures the necessary items are available to cook mutton, crafting a furnace and mining coal if needed, and killing a sheep if no mutton is found, before proceeding to cook the mutton.\n"
    },
    "cookPorkchop": {
        "code": "async function cookPorkchop(bot) {\n  // Check if there is a furnace and some coals and porks in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  const pork = bot.inventory.findInventoryItem(mcData.itemsByName.porkchop.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!pork)\n    await killOnePig(bot);\n  if (!furnaceItem) \n    await craftFurnace(bot);\n  if (!coal)\n    await mineFiveCoalOres(bot); \n  await cookFood(bot, \"porkchop\");\n}",
        "description": "Name: cookPorkchop; Description:This function ensures the necessary items are available to cook a porkchop by checking for a furnace, coals, and pork in the inventory, and if not, crafts a furnace, kills a pig for the pork, and mines coal ores as needed, before proceeding to cook the porkchop.\n"
    },
    "craftAmethystBlock": {
        "code": "async function craftAmethystBlock(bot) {\n    // Check if there are enough amethyst shards in the inventory\n    let amethystsCount = bot.inventory.count(mcData.itemsByName.amethyst_shard.id);\n    // If not enough amethyst shards, mine some\n    while (amethystsCount < 4) {\n      await mineAmethystCluster(bot);\n      amethystsCount = bot.inventory.count(mcData.itemsByName.amethyst.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an amethyst block using the crafting table\n    await craftItem(bot, \"amethyst_block\", 1);\n    bot.chat(\"Crafted an amethyst block.\");\n}",
        "description": "Name: craftAmethystBlock; Description:This function ensures the bot has enough amethyst shards by mining more if necessary, then crafts a crafting table if it doesn't have one, places it nearby, and finally uses it to craft an amethyst block.\n"
    },
    "craftAnvil": {
        "code": "async function craftAnvil(bot) {\n    await smeltAllRawIron(bot);\n    // Check if there are enough iron ingots and iron blocks in the inventory\n    let ironBlockCount = bot.inventory.count(mcData.itemsByName.iron_block.id);\n    // If not enough iron_block, craft some\n    if (ironBlockCount < 3) {\n        await craftIronBlock(bot);\n    }\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n    while (ironIngotsCount < 4) {\n      await mineIronOre(bot);\n      ironIngotsCount += 1;\n    }\n    await smeltAllRawIron(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a anvil using the crafting table\n    await craftItem(bot, \"anvil\", 1);\n    bot.chat(\"Crafted a anvil.\");\n}",
        "description": "Name: craftAnvil; Description:This function crafts an anvil by smelting iron ores into iron ingots, crafting iron blocks and crafting an anvil using a crafting table, ensuring sufficient iron and crafting table inventory.\n"
    },
    "craftArrow": {
        "code": "async function craftArrow(bot) {\n    // Check if there are enough feather, flint and stick in the inventory\n    let feathersCount = bot.inventory.count(mcData.itemsByName.feather.id);\n    let flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n\n    if (flintsCount < 1) {\n        await mineFlint(bot);\n    }\n    if (sticksCount < 1) {\n        await craftSticks(bot);\n    }\n    while (feathersCount < 1) {\n        await killOneChicken(bot);\n        feathersCount = bot.inventory.count(mcData.itemsByName.feather.id);\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an arrow using the crafting table\n    await craftItem(bot, \"arrow\", 1);\n    bot.chat(\"Crafted an arrow.\");\n}",
        "description": "Name: craftArrow; Description:This function ensures the bot has sufficient materials, crafts any missing items, sets up a crafting table, and then uses it to craft a single arrow.\n"
    },
    "craftBoat": {
        "code": "async function craftBoat(bot) {\n    // Check if there are enough planks in the inventory\n    let planksCount = await getPlanksCount(bot);\n    bot.chat(`inventory planks count: ${planksCount}`);\n    // If not, craft planks from logs\n    while (planksCount < 5) {\n      await craftWoodenPlanks(bot);\n      planksCount = await getPlanksCount(bot);\n      bot.chat(`inventory planks count: ${planksCount}`);\n    }\n    // check wooden_shovel\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    if (!woodenShovel) {\n        await craftWoodenShovel(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a boat using the crafting table\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let type;\n    for (const plankName of plankNames) {\n      const plankId = mcData.itemsByName[plankName].id;\n      const plankCount = bot.inventory.count(plankId);\n      if (plankCount >= 5)\n        type = plankName.match(/(\\w+)_planks/)[1];\n    }\n    await craftItem(bot, type + \"_boat\", 1);\n    bot.chat(\"Crafted a boat.\");\n  }",
        "description": "Name: craftBoat; Description:This function ensures the bot has sufficient planks and a crafting table, then crafts a boat by first crafting planks if needed, obtaining a wooden shovel and crafting table if missing, placing the crafting table, and finally crafting a boat using the available planks.\n"
    },
    "craftBow": {
        "code": "async function craftBow(bot) {\n    // Check if there are enough strings and sticks in the inventory\n    const stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough strings or sticks, collect the required items\n    if (stringsCount < 3) {\n      bot.chat(\"Not enough strings.\")\n      return;\n    }\n    if (sticksCount < 3) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a bow using the crafting table\n    await craftItem(bot, \"bow\", 1);\n    bot.chat(\"Crafted a bow.\");\n  }",
        "description": "Name: craftBow; Description:This function checks if the bot has enough strings and sticks in its inventory, collects the required items if not, crafts a crafting table if needed, places it near the bot, and then uses it to craft a bow.\n"
    },
    "craftBucket": {
        "code": "async function craftBucket(bot) {\n  // Check if there are enough iron ingots in the inventory\n  const ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  if (ironIngotsCount < 3) {\n    await mineFiveIronOres(bot);\n    bot.chat(\"Collected iron ores.\");\n    await smeltFiveRawIron(bot);\n    bot.chat(\"Smelted iron ores into iron ingots.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a bucket using the crafting table\n  await craftItem(bot, \"bucket\", 1);\n  bot.chat(\"Crafted a bucket.\");\n}",
        "description": "Name: craftBucket; Description:This function ensures the bot has sufficient iron ingots by mining and smelting iron ores if necessary, crafts a crafting table if not already in inventory, places the crafting table near the bot, and then uses it to craft a bucket.\n"
    },
    "craftChest": {
        "code": "async function craftChest(bot) {\n    // Check if there are enough planks in the inventory\n    let planksCount = await getPlanksCount(bot);\n    // If not, craft planks from logs\n    while (planksCount < 8) {\n      await craftWoodenPlanks(bot);\n      planksCount = await getPlanksCount(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a chest using the crafting table\n    await craftItem(bot, \"chest\", 1);\n    bot.chat(\"Crafted a chest.\");\n  }",
        "description": "Name: craftChest; Description:This function ensures the bot has enough planks by crafting them from logs if necessary, crafts a crafting table if it's not in the inventory, places the crafting table near the bot, and then uses it to craft a chest.\n"
    },
    "craftClock": {
        "code": "async function craftClock(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and redstone in the inventory\n    let goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    let redstoneCount = bot.inventory.count(mcData.itemsByName.redstone.id);\n    // If not enough gold ingots, mine gold ores and smelt them into gold ingots\n    while (goldIngotsCount < 4) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // If not enough redstone, mine 1\n    if (redstoneCount < 1) {\n        await mineRedstoneOre(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a clock using the crafting table\n    await craftItem(bot, \"clock\", 1);\n    bot.chat(\"Crafted a clock.\");\n}",
        "description": "Name: craftClock; Description:This function crafts a clock in the game Minecraft by smelting gold and redstone ores, checking the inventory for sufficient resources, crafting a crafting table if necessary, and placing it near the bot before crafting the clock.\n"
    },
    "craftCobblestoneSlab": {
        "code": "async function craftCobblestoneSlab(bot) {\n    // Check if there are enough cobblestones in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    // If not enough cobblestones, collect some\n    while (cobblestoneCount < 3) {\n      await mineCobblestone(bot);\n      cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft cobblestone_slab using the crafting table\n    await craftItem(bot, \"cobblestone_slab\", 1);\n    bot.chat(\"Crafted cobblestone slabs.\");\n  }",
        "description": "Name: craftCobblestoneSlab; Description:This function crafts cobblestone slabs by checking for cobblestones and crafting table in the inventory, collecting more cobblestones if needed, crafting a table if necessary, placing it near the bot, and then crafting the slabs using the table.\n"
    },
    "craftCobblestoneStairs": {
        "code": "async function craftCobblestoneStairs(bot) {\n    // Check if there are enough cobblestones in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    // If not enough cobblestones, collect some\n    while (cobblestoneCount < 6) {\n      await mineCobblestone(bot);\n      cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a cobblestone_stairs using the crafting table\n    await craftItem(bot, \"cobblestone_stairs\", 1);\n    bot.chat(\"Crafted cobblestone stairs.\");\n  }",
        "description": "Name: craftCobblestoneStairs; Description:This function crafts cobblestone stairs by collecting cobblestones if necessary, crafting a crafting table if needed, placing the table near the bot, and then crafting the stairs using the table.\n"
    },
    "craftCobblestoneWall": {
        "code": "async function craftCobblestoneWall(bot) {\n    // Check if there are enough cobblestones in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    // If not enough cobblestones, collect some\n    while (cobblestoneCount < 6) {\n      await mineCobblestone(bot);\n      cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a cobblestone_wall using the crafting table\n    await craftItem(bot, \"cobblestone_wall\", 1);\n    bot.chat(\"Crafted a cobblestone wall.\");\n  }",
        "description": "Name: craftCobblestoneWall; Description:This function crafts a cobblestone wall by collecting cobblestones if needed, crafting a crafting table if not already present, placing the crafting table near the bot, and then crafting the cobblestone wall using the crafting table.\n"
    },
    "craftCompass": {
        "code": "async function craftCompass(bot) {\n    // smelt all raw iron first\n    await smeltAllRawIron(bot);\n    // Check if there are enough iron ingots and redstone in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let redstoneCount = bot.inventory.count(mcData.itemsByName.redstone.id);\n    // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n    while (ironIngotsCount < 4) {\n      await mineIronOre(bot);\n      ironIngotsCount += 1;\n    }\n    await smeltAllRawIron(bot);\n    // If not enough redstone, mine 1\n    if (redstoneCount < 1) {\n        await mineRedstoneOre(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a compass using the crafting table\n    await craftItem(bot, \"compass\", 1);\n    bot.chat(\"Crafted a compass.\");\n}",
        "description": "Name: craftCompass; Description:This function crafts a compass by smelting iron ingots, mining redstone ore if necessary, crafting a crafting table if it's not in the inventory, and then crafting the compass itself using the crafting table.\n"
    },
    "craftCopperBlock": {
        "code": "async function craftCopperBlock(bot) {\n    // smelt all raw copper first\n    await smeltAllRawCopper(bot);\n    // Check if there are enough copper ingots in the inventory\n    let copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n    // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n    while (copperIngotsCount < 9) {\n      await mineCopperOre(bot);\n      copperIngotsCount += 1;\n    }\n    await smeltAllRawCopper(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an copper block using the crafting table\n    await craftItem(bot, \"copper_block\", 1);\n    bot.chat(\"Crafted an copper block.\");\n}",
        "description": "Name: craftCopperBlock; Description:This function automates the process of crafting a copper block by first smelting raw copper, then mining and smelting more copper ore if necessary, crafting a crafting table if not already available, placing the crafting table, and finally crafting the copper block.\n"
    },
    "craftCraftingTable": {
        "code": "async function craftCraftingTable(bot) {\n  // check log or planks\n  const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n  const planksCount = await getPlanksCount(bot);\n  if (planksCount >= 4) {\n    // Craft a crafting table using planks\n    await craftItem(bot, \"crafting_table\", 1);\n    bot.chat(\"Crafted a crafting table.\");\n  }\n  // if no enough planks\n  const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n  // if no logs, mine logs first\n  if (!logInInventory) {\n    bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n    await mineWoodLog(bot);\n    await craftWoodenPlanks(bot);\n  }\n\n  // Craft a crafting table using planks\n  await craftItem(bot, \"crafting_table\", 1);\n  bot.chat(\"Crafted a crafting table.\");\n}",
        "description": "Name: craftCraftingTable; Description:This function crafts a crafting table by first checking if there are enough planks in the inventory, and if not, it mines a wooden log and crafts wooden planks before crafting the table.\n"
    },
    "craftCutSandstone": {
        "code": "async function craftCutSandstone(bot) {\n    let sandstoneCount = bot.inventory.count(mcData.itemsByName.sandstone.id);\n    if (sandstoneCount < 4) {\n        await collectSandstone(bot);\n    }\n    await craftItem(bot, \"cut_sandstone\", 1);\n    bot.chat(\"Crafted cut sandstones.\");\n}",
        "description": "Name: craftCutSandstone; Description:This function crafts cut sandstone by collecting sandstone from the player's inventory if necessary, then crafting the item, and finally updating the player's inventory.\n"
    },
    "craftCutSandstoneSlab": {
        "code": "async function craftSandstoneSlab(bot) {\n    // Check if there are enough sandstones in the inventory\n    let cutSandstoneCount = bot.inventory.count(mcData.itemsByName.cut_sandstone.id);\n    // If not enough sandstones, collect some\n    if (cutSandstoneCount < 3) {\n      await craftCutSandstone(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft sandstone_slab using the crafting table\n    await craftItem(bot, \"sandstone_slab\", 1);\n    bot.chat(\"Crafted sandstone slabs.\");\n  }",
        "description": "Name: craftCutSandstoneSlab; Description:This function crafts sandstone slabs by checking if there are enough sandstones in the inventory, collecting more if necessary, then crafting and placing a crafting table and finally crafting the sandstone slabs using the table.\n"
    },
    "craftDiamondAxe": {
        "code": "async function craftDiamondAxe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 3) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond axe using the crafting table\n    await craftItem(bot, \"diamond_axe\", 1);\n    bot.chat(\"Crafted an diamond axe.\");\n  }",
        "description": "Name: craftDiamondAxe; Description:This function collects diamonds and sticks, crafts a crafting table if necessary, places it near the bot, and then uses it to craft a diamond axe.\n"
    },
    "craftDiamondBlock": {
        "code": "async function craftDiamondBlock(bot) {\n    // Check if there are enough diamonds in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    // If not enough diamonds, mine some\n    while (diamondsCount < 9) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an diamond block using the crafting table\n    await craftItem(bot, \"diamond_block\", 1);\n    bot.chat(\"Crafted an diamond block.\");\n}",
        "description": "Name: craftDiamondBlock; Description:This function ensures the bot has enough diamonds and a crafting table, then places the crafting table and uses it to craft a diamond block.\n"
    },
    "craftDiamondBoots": {
        "code": "async function craftDiamondBoots(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 4) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond boots using the crafting table\n    await craftItem(bot, \"diamond_boots\", 1);\n    bot.chat(\"Crafted an diamond boots.\");\n  }",
        "description": "Name: craftDiamondBoots; Description:This function collects diamonds if there are not enough in the inventory, crafts a crafting table if not available, places the crafting table near the bot, and then crafts a diamond boots using the crafting table.\n"
    },
    "craftDiamondChestplate": {
        "code": "async function craftDiamondChestplate(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 8) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond chestplate using the crafting table\n    await craftItem(bot, \"diamond_chestplate\", 1);\n    bot.chat(\"Crafted an diamond chestplate.\");\n  }",
        "description": "Name: craftDiamondChestplate; Description:This function collects diamonds if there are not enough in the inventory, crafts a crafting table if not available, places the crafting table near the bot, and then crafts a diamond chestplate using the crafting table.\n"
    },
    "craftDiamondHelmet": {
        "code": "async function craftDiamondHelemt(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 5) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond helemt using the crafting table\n    await craftItem(bot, \"diamond_helemt\", 1);\n    bot.chat(\"Crafted an diamond helemt.\");\n  }",
        "description": "Name: craftDiamondHelmet; Description:This function collects diamonds if there are not enough in the inventory, crafts a crafting table if needed, places it near the bot, and then uses it to craft a diamond helmet.\n"
    },
    "craftDiamondHoe": {
        "code": "async function craftDiamondHoe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 2) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond hoe using the crafting table\n    await craftItem(bot, \"diamond_hoe\", 1);\n    bot.chat(\"Crafted an diamond hoe.\");\n  }",
        "description": "Name: craftDiamondHoe; Description:This function collects diamonds and sticks, crafts a crafting table if necessary, places it near the bot, and then uses it to craft a diamond hoe.\n"
    },
    "craftDiamondLeggings": {
        "code": "async function craftDiamondLeggings(bot) {\n    // Check if there are enough diamond in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n  \n    // If not enough diamonds, collect some\n    while (diamondsCount < 7) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond_ingot.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond leggings using the crafting table\n    await craftItem(bot, \"diamond_leggings\", 1);\n    bot.chat(\"Crafted an diamond leggings.\");\n  }",
        "description": "Name: craftDiamondLeggings; Description:This function ensures the bot has enough diamonds and a crafting table, then places the crafting table and uses it to craft a single diamond leggings.\n"
    },
    "craftDiamondPickaxe": {
        "code": "async function craftDiamondPickaxe(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 3) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond pickaxe using the crafting table\n    await craftItem(bot, \"diamond_pickaxe\", 1);\n    bot.chat(\"Crafted an diamond pickaxe.\");\n  }",
        "description": "Name: craftDiamondPickaxe; Description:This function collects diamonds and sticks, crafts a crafting table if necessary, places it near the bot, and then uses it to craft a diamond pickaxe.\n"
    },
    "craftDiamondShovel": {
        "code": "async function craftDiamondShovel(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 1) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond shovel using the crafting table\n    await craftItem(bot, \"diamond_shovel\", 1);\n    bot.chat(\"Crafted an diamond shovel.\");\n  }",
        "description": "Name: craftDiamondShovel; Description:This function collects diamonds and sticks, crafts a crafting table if necessary, places it near the bot, and then uses it to craft a diamond shovel.\n"
    },
    "craftDiamondSword": {
        "code": "async function craftDiamondSword(bot) {\n    // Check if there are enough diamonds and sticks in the inventory\n    let diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  \n    // If not enough diamonds or sticks, collect the required items.\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (diamondsCount < 2) {\n      await mineDiamond(bot);\n      diamondsCount = bot.inventory.count(mcData.itemsByName.diamond.id);\n    }\n    bot.chat(\"Collected diamonds.\");\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft an diamond sword using the crafting table\n    await craftItem(bot, \"diamond_sword\", 1);\n    bot.chat(\"Crafted an diamond sword.\");\n  }",
        "description": "Name: craftDiamondSword; Description:This function collects diamonds and sticks, crafts a crafting table if necessary, places it near the bot, and then uses it to craft a diamond sword.\n"
    },
    "craftEmeraldBlock": {
        "code": "async function craftEmeraldBlock(bot) {\n    // Check if there are enough emeralds in the inventory\n    let emeraldsCount = bot.inventory.count(mcData.itemsByName.emerald.id);\n    // If not enough emeralds, mine some\n    while (emeraldsCount < 9) {\n      await mineEmerald(bot);\n      emeraldsCount = bot.inventory.count(mcData.itemsByName.emerald.id);\n    }\n    \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an emerald block using the crafting table\n    await craftItem(bot, \"emerald_block\", 1);\n    bot.chat(\"Crafted an emerald block.\");\n}",
        "description": "Name: craftEmeraldBlock; Description:This function ensures the bot has enough emeralds and a crafting table, then places the crafting table and uses it to craft an emerald block.\n"
    },
    "craftFishingRod": {
        "code": "async function craftFishingRod(bot) {\n    // Check if there are enough sticks and strings in the inventory\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    let stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n    if (sticksCount < 3) {\n      await craftSticks(bot);\n    }\n    if (stringsCount < 2) {\n        await bot.chat(\"Not enough strings in inventory, try killing some spiders first!\");\n        return;\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a fishing_rod using the crafting table\n    await craftItem(bot, \"fishing_rod\", 1);\n    bot.chat(\"Crafted a fishing rod.\");\n  }",
        "description": "Name: craftFishingRod; Description:This function crafts a fishing rod by checking if the bot has enough sticks and strings in its inventory, crafting more sticks if necessary, and then crafting the fishing rod using a crafting table.\n"
    },
    "craftFlintAndSteel": {
        "code": "async function craftFlintAndSteel(bot) {\n    \n    // Check if there are enough flints and iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    await smeltAllRawIron(bot);\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 1) {\n      await mineIronOre(bot);\n      await smeltAllRawIron(bot);\n    }\n    if (flintsCount < 1) {\n        await mineFlint(bot);\n        flintsCount += 1;\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a flint_and_steel using the crafting table\n    await craftItem(bot, \"flint_and_steel\", 1);\n    bot.chat(\"Crafted a flint_and_steel.\");\n  }",
        "description": "Name: craftFlintAndSteel; Description:This function ensures the bot has sufficient iron ingots and flints by smelting raw iron and mining flint ore if necessary, then crafts a crafting table if not already available, places it nearby, and finally crafts a flint and steel item using the crafting table.\n"
    },
    "craftFurnace": {
        "code": "async function craftFurnace(bot) {\n  // Check if there are enough cobblestones in the inventory\n  const cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n\n  // If not, check wooden pickaxe and mine the required cobblestones\n  const woodenPickaxe = bot.inventory.count(mcData.itemsByName.wooden_pickaxe.id)\n  if (cobblestoneCount < 8) {\n    if (woodenPickaxe < 1)\n      await craftWoodenPickaxe(bot);\n    await mineBlock(bot, \"stone\", 8 - cobblestoneCount);\n    bot.chat(\"Collected cobblestone.\");\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n\n  // Craft a furnace using the crafting table\n  await craftItem(bot, \"furnace\", 1);\n  bot.chat(\"Crafted a furnace.\");\n}",
        "description": "Name: craftFurnace; Description:This function ensures the bot has enough cobblestones by mining more if necessary, crafts a crafting table if it doesn't have one, places the crafting table near the bot, and then uses it to craft a furnace.\n"
    },
    "craftGoldBlock": {
        "code": "async function craftGoldBlock(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    let goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, mine gold ores and smelt them into gold ingots\n    while (goldIngotsCount < 9) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a gold block using the crafting table\n    await craftItem(bot, \"gold_block\", 1);\n    bot.chat(\"Crafted a gold block.\");\n}",
        "description": "Name: craftGoldBlock; Description:This function automates the process of crafting a gold block by first smelting raw gold, then mining and smelting more gold ore if necessary, crafting a crafting table if not already available, placing the crafting table, and finally crafting the gold block.\n"
    },
    "craftGoldenAxe": {
        "code": "async function craftGoldenAxe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 3) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden axe using the crafting table\n    await craftItem(bot, \"golden_axe\", 1);\n    bot.chat(\"Crafted an golden axe.\");\n  }",
        "description": "Name: craftGoldenAxe; Description:This function gathers necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a golden axe, ensuring the bot has sufficient gold ingots and sticks in its inventory.\n"
    },
    "craftGoldenBoots": {
        "code": "async function craftGoldenBoots(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 4) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden boots using the crafting table\n    await craftItem(bot, \"golden_boots\", 1);\n    bot.chat(\"Crafted an golden boots.\");\n  }",
        "description": "Name: craftGoldenBoots; Description:This function automates the process of crafting golden boots by first smelting raw gold, then collecting and smelting more gold ore if necessary, crafting a crafting table if not already in inventory, placing the table, and finally using it to craft the golden boots.\n"
    },
    "craftGoldenchestplate": {
        "code": "async function craftGoldenChestplate(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 8) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden chestplate using the crafting table\n    await craftItem(bot, \"golden_chestplate\", 1);\n    bot.chat(\"Crafted an golden chestplate.\");\n  }",
        "description": "Name: craftGoldenchestplate; Description:This function automates the process of crafting a golden chestplate by first smelting raw gold, then collecting and smelting additional gold ore if necessary, crafting a crafting table if not already in inventory, placing the crafting table, and finally crafting the golden chestplate.\n"
    },
    "craftGoldenHelmet": {
        "code": "async function craftGoldenHelmet(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 5) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden helmet using the crafting table\n    await craftItem(bot, \"golden_helmet\", 1);\n    bot.chat(\"Crafted an golden helmet.\");\n  }",
        "description": "Name: craftGoldenHelmet; Description:This function automates the process of crafting a golden helmet by first smelting raw gold, then collecting and smelting additional gold ore if necessary, crafting a crafting table if not already in inventory, placing the crafting table, and finally crafting the golden helmet.\n"
    },
    "craftGoldenHoe": {
        "code": "async function craftGoldenHoe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 2) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden hoe using the crafting table\n    await craftItem(bot, \"golden_hoe\", 1);\n    bot.chat(\"Crafted an golden hoe.\");\n  }",
        "description": "Name: craftGoldenHoe; Description:This function gathers necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a golden hoe, ensuring the bot has sufficient gold ingots and sticks in its inventory.\n"
    },
    "craftGoldenLeggings": {
        "code": "async function craftGoldenLeggings(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    // If not enough gold ingots, collect the required items.\n    if (goldIngotsCount < 7) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden leggings using the crafting table\n    await craftItem(bot, \"golden_leggings\", 1);\n    bot.chat(\"Crafted an golden leggings.\");\n  }",
        "description": "Name: craftGoldenLeggings; Description:This function automates the process of crafting golden leggings by first smelting raw gold, then collecting and smelting more gold ore if necessary, crafting a crafting table if not already in inventory, placing the crafting table, and finally crafting the golden leggings.\n"
    },
    "craftGoldenPickAxe": {
        "code": "async function craftGoldPickaxe(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 3) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an gold pickaxe using the crafting table\n    await craftItem(bot, \"gold_pickaxe\", 1);\n    bot.chat(\"Crafted an gold pickaxe.\");\n  }",
        "description": "Name: craftGoldenPickAxe; Description:This function automates the process of crafting a gold pickaxe by first smelting raw gold, then collecting and smelting additional gold ore and crafting sticks if necessary, followed by crafting a crafting table if not already in inventory, placing it, and finally crafting the gold pickaxe using the table.\n"
    },
    "craftGoldenShovel": {
        "code": "async function craftGoldenShovel(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 1) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden shovel using the crafting table\n    await craftItem(bot, \"golden_shovel\", 1);\n    bot.chat(\"Crafted an golden shovel.\");\n  }",
        "description": "Name: craftGoldenShovel; Description:This function automates the process of crafting a golden shovel by first smelting raw gold, then collecting and preparing necessary items like gold ingots and sticks, crafting a crafting table if needed, placing it near the bot, and finally using it to craft the golden shovel.\n"
    },
    "craftGoldenSword": {
        "code": "async function craftGoldenSword(bot) {\n    // smelt all raw gold first\n    await smeltAllRawGold(bot);\n    // Check if there are enough gold ingots and sticks in the inventory\n    const goldIngotsCount = bot.inventory.count(mcData.itemsByName.gold_ingot.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough gold ingots or sticks, collect the required items.\n    if (goldIngotsCount < 2) {\n      await mineGoldOre(bot);\n      goldIngotsCount += 1;\n    }\n    await smeltAllRawgold(bot);\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an golden sword using the crafting table\n    await craftItem(bot, \"golden_sword\", 1);\n    bot.chat(\"Crafted an golden sword.\");\n  }",
        "description": "Name: craftGoldenSword; Description:This function gathers necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a golden sword.\n"
    },
    "craftIronAxe": {
        "code": "async function craftIronAxe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  while (ironIngotsCount < 3) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron axe using the crafting table\n  await craftItem(bot, \"iron_axe\", 1);\n  bot.chat(\"Crafted an iron axe.\");\n}",
        "description": "Name: craftIronAxe; Description:This function automates the process of crafting an iron axe by first smelting raw iron, then collecting required items if necessary, crafting a crafting table if not already available, placing the table, and finally crafting the iron axe using the table.\n"
    },
    "craftIronBlock": {
        "code": "async function craftIronBlock(bot) {\n    // smelt all raw iron first\n    await smeltAllRawIron(bot);\n    // Check if there are enough iron ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n    while (ironIngotsCount < 9) {\n      await mineIronOre(bot);\n      ironIngotsCount += 1;\n    }\n    await smeltAllRawIron(bot);\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft an iron block using the crafting table\n    await craftItem(bot, \"iron_block\", 1);\n    bot.chat(\"Crafted an iron block.\");\n  }",
        "description": "Name: craftIronBlock; Description:This function automates the process of crafting an iron block by first smelting raw iron, then mining and smelting more iron ore if necessary, crafting a crafting table if not already available, placing the crafting table, and finally crafting the iron block.\n"
    },
    "craftIronBoots": {
        "code": "async function craftIronBoots(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 4) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron boots using the crafting table\n  await craftItem(bot, \"iron_boots\", 1);\n  bot.chat(\"Crafted an iron boots.\");\n}",
        "description": "Name: craftIronBoots; Description:This function automates the process of crafting iron boots by first smelting raw iron, then mining and smelting more iron ore if necessary, crafting a crafting table if not already in inventory, placing the crafting table, and finally crafting the iron boots.\n"
    },
    "craftIronChestplate": {
        "code": "async function craftIronChestplate(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 8) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron chestplate using the crafting table\n  await craftItem(bot, \"iron_chestplate\", 1);\n  bot.chat(\"Crafted an iron chestplate.\");\n}",
        "description": "Name: craftIronChestplate; Description:This function automates the process of crafting an iron chestplate by first smelting raw iron into iron ingots, then crafting a crafting table if necessary, placing it near the bot, and finally using it to craft the iron chestplate.\n"
    },
    "craftIronHelmet": {
        "code": "async function craftIronHelmet(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 5) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron helmet using the crafting table\n  await craftItem(bot, \"iron_helmet\", 1);\n  bot.chat(\"Crafted an iron helmet.\");\n}",
        "description": "Name: craftIronHelmet; Description:This function automates the process of crafting an iron helmet by first smelting raw iron, then mining and smelting more iron ore if necessary, crafting a crafting table if not already available, placing the crafting table, and finally crafting the iron helmet.\n"
    },
    "craftIronHoe": {
        "code": "async function craftIronHoe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  while (ironIngotsCount < 2) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron hoe using the crafting table\n  await craftItem(bot, \"iron_hoe\", 1);\n  bot.chat(\"Crafted an iron hoe.\");\n}",
        "description": "Name: craftIronHoe; Description:This function automates the process of crafting an iron hoe by first smelting raw iron, then collecting necessary items like sticks and iron ingots if they are not available, crafting a crafting table if needed, placing it near the bot, and finally crafting the iron hoe using the table.\n"
    },
    "craftIronLeggings": {
        "code": "async function craftIronLeggings(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  // If not enough iron ingots, mine iron ores and smelt them into iron ingots\n  while (ironIngotsCount < 7) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron leggings using the crafting table\n  await craftItem(bot, \"iron_leggings\", 1);\n  bot.chat(\"Crafted an iron leggings.\");\n}",
        "description": "Name: craftIronLeggings; Description:This function automates the process of crafting iron leggings by first smelting raw iron into ingots, then crafting a crafting table if needed, placing it near the bot, and finally using it to craft the iron leggings.\n"
    },
    "craftIronPickaxe": {
        "code": "async function craftIronPickaxe(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  while (ironIngotsCount < 3) {\n    await mineIronOre(bot);\n    ironIngotsCount += 1;\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron pickaxe using the crafting table\n  await craftItem(bot, \"iron_pickaxe\", 1);\n  bot.chat(\"Crafted an iron pickaxe.\");\n}",
        "description": "Name: craftIronPickaxe; Description:This function automates the process of crafting an iron pickaxe by first smelting raw iron, collecting required items if necessary, crafting a crafting table if not already in inventory, placing the crafting table, and then using it to craft the iron pickaxe.\n"
    },
    "craftIronShovel": {
        "code": "async function craftIronShovel(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n  }\n  if (ironIngotsCount < 1) {\n    await mineIronOre(bot);\n    await smeltAllRawIron(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron shovel using the crafting table\n  await craftItem(bot, \"iron_shovel\", 1);\n  bot.chat(\"Crafted an iron shovel.\");\n}",
        "description": "Name: craftIronShovel; Description:This function automates the process of crafting an iron shovel by first smelting raw iron, then collecting necessary items if they're not in the inventory, crafting a crafting table if needed, placing it near the bot, and finally using it to craft the iron shovel.\n"
    },
    "craftIronSword": {
        "code": "async function craftIronSword(bot) {\n  // smelt all raw iron first\n  await smeltAllRawIron(bot);\n  // Check if there are enough iron ingots and sticks in the inventory\n  let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough iron ingots or sticks, collect the required items.\n  if (sticksCount < 1) {\n    await craftSticks(bot);\n  }\n  for (let i = ironIngotsCount; i < 2; i++) {\n    await mineIronOre(bot);\n  }\n  await smeltAllRawIron(bot);\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft an iron sword using the crafting table\n  await craftItem(bot, \"iron_sword\", 1);\n  bot.chat(\"Crafted an iron sword.\");\n}",
        "description": "Name: craftIronSword; Description:This function automates the process of crafting an iron sword by first smelting raw iron, then collecting necessary items like sticks and iron ingots, crafting a crafting table if needed, placing it near the bot, and finally using it to craft the iron sword.\n"
    },
    "craftLever": {
        "code": "async function craftLever(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    if (cobblestoneCount < 1) {\n      await mineCobblestone(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a lever using the crafting table\n    await craftItem(bot, \"lever\", 1);\n    bot.chat(\"Crafted a lever.\");\n  }",
        "description": "Name: craftLever; Description:This function crafts a lever by checking the inventory for cobblestone, sticks, and a crafting table, collecting the required items if necessary, crafting the table if it's missing, placing the table near the bot, and then crafting the lever using the table.\n"
    },
    "craftMinecart": {
        "code": "async function craftMinecart(bot) {\n    // Check if there are enough iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 5) {\n      await mineFiveIronOres(bot);\n      await smeltAllRawIron(bot);\n    }\n  \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a minecart using the crafting table\n    await craftItem(bot, \"minecart\", 1);\n    bot.chat(\"Crafted a minecart.\");\n  }",
        "description": "Name: craftMinecart; Description:This function ensures the bot has sufficient iron ingots and a crafting table, then places the crafting table and uses it to craft a minecart.\n"
    },
    "craftRails": {
        "code": "async function craftRails(bot) {\n    await smeltAllRawIron(bot);\n    // Check iron ingots and sticks\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough iron ingots, collect the required items.\n    do {\n      ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n      if (ironIngotsCount >= 6)\n       break;\n      await mineFiveIronOres(bot);\n      bot.chat(\"Collected iron ores.\");\n      await smeltAllRawIron(bot);\n      bot.chat(\"Smelted iron ores into iron ingots.\");\n    } while (ironIngotsCount < 6)\n    // If not enough sticks, craft some\n    if (!sticksCount) {\n        craftSticks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft rails using the crafting table\n    await craftItem(bot, \"rail\", 1);\n    bot.chat(\"Crafted rails.\");\n  }",
        "description": "Name: craftRails; Description:This function collects and processes iron ores, crafts sticks if needed, crafts a crafting table if not already in inventory, places the crafting table, and then uses it to craft rails.\n"
    },
    "craftRawGoldBlock": {
        "code": "async function craftGoldBlock(bot) {\n    // Check if there are enough raw gold in the inventory\n    let rawGoldCount = bot.inventory.count(mcData.itemsByName.raw_gold.id);\n    // If not enough raw gold, mine gold ores and smelt them into raw gold\n    while (rawGoldCount < 9) {\n      await mineGoldOre(bot);\n      rawGoldCount = bot.inventory.count(mcData.itemsByName.raw_gold.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a raw gold block using the crafting table\n    await craftItem(bot, \"raw_gold_block\", 1);\n    bot.chat(\"Crafted a raw gold block.\");\n}",
        "description": "Name: craftRawGoldBlock; Description:This function crafts a gold block by first ensuring the bot has enough raw gold, then crafting a crafting table if necessary, placing the table, and finally crafting the gold block using the table.\n"
    },
    "craftSandstoneStairs": {
        "code": "async function craftSandstoneStairs(bot) {\n    // Check if there are enough sandstones in the inventory\n    let sandstoneCount = bot.inventory.count(mcData.itemsByName.sandstone.id);\n    // If not enough sandstones, collect some\n    if (sandstoneCount < 6) {\n      await collectSandstone(bot);\n      sandstoneCount = bot.inventory.count(mcData.itemsByName.sandstone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a sandstone_stairs using the crafting table\n    await craftItem(bot, \"sandstone_stairs\", 1);\n    bot.chat(\"Crafted sandstone stairs.\");\n  }",
        "description": "Name: craftSandstoneStairs; Description:This function crafts sandstone stairs by checking if there are enough sandstones in the inventory, collecting more if necessary, crafting a crafting table if not already available, placing the table near the bot, and then crafting the sandstone stairs using the table.\n"
    },
    "craftScaffolding": {
        "code": "async function craftScaffolding(bot) {\n    // Check if there are enough bamboos and strings in the inventory\n    let bamboosCount = bot.inventory.count(mcData.itemsByName.bamboo.id);\n    let stringsCount = bot.inventory.count(mcData.itemsByName.string.id);\n    if (bamboosCount < 6) {\n      await collectBamboo(bot);\n    }\n    if (stringsCount < 1) {\n        await bot.chat(\"Not enough strings in inventory, try killing some spiders first!\");\n        return;\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a fishing_rod using the crafting table\n    await craftItem(bot, \"scaffolding\", 1);\n    bot.chat(\"Crafted a scaffolding.\");\n  }",
        "description": "Name: craftScaffolding; Description:This function crafts scaffolding by collecting bamboos and strings, crafting a crafting table if necessary, and then crafting the scaffolding itself, placing it at a suitable position.\n"
    },
    "craftShears": {
        "code": "async function craftShears(bot) {\n    // Check iron ingots\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    // If not enough iron ingots, collect the required items.\n    if (ironIngotsCount < 2) {\n      await mineFiveIronOres(bot);\n      bot.chat(\"Collected iron ores.\");\n      await smeltAllRawIron(bot);\n      bot.chat(\"Smelted iron ores into iron ingots.\");\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a pair of shears using the crafting table\n    await craftItem(bot, \"shears\", 1);\n    bot.chat(\"Crafted a pair of shears.\");\n  }",
        "description": "Name: craftShears; Description:This function collects and smelts iron ores if there are not enough iron ingots, crafts a crafting table if it's not in the inventory, places the crafting table near the bot, and then uses it to craft a pair of shears.\n"
    },
    "craftShield": {
        "code": "async function craftShield(bot) {\n    // Check if there are enough planks and iron_ingots in the inventory\n    let ironIngotsCount = bot.inventory.count(mcData.itemsByName.iron_ingot.id);\n    let totalPlanksCount = await getPlanksCount(bot);\n    // If not, craft some\n    while (totalPlanksCount < 6) {\n        await craftWoodenPlanks(bot);\n        totalPlanksCount += 4;\n    }\n    // If not, explore to find and mine iron ores\n    if (ironIngotsCount < 1) {\n      await mineIronOre(bot);\n      await smeltAllRawIron(bot);\n      ironIngotsCount += 1;\n    }\n  \n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n    }\n\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a shield using the crafting table\n    await craftItem(bot, \"shield\", 1);\n    bot.chat(\"Crafted a shield.\");\n  }",
        "description": "Name: craftShield; Description:This function ensures the bot has sufficient planks and iron ingots by crafting or mining them if necessary, then crafts a crafting table if not already in inventory, places it nearby, and finally crafts a shield using the crafting table.\n"
    },
    "craftSpyglass": {
        "code": "async function craftSpyglass(bot) {\n    // smelt all raw copper first\n    await smeltAllRawCopper(bot);\n    // Check if there are enough copper ingots and amethyst_shard in the inventory\n    let copperIngotsCount = bot.inventory.count(mcData.itemsByName.copper_ingot.id);\n    let amethystShardCount = bot.inventory.count(mcData.itemsByName.amethyst_shard.id);\n    // If not enough copper ingots, mine copper ores and smelt them into copper ingots\n    while (copperIngotsCount < 2) {\n      await mineCopperOre(bot);\n      copperIngotsCount += 1;\n    }\n    await smeltAllRawcopper(bot);\n    // If not enough amethyst_shard, mine 1\n    if (amethystShardCount < 1) {\n        await mineAmethystCluster(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a spyglass using the crafting table\n    await craftItem(bot, \"spyglass\", 1);\n    bot.chat(\"Crafted a spyglass.\");\n}",
        "description": "Name: craftSpyglass; Description:This function crafts a spyglass by first smelting all raw copper, then mining and smelting copper ores until it has enough copper ingots, mining an amethyst cluster if necessary, crafting a crafting table if it's not already in the inventory, placing the crafting table near the bot, and finally crafting the spyglass using the crafting table.\n"
    },
    "craftSticks": {
        "code": "async function craftSticks(bot) {\n    const requiredPlanks = 2;\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    let totalPlanksCount = await getPlanksCount(bot);;\n    const logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    // If not enough planks\n    if (totalPlanksCount < requiredPlanks) {\n      await craftWoodenPlanks(bot);\n      bot.chat(\"Planks crafted.\");\n    }\n    await craftItem(bot, \"stick\", 1);\n    bot.chat(\"4 sticks crafted.\");\n  }",
        "description": "Name: craftSticks; Description:This function crafts sticks by first checking if there are enough planks in the inventory, and if not, it mines a log or crafts more planks, then crafts the sticks.\n"
    },
    "craftStoneAxe": {
        "code": "async function craftStoneAxe(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (cobblestoneCount < 3) {\n      await mineCobblestone(bot);\n      cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone axe using the crafting table\n    await craftItem(bot, \"stone_axe\", 1);\n    bot.chat(\"Crafted a stone axe.\");\n  }",
        "description": "Name: craftStoneAxe; Description:This function collects necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a stone axe, ensuring the bot has the required items and tools in its inventory.\n"
    },
    "craftStoneHoe": {
        "code": "async function craftStoneHoe(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (cobblestoneCount < 2) {\n      await mineCobblestone(bot);\n      cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone hoe using the crafting table\n    await craftItem(bot, \"stone_hoe\", 1);\n    bot.chat(\"Crafted a stone hoe.\");\n  }",
        "description": "Name: craftStoneHoe; Description:This function collects necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a stone hoe, ensuring the bot has the required items and tools before crafting.\n"
    },
    "craftStonePickaxe": {
        "code": "async function craftStonePickaxe(bot) {\n  // Check if there are enough cobblestone and sticks in the inventory\n  let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n  const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n  // If not enough cobblestone or sticks, collect the required items\n  if (sticksCount < 2) {\n    await craftSticks(bot);\n    bot.chat(\"Crafted sticks.\");\n  }\n  for (let i = cobblestoneCount; i < 3; i++) {\n    await mineCobblestone(bot);\n  }\n  // check if crafting table is in the inventory\n  const craftingTableCount = bot.inventory.count(\n    mcData.itemsByName.crafting_table.id\n  );\n  // If not, craft a crafting table\n  if (craftingTableCount === 0) {\n    await craftCraftingTable(bot);\n  }\n  // Place the crafting table near the bot\n  const craftingTablePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  // Craft a stone pickaxe using the crafting table\n  await craftItem(bot, \"stone_pickaxe\", 1);\n  bot.chat(\"Crafted a stone pickaxe.\");\n}",
        "description": "Name: craftStonePickaxe; Description:This function crafts a stone pickaxe. It collects necessary materials(cobblestones and sticks), crafts a crafting table if needed, places it, and then uses it to craft a stone pickaxe, ensuring the bot has the required items in its inventory before crafting.\n"
    },
    "craftStoneShovel": {
        "code": "async function craftStoneShovel(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    if (cobblestoneCount < 1) {\n      await mineCobblestone(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone shovel using the crafting table\n    await craftItem(bot, \"stone_shovel\", 1);\n    bot.chat(\"Crafted a stone shovel.\");\n  }",
        "description": "Name: craftStoneShovel; Description:This function collects necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a stone shovel.\n"
    },
    "craftStoneSword": {
        "code": "async function craftStoneSword(bot) {\n    // Check if there are enough cobblestone and sticks in the inventory\n    let cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // If not enough cobblestone or sticks, collect the required items\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n      bot.chat(\"Crafted sticks.\");\n    }\n    while (cobblestoneCount < 2) {\n      await mineCobblestone(bot);\n      cobblestoneCount = bot.inventory.count(mcData.itemsByName.cobblestone.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(\n      mcData.itemsByName.crafting_table.id\n    );\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a stone sword using the crafting table\n    await craftItem(bot, \"stone_sword\", 1);\n    bot.chat(\"Crafted a stone sword.\");\n  }",
        "description": "Name: craftStoneSword; Description:This function collects necessary materials, crafts a crafting table if needed, places it, and then uses it to craft a stone sword, ensuring the bot has the required items and tools in its inventory.\n"
    },
    "craftTorches": {
        "code": "async function craftTorches(bot) {\n    // check coals and sticks\n    let coalsCount = bot.inventory.count(mcData.itemsByName.coal.id);\n    let sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    if (!coalsCount) {\n        mineFiveCoalOres(bot);\n    }\n    if (!sticksCount) {\n        craftSticks(bot);\n    }\n    await craftItem(bot, \"torch\", 1);\n    bot.chat(\"4 torches crafted.\");\n  }",
        "description": "Name: craftTorches; Description:This function ensures the bot has coal and sticks in its inventory, mining coal ores or crafting sticks if necessary, then crafts a single torch.\n"
    },
    "craftWhiteBed": {
        "code": "async function craftWhiteBed(bot) {\n    // Check if there are enough planks and wools in the inventory\n    let planksCount = await getPlanksCount(bot);\n    let woolsCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n    // If not, craft planks from logs\n    if (planksCount < 3) {\n        await craftWoodenPlanks(bot);\n    }\n    while (woolsCount < 3) {\n        await killOneSheep(bot);\n        woolsCount = bot.inventory.count(mcData.itemsByName.white_wool.id);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n    // Craft a bed using the crafting table\n    await craftItem(bot, \"white_bed\", 1);\n    bot.chat(\"Crafted a white bed.\");\n  }",
        "description": "Name: craftWhiteBed; Description:This function ensures the bot has sufficient planks and wool, crafts them if necessary, obtains a crafting table, places it nearby, and then uses it to craft a bed.\n"
    },
    "craftWoodenAxe": {
        "code": "async function craftWoodenAxe(bot) {\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    let totalPlanksCount = await getPlanksCount(bot);\n    if (totalPlanksCount < 3) {\n      await craftWoodenPlanks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden axe using the crafting table\n    await craftItem(bot, \"wooden_axe\", 1);\n    bot.chat(\"Crafted a wooden axe.\");\n  }",
        "description": "Name: craftWoodenAxe; Description:This function ensures the bot has sufficient sticks and planks in its inventory, crafts them if needed, and then crafts a crafting table if it's not already available, placing it in a suitable position before using it to craft a wooden axe.\n"
    },
    "craftWoodenHoe": {
        "code": "async function craftWoodenHoe(bot) {\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    let totalPlanksCount = await getPlanksCount(bot);\n    if (totalPlanksCount < 2) {\n      await craftWoodenPlanks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden hoe using the crafting table\n    await craftItem(bot, \"wooden_hoe\", 1);\n    bot.chat(\"Crafted a wooden hoe.\");\n  }",
        "description": "Name: craftWoodenHoe; Description:This function ensures the bot has sufficient sticks and planks, crafts them if necessary, then crafts a crafting table if it doesn't have one, places the table near the bot, and finally crafts a wooden hoe using the table.\n"
    },
    "craftWoodenPickaxe": {
        "code": "async function craftWoodenPickaxe(bot) {\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    let totalPlanksCount = await getPlanksCount(bot);\n    if (totalPlanksCount < 3) {\n      await craftWoodenPlanks(bot);\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden pickaxe using the crafting table\n    await craftItem(bot, \"wooden_pickaxe\", 1);\n    bot.chat(\"Crafted a wooden pickaxe.\");\n  }",
        "description": "Name: craftWoodenPickaxe; Description:This function ensures the bot has sufficient sticks and planks in its inventory, crafts them if needed, and then crafts a crafting table if not already available, placing it nearby and finally using it to craft a wooden pickaxe.\n"
    },
    "craftWoodenPlanks": {
        "code": "async function craftWoodenPlanks(bot) {\n    const logNames = [\"oak_log\", \"birch_log\", \"spruce_log\", \"jungle_log\", \"acacia_log\", \"dark_oak_log\", \"mangrove_log\"];\n    const plankNames = [\"oak_planks\", \"birch_planks\", \"spruce_planks\", \"jungle_planks\", \"acacia_planks\", \"dark_oak_planks\", \"mangrove_planks\"];\n    let logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    if (!logInInventory) {\n      bot.chat(\"No wooden log in inventory. Mining a wooden log...\");\n      await mineWoodLog(bot);\n    }\n    logInInventory = logNames.find(logName => bot.inventory.count(mcData.itemsByName[logName].id) > 0);\n    const logIndex = logNames.indexOf(logInInventory);\n    const plankName = plankNames[logIndex];\n    bot.chat(`Crafting 4 ${plankName}...`);\n    await craftItem(bot, plankName, 1);\n    bot.chat(`4 ${plankName} crafted.`);\n  }",
        "description": "Name: craftWoodenPlanks; Description:This function checks if the bot has any wooden logs in its inventory, and if not, it mines one; then it crafts four wooden planks from the available log and updates the inventory accordingly.\n"
    },
    "craftWoodenShovel": {
        "code": "async function craftWoodenShovel(bot) {\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (sticksCount < 2) {\n      await craftSticks(bot);\n    }\n    let totalPlanksCount = await getPlanksCount(bot);\n    if (totalPlanksCount < 1) {\n      await craftWoodenPlanks(bot);\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden shovel using the crafting table\n    await craftItem(bot, \"wooden_shovel\", 1);\n    bot.chat(\"Crafted a wooden shovel.\");\n  }",
        "description": "Name: craftWoodenShovel; Description:This function ensures the bot has sufficient sticks and planks in its inventory, crafts them if needed, and then crafts a crafting table if not already available, before using the crafting table to craft a wooden shovel.\n"
    },
    "craftWoodenSword": {
        "code": "async function craftWoodenSword(bot) {\n    const sticksCount = bot.inventory.count(mcData.itemsByName.stick.id);\n    // Check if there are enough planks and sticks in the inventory\n    if (sticksCount < 1) {\n      await craftSticks(bot);\n    }\n    let totalPlanksCount = await getPlanksCount(bot);\n    if (totalPlanksCount < 2) {\n      await craftWoodenPlanks(bot);\n    }\n\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a wooden sword using the crafting table\n    await craftItem(bot, \"wooden_sword\", 1);\n    bot.chat(\"Crafted a wooden sword.\");\n  }",
        "description": "Name: craftWoodenSword; Description:This function ensures the bot has sufficient sticks and planks in its inventory, crafts them if needed, and then crafts a crafting table if not already available, placing it nearby and finally using it to craft a wooden sword.\n"
    },
    "equipAxeOrCraftOne": {
        "code": "async function equipAxeOrCraftOne(bot) {\n    // Find the best axe in the bot's inventory\n    let diamondAxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_axe.id);\n    let ironAxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_axe.id);\n    let stoneAxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_axe.id);\n    let woodenAxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_axe.id);\n    // Equip the best axe\n    if (diamondAxe) {\n        await bot.equip(diamondAxe, \"hand\");\n    } else if (ironAxe) {\n        await bot.equip(ironAxe, \"hand\");\n    } else if (stoneAxe) {\n        await bot.equip(stoneAxe, \"hand\");\n    } else if (woodenAxe) {\n        await bot.equip(woodenAxe, \"hand\");\n    } else {\n        await craftWoodenAxe(bot);\n        woodenAxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_axe.id);\n        await bot.equip(woodenAxe, \"hand\");\n    }\n    // bot.chat(\"axe equipped.\");\n  }",
        "description": "Name: equipAxeOrCraftOne; Description:This function searches for the best available axe in the inventory, prioritizing diamond, iron, stone, and wooden axes, equips the found axe, and if none are available, crafts a wooden axe and equips it.\n"
    },
    "equipHoeOrCraftOne": {
        "code": "async function equipHoeOrCraftOne(bot) {\n    // Find the best hoe in the bot's inventory\n    let diamondHoe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_hoe.id);\n    let ironHoe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_hoe.id);\n    let stoneHoe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_hoe.id);\n    let woodenHoe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_hoe.id);\n    // Equip the best hoe\n    if (diamondHoe) {\n        await bot.equip(diamondHoe, \"hand\");\n    } else if (ironHoe) {\n        await bot.equip(ironHoe, \"hand\");\n    } else if (stoneHoe) {\n        await bot.equip(stoneHoe, \"hand\");\n    } else if (woodenHoe) {\n        await bot.equip(woodenHoe, \"hand\");\n    } else {\n        await craftWoodenHoe(bot);\n        woodenHoe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_hoe.id);\n        await bot.equip(woodenHoe, \"hand\");\n    }\n    // bot.chat(\"hoe equipped.\");\n  }",
        "description": "Name: equipHoeOrCraftOne; Description:This function searches for the best available hoe in the inventory, prioritizing diamond, iron, stone, and wooden hoes, and equips it; if no hoe is found, it crafts a wooden hoe and equips it.\n"
    },
    "equipIronArmor": {
        "code": "async function equipIronArmor(bot) {\n  // Find the iron_chestplate, iron_leggings, iron_boots, and iron_helmet in the inventory\n  const ironChestplate = bot.inventory.findInventoryItem(mcData.itemsByName.iron_chestplate.id);\n  const ironLeggings = bot.inventory.findInventoryItem(mcData.itemsByName.iron_leggings.id);\n  const ironBoots = bot.inventory.findInventoryItem(mcData.itemsByName.iron_boots.id);\n  const ironHelmet = bot.inventory.findInventoryItem(mcData.itemsByName.iron_helmet.id);\n\n  // Equip the iron_chestplate, iron_leggings, iron_boots, and iron_helmet in the appropriate slots (legs, feet, and head)\n  if (ironChestplate) {\n    await bot.equip(ironChestplate, \"torso\");\n    bot.chat(\"Equipped iron chestplate.\");\n  } else {\n    bot.chat(\"Iron chestplate not found in inventory.\");\n  }\n  if (ironLeggings) {\n    await bot.equip(ironLeggings, \"legs\");\n    bot.chat(\"Equipped iron leggings.\");\n  } else {\n    bot.chat(\"Iron leggings not found in inventory.\");\n  }\n  if (ironBoots) {\n    await bot.equip(ironBoots, \"feet\");\n    bot.chat(\"Equipped iron boots.\");\n  } else {\n    bot.chat(\"Iron boots not found in inventory.\");\n  }\n  if (ironHelmet) {\n    await bot.equip(ironHelmet, \"head\");\n    bot.chat(\"Equipped iron helmet.\");\n  } else {\n    bot.chat(\"Iron helmet not found in inventory.\");\n  }\n}",
        "description": "Name: equipIronArmor; Description:This function searches for iron armor items in the inventory and equips them in their corresponding slots if found.\n"
    },
    "equipPickaxeOrCraftOne": {
        "code": "async function equipPickaxeOrCraftOne(bot) {\n    // Find the best pickaxe in the bot's inventory\n    let diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    let woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n    // Equip the best pickaxe\n    if (diamondPickaxe) {\n        await bot.equip(diamondPickaxe, \"hand\");\n    } else if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else if (woodenPickaxe) {\n        await bot.equip(woodenPickaxe, \"hand\");\n    } else {\n        await craftWoodenPickaxe(bot);\n        woodenPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_pickaxe.id);\n        await bot.equip(woodenPickaxe, \"hand\");\n    }\n    // bot.chat(\"pickaxe equipped.\");\n  }",
        "description": "Name: equipPickaxeOrCraftOne; Description:This function searches for the best available pickaxe in the inventory, equips it if found, and if not, crafts a wooden pickaxe and equips it instead.\n"
    },
    "equipShield": {
        "code": "async function equipShield(bot) {\n    // Find the shield in the bot's inventory\n    const shield = bot.inventory.findInventoryItem(mcData.itemsByName[\"shield\"].id);\n    if (!shield)\n      bot.chat(\"No shield in inventory.\");\n    // Equip the shield in the off-hand slot\n    await bot.equip(shield, \"off-hand\");\n    bot.chat(\"Shield equipped.\");\n  }",
        "description": "Name: equipShield; Description:This function searches for a shield in the bot's inventory, and if found, equips it in the off-hand slot, otherwise it doesn't perform any action.\n"
    },
    "equipShovelOrCraftOne": {
        "code": "async function equipShovelOrCraftOne(bot) {\n    // Find the best shovel in the bot's inventory\n    let diamondShovel = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_shovel.id);\n    let ironShovel = bot.inventory.findInventoryItem(mcData.itemsByName.iron_shovel.id);\n    let stoneShovel = bot.inventory.findInventoryItem(mcData.itemsByName.stone_shovel.id);\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    // Equip the best shovel\n    if (diamondShovel) {\n        await bot.equip(diamondShovel, \"hand\");\n    } else if (ironShovel) {\n        await bot.equip(ironShovel, \"hand\");\n    } else if (stoneShovel) {\n        await bot.equip(stoneShovel, \"hand\");\n    } else if (woodenShovel) {\n        await bot.equip(woodenShovel, \"hand\");\n    } else {\n        await craftWoodenShovel(bot);\n        woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n        await bot.equip(woodenShovel, \"hand\");\n    }\n    // bot.chat(\"shovel equipped.\");\n  }",
        "description": "Name: equipShovelOrCraftOne; Description:This function searches for the best available shovel in the inventory, equips it, and if none are found, crafts a wooden shovel and equips it.\n"
    },
    "equipSwordOrCraftOne": {
        "code": "async function equipSwordOrCraftOne(bot) {\n    // Find the best sword in the bot's inventory\n    let diamondSword = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_sword.id);\n    let ironSword = bot.inventory.findInventoryItem(mcData.itemsByName.iron_sword.id);\n    let stoneSword = bot.inventory.findInventoryItem(mcData.itemsByName.stone_sword.id);\n    let woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n    // Equip the best sword\n    if (diamondSword) {\n        await bot.equip(diamondSword, \"hand\");\n    } else if (ironSword) {\n        await bot.equip(ironSword, \"hand\");\n    } else if (stoneSword) {\n        await bot.equip(stoneSword, \"hand\");\n    } else if (woodenSword) {\n        await bot.equip(woodenSword, \"hand\");\n    } else {\n        await craftWoodenSword(bot);\n        woodenSword = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_sword.id);\n        await bot.equip(woodenSword, \"hand\");\n    }\n    bot.chat(\"Sword equipped.\");\n  }",
        "description": "Name: equipSwordOrCraftOne; Description:This function searches for the best available sword in the inventory, prioritizing diamond, iron, stone, and wooden swords, equips the found sword, and if none are available, crafts a wooden sword and equips it.\n"
    },
    "hoeFarmland": {
        "code": "async function hoeFarmland(bot) {\n    await equipHoeOrCraftOne(bot);\n    // find water\n    const water = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const water = bot.findBlocks({\n            matching: block => block.name === \"water\",\n            maxDistance: 2,\n            count: 1\n        });\n        return water.length >= 1 ? water : null;\n    });\n    if (!water) {\n        bot.chat(\"No water nearby.\");\n        return;\n    }\n    // find dirt or grass_block near water\n    const dirtNearWater = bot.findBlocks({\n        matching: block => (block.name === \"dirt\" ||  block.name === \"grass_block\"),\n        maxDistance: 8,\n        count: 60\n    });\n    // hoe a farmland\n    for (pos of dirtNearWater) {   \n        const farmland = await bot.blockAt(pos);\n        // if there's air above this block and water near this block\n        if (await checkBlockAbove(bot, \"air\", pos) && await checkBlocksAround(bot, \"water\", pos)) {\n            await bot.lookAt(pos);\n            await bot.activateBlock(farmland);\n            bot.chat(`hoed block at ${pos}`);\n        }\n    }\n}",
        "description": "Name: hoeFarmland; Description:This function equips a hoe, finds a nearby water source, locates dirt or grass blocks near the water, and then converts them into farmland by activating the hoe on those blocks if there is air above and water nearby.\n"
    },
    "killOneBat": {
        "code": "async function killOneBat(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest bat\n    const bat = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const bat = bot.nearestEntity(entity => {\n        return entity.name === \"bat\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return bat;\n    });\n    if (!bat) {\n      bot.chat(\"Could not find a bat.\");\n      return;\n    }\n  \n    // Kill the bat using the sword\n    await killMob(bot, \"bat\", 300);\n    bot.chat(\"Killed a bat.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(bat.position.x, bat.position.y, bat.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneBat; Description:This function equips a sword, finds the nearest bat within a 32-block radius, kills it, and then collects the dropped items by navigating to the bat's former position.\n"
    },
    "killOneCamel": {
        "code": "async function killOneCamel(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest camel\n    const camel = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const camel = bot.nearestEntity(entity => {\n        return entity.name === \"camel\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return camel;\n    });\n    if (!camel) {\n      bot.chat(\"Could not find a camel.\");\n      return;\n    }\n  \n    // Kill the camel using the sword\n    await killMob(bot, \"camel\", 300);\n    bot.chat(\"Killed a camel.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(camel.position.x, camel.position.y, camel.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCamel; Description:This function equips a sword, finds the nearest camel within a 32-block radius, kills it, and then collects the dropped items by navigating to the camel's former position.\n"
    },
    "killOneChicken": {
        "code": "async function killOneChicken(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest chicken\n    const chicken = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const chicken = bot.nearestEntity(entity => {\n        return entity.name === \"chicken\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return chicken;\n    });\n    if (!chicken) {\n      bot.chat(\"Could not find a chicken.\");\n      return;\n    }\n  \n    // Kill the chicken using the sword\n    await killMob(bot, \"chicken\", 300);\n    bot.chat(\"Killed a chicken.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(chicken.position.x, chicken.position.y, chicken.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneChicken; Description:Equips a sword, finds and kills the nearest chicken within a 32-block radius, and then collects the dropped items by moving to the chicken's previous position.\n"
    },
    "killOneCow": {
        "code": "async function killOneCow(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest cow\n    const cow = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cow = bot.nearestEntity(entity => {\n        return entity.name === \"cow\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return cow;\n    });\n    if (!cow) {\n      bot.chat(\"Could not find a cow.\");\n      return;\n    }\n  \n    // Kill the cow using the sword\n    await killMob(bot, \"cow\", 300);\n    bot.chat(\"Killed a cow.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(cow.position.x, cow.position.y, cow.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCow; Description:This function equips a sword, finds the nearest cow within a 32-block radius, kills it, and then collects the dropped items by navigating to the cow's former position.\n"
    },
    "killOneCreeper": {
        "code": "async function killOneCreeper(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest creeper\n    const creeper = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const creeper = bot.nearestEntity(entity => {\n        return entity.name === \"creeper\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return creeper;\n    });\n    if (!creeper) {\n      bot.chat(\"Could not find a creeper.\");\n      return;\n    }\n  \n    // Kill the creeper using the sword\n    await killMob(bot, \"creeper\", 300);\n    bot.chat(\"Killed a creeper.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(creeper.position.x, creeper.position.y, creeper.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneCreeper; Description:Equips a sword, finds and kills the nearest creeper within a 32-block radius, and then collects the dropped items by navigating to the creeper's previous position.\n"
    },
    "killOneDonkey": {
        "code": "async function killOneDonkey(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest Donkey\n    const Donkey = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const Donkey = bot.nearestEntity(entity => {\n        return entity.name === \"Donkey\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return Donkey;\n    });\n    if (!Donkey) {\n      bot.chat(\"Could not find a Donkey.\");\n      return;\n    }\n  \n    // Kill the Donkey using the sword\n    await killMob(bot, \"Donkey\", 300);\n    bot.chat(\"Killed a Donkey.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(Donkey.position.x, Donkey.position.y, Donkey.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneDonkey; Description:This function equips a sword, finds the nearest Donkey within a 32-block radius, kills it, and then collects the dropped items by navigating to the Donkey's position.\n"
    },
    "killOneEnderman": {
        "code": "async function killOneEnderman(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest enderman\n    const enderman = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const enderman = bot.nearestEntity(entity => {\n        return entity.name === \"enderman\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return enderman;\n    });\n    if (!enderman) {\n      bot.chat(\"Could not find a enderman.\");\n      return;\n    }\n  \n    // Kill the enderman using the sword\n    await killMob(bot, \"enderman\", 300);\n    bot.chat(\"Killed a enderman.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(enderman.position.x, enderman.position.y, enderman.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneEnderman; Description:This function equips a sword, finds the nearest enderman within a 32-block radius, kills it, and then collects any dropped items by navigating to the enderman's former position.\n"
    },
    "killOneHorse": {
        "code": "async function killOneHorse(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest horse\n    const horse = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const horse = bot.nearestEntity(entity => {\n        return entity.name === \"horse\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return horse;\n    });\n    if (!horse) {\n      bot.chat(\"Could not find a horse.\");\n      return;\n    }\n  \n    // Kill the horse using the sword\n    await killMob(bot, \"horse\", 300);\n    bot.chat(\"Killed a horse.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(horse.position.x, horse.position.y, horse.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneHorse; Description:This function equips a sword, finds the nearest horse within a 32-block radius, kills it, and then collects the dropped items by navigating to the horse's former position.\n"
    },
    "killOneMule": {
        "code": "async function killOneMule(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest ule\n    const ule = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const ule = bot.nearestEntity(entity => {\n        return entity.name === \"ule\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return ule;\n    });\n    if (!ule) {\n      bot.chat(\"Could not find a ule.\");\n      return;\n    }\n  \n    // Kill the ule using the sword\n    await killMob(bot, \"ule\", 300);\n    bot.chat(\"Killed a ule.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(ule.position.x, ule.position.y, ule.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneMule; Description:Equips a sword, finds and kills a nearby ule entity within a 32-block radius, and then collects the dropped items by navigating to the ule's former position.\n"
    },
    "killOnePig": {
        "code": "async function killOnePig(bot) {\n  // Equip the sword\n  await equipSword(bot);\n  // Find the nearest pig\n  const pig = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const pig = bot.nearestEntity(entity => {\n      return entity.name === \"pig\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return pig;\n  });\n  if (!pig) {\n    bot.chat(\"Could not find a pig.\");\n    return;\n  }\n\n  // Kill the pig using the sword\n  await killMob(bot, \"pig\", 300);\n  bot.chat(\"Killed a pig.\");\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(pig.position.x, pig.position.y, pig.position.z));\n  bot.chat(\"Collected dropped items.\");\n}",
        "description": "Name: killOnePig; Description:This function equips a sword, finds the nearest pig within a 32-block radius, kills it, and then collects the dropped items by navigating to the pig's former position.\n"
    },
    "killOnePlayer": {
        "code": "async function killOnePlayer(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest player\n    const player = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const player = bot.nearestEntity(entity => {\n        return entity.name === \"player\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return player;\n    });\n    if (!player) {\n      bot.chat(\"Could not find a player.\");\n      return;\n    }\n  \n    // Kill the player using the sword\n    await killMob(bot, \"player\", 300);\n    bot.chat(\"Killed a player.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(player.position.x, player.position.y, player.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOnePlayer; Description:This function equips a sword, finds the nearest player within a 32-block radius, kills the player, and then collects any dropped items by navigating to the player's former position.\n"
    },
    "killOneRabbit": {
        "code": "async function killOneRabbit(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest rabbit\n    const rabbit = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const rabbit = bot.nearestEntity(entity => {\n        return entity.name === \"rabbit\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return rabbit;\n    });\n    if (!rabbit) {\n      bot.chat(\"Could not find a rabbit.\");\n      return;\n    }\n  \n    // Kill the rabbit using the sword\n    await killMob(bot, \"rabbit\", 300);\n    bot.chat(\"Killed a rabbit.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(rabbit.position.x, rabbit.position.y, rabbit.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneRabbit; Description:This function equips a sword, finds the nearest rabbit within a 32-block radius, kills it, and then collects the dropped items by navigating to the rabbit's former position.\n"
    },
    "killOneSheep": {
        "code": "async function killOneSheep(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest sheep\n    const sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const sheep = bot.nearestEntity(entity => {\n        return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return sheep;\n    });\n    if (!sheep) {\n      bot.chat(\"Could not find a sheep.\");\n      return;\n    }\n  \n    // Kill the sheep using the sword\n    await killMob(bot, \"sheep\", 300);\n    bot.chat(\"Killed a sheep.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSheep; Description:This function equips a sword, finds the nearest sheep within a 32-block radius, kills it, and then collects the dropped items by navigating to the sheep's position.\n"
    },
    "killOneSkeleton": {
        "code": "async function killOneSkeleton(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest skeleton\n    const skeleton = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const skeleton = bot.nearestEntity(entity => {\n        return entity.name === \"skeleton\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return skeleton;\n    });\n    if (!skeleton) {\n      bot.chat(\"Could not find a skeleton.\");\n      return;\n    }\n  \n    // Kill the skeleton using the sword\n    await killMob(bot, \"skeleton\", 300);\n    bot.chat(\"Killed a skeleton.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(skeleton.position.x, skeleton.position.y, skeleton.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSkeleton; Description:Equips a sword, finds and kills the nearest skeleton within a 32-block radius, and then collects the dropped items by moving to the skeleton's previous position.\n"
    },
    "killOneSpider": {
        "code": "async function killOneSpider(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest spider\n    const spider = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const spider = bot.nearestEntity(entity => {\n        return entity.name === \"spider\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return spider;\n    });\n    if (!spider) {\n      bot.chat(\"Could not find a spider.\");\n      return;\n    }\n  \n    // Kill the spider using the sword\n    await killMob(bot, \"spider\", 300);\n    bot.chat(\"Killed a spider.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(spider.position.x, spider.position.y, spider.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneSpider; Description:This function equips a sword, finds the nearest spider within a 32-block radius, kills it, and then collects the dropped items by navigating to the spider's former position.\n"
    },
    "killOneTurtle": {
        "code": "async function killOneTurtle(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest turtle\n    const turtle = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const turtle = bot.nearestEntity(entity => {\n        return entity.name === \"turtle\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return turtle;\n    });\n    if (!turtle) {\n      bot.chat(\"Could not find a turtle.\");\n      return;\n    }\n  \n    // Kill the turtle using the sword\n    await killMob(bot, \"turtle\", 300);\n    bot.chat(\"Killed a turtle.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(turtle.position.x, turtle.position.y, turtle.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneTurtle; Description:This function equips a sword, finds the nearest turtle within a 32-block radius, kills it, and then collects the dropped items by navigating to the turtle's former position.\n"
    },
    "killOneZombie": {
        "code": "async function killOneZombie(bot) {\n    // Equip the sword\n    await equipSword(bot);\n    // Find the nearest zombie\n    const zombie = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const zombie = bot.nearestEntity(entity => {\n        return entity.name === \"zombie\" && entity.position.distanceTo(bot.entity.position) < 32;\n      });\n      return zombie;\n    });\n    if (!zombie) {\n      bot.chat(\"Could not find a zombie.\");\n      return;\n    }\n  \n    // Kill the zombie using the sword\n    await killMob(bot, \"zombie\", 300);\n    bot.chat(\"Killed a zombie.\");\n  \n    // Collect the dropped items\n    await bot.pathfinder.goto(new GoalBlock(zombie.position.x, zombie.position.y, zombie.position.z));\n    bot.chat(\"Collected dropped items.\");\n  }",
        "description": "Name: killOneZombie; Description:This function equips a sword, finds the nearest zombie within a 32-block radius, kills it, and then collects any dropped items.\n"
    },
    "makeBread": {
        "code": "async function makeBread(bot) {\n    let wheatCount = bot.inventory.count(mcData.itemsByName.wheat.id);\n    if (wheatCount < 3) {\n        bot.chat(\"Not enough wheat in inventory! plant and collect wheat first!\");\n        return;\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft a bread using the crafting table\n    await craftItem(bot, \"bread\", 1);\n    bot.chat(\"Crafted a bread.\");\n}",
        "description": "Name: makeBread; Description:This function checks if the bot has enough wheat and a crafting table in its inventory, crafts a crafting table if needed, places it near the bot, and then uses it to craft a single bread item.\n"
    },
    "makeCookies": {
        "code": "async function makeCookies(bot) {\n    let wheatCount = bot.inventory.count(mcData.itemsByName.wheat.id);\n    let cocoaPodsCount = bot.inventory.count(mcData.itemsByName.cocoa_beans.id);\n    if (wheatCount < 2) {\n        bot.chat(\"Not enough wheat in inventory! plant and collect wheat first!\");\n        return;\n    }\n    if (!cocoaPodsCount) {\n        bot.chat(\"Not enough cocoa beans in inventory! collect some first!\");\n        return;\n    }\n    // check if crafting table is in the inventory\n    const craftingTableCount = bot.inventory.count(mcData.itemsByName.crafting_table.id);\n    // If not, craft a crafting table\n    if (craftingTableCount === 0) {\n      await craftCraftingTable(bot);\n    }\n    // Place the crafting table near the bot\n    const craftingTablePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"crafting_table\", craftingTablePosition);\n  \n    // Craft cookies using the crafting table\n    await craftItem(bot, \"cookie\", 1);\n    bot.chat(\"Crafted cookies.\");\n}",
        "description": "Name: makeCookies; Description:This function checks the inventory for wheat and cocoa beans, and if sufficient quantities are present, crafts a crafting table if needed, places it near the bot, and then uses it to craft a cookie.\n"
    },
    "makeSugar": {
        "code": "async function makeSugar(bot) {\n    let sugarCaneCount = bot.inventory.count(mcData.itemsByName.sugar_cane.id);\n    if (!sugarCaneCount) {\n        bot.chat(\"Not enough sugar cane in inventory! collect some first!\");\n        return;\n    }\n    // Craft sugar\n    await craftItem(bot, \"sugar\", 1);\n    bot.chat(\"Crafted sugar.\");\n}",
        "description": "Name: makeSugar; Description:This function checks if the bot has sugar cane in its inventory, and if so, crafts one sugar item, otherwise it terminates early.\n"
    },
    "mineAmethystCluster": {
        "code": "async function mineAmethystCluster(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else {\n        await craftStonePickaxe(bot);\n        stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n    }\n    \n    await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const foundAmethystCluster = bot.findBlock({\n        matching: mcData.blocksByName.amethyst_cluster_ore.id,\n        maxDistance: 32\n      });\n      return foundAmethystCluster;\n    });\n    await mineBlock(bot, \"amethyst_cluster\", 1);\n    bot.chat(\"1 amethyst_cluster mined.\");\n  }",
        "description": "Name: mineAmethystCluster; Description:Equips an iron pickaxe if available, otherwise equips a stone pickaxe or crafts one if neither is available, then explores until an amethyst cluster ore is found within a 32-block radius and mines it.\n"
    },
    "mineCoalOre": {
        "code": "async function mineCoalOre(bot) {\n  await equipPickaxe(bot);\n  // Find coal_ore block\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: block => block.name === \"coal_ore\",\n      maxDistance: 32,\n      count: 1\n    });\n    return coalOres.length >= 1 ? coalOres : null;\n  });\n  if (!coalOres) {\n    bot.chat(\"Could not find coal ore.\");\n    return;\n  }\n  // Mine the coal_ore block\n  await mineBlock(bot, \"coal_ore\", 1);\n  bot.chat(\"1 coal ore mined.\");\n}",
        "description": "Name: mineCoalOre; Description:This function equips a pickaxe, searches for a coal ore block within a 32-block radius, and if found, mines it.\n"
    },
    "mineCobblestone": {
        "code": "async function mineCobblestone(bot) {\n    await equipPickaxeOrCraftOne(bot);\n    // Use the exploreUntil function to find cobblestone block\n    const cobblestoneBlocks = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const cobblestoneBlocks = bot.findBlocks({\n        matching: block => block.name === \"stone\",\n        maxDistance: 32,\n        count: 1\n      });\n      return cobblestoneBlocks.length >= 1 ? cobblestoneBlocks : null;\n    });\n    if (!cobblestoneBlocks) {\n      bot.chat(\"Could not find stone.\");\n      return;\n    }\n    // Mine 1 cobblestone block using the mineBlock function\n    await mineBlock(bot, \"stone\", 1);\n    bot.chat(`1 cobblestone mined.`);\n  }",
        "description": "Name: mineCobblestone; Description:This function equips a pickaxe, searches for a cobblestone block within a 32-block radius, and if found, mines one block of cobblestone.\n"
    },
    "mineCopperOre": {
        "code": "async function mineCopperOre(bot) {\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      // Equip the stone pickaxe\n      const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      if (!stonePickaxe) {\n        await craftStonePickaxe(bot);\n        const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe1, \"hand\");\n      }\n      await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 copper_ore block\n    const copperOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const copperOres = bot.findBlocks({\n        matching: block => block.name === \"copper_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return copperOres.length >= 1 ? copperOres : null;\n    });\n    if (!copperOres) {\n      bot.chat(\"Could not find enough copper ores.\");\n      return;\n    }\n  \n    // Mine the 1 copper_ore block\n    await mineBlock(bot, \"copper_ore\", 1);\n    bot.chat(\"1 copper ore mined.\");\n  }",
        "description": "Name: mineCopperOre; Description:Equips an iron pickaxe if available, otherwise crafts and equips a stone pickaxe, then explores the surroundings to find a copper ore block, and finally mines the found block.\n"
    },
    "mineDiamond": {
        "code": "async function mineDiamond(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (!ironPickaxe) {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    }\n    await bot.equip(ironPickaxe, \"hand\");\n    const oreNames = [\"diamond_ore\", \"deepslate_diamond_ore\"];\n    let y = bot.entity.position.y;\n    let direction;\n    if (y > 16) {\n      direction = new Vec3(0, -1, 0);\n    } else {\n      direction = new Vec3(1, 0, 0);\n    }\n    const oreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => oreNames.includes(block.name),\n        maxDistance: 32\n      });\n    });\n    // bot.chat(`${oreBlock}`);\n    if (!oreBlock) {\n      bot.chat(\"Could not find a diamond ore.\");\n      return;\n    }\n    await mineBlock(bot, oreBlock.name, 1);\n    bot.chat(\"1 diamond mined.\");\n  }",
        "description": "Name: mineDiamond; Description:This function equips an iron pickaxe, then moves in a specific direction until it finds a diamond ore or deepslate diamond ore within a certain distance, and finally mines the block.\n"
    },
    "mineEmerald": {
        "code": "async function mineEmerald(bot) {\n    let diamondPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.diamond_pickaxe.id);\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (diamondPickaxe) {\n        await bot.equip(diamondPickaxe, \"hand\");\n    } else if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    const oreNames = [\"emerald_ore\", \"deepslate_emerald_ore\"];\n    let y = bot.entity.position.y;\n    let direction;\n    if (y > 16) {\n      direction = new Vec3(0, -1, 0);\n    } else {\n      direction = new Vec3(1, 0, 0);\n    }\n    const oreBlock = await exploreUntil(bot, direction, 60, () => {\n      return bot.findBlock({\n        matching: block => oreNames.includes(block.name),\n        maxDistance: 32\n      });\n    });\n    // bot.chat(`${oreBlock}`);\n    if (!oreBlock) {\n      bot.chat(\"Could not find a emerald ore.\");\n      return;\n    }\n    await mineBlock(bot, oreBlock.name, 1);\n    bot.chat(\"1 emerald mined.\");\n  }",
        "description": "Name: mineEmerald; Description:This function equips the bot with a diamond or iron pickaxe if available, crafts an iron pickaxe if not, then explores in a specific direction to find an emerald ore block within a certain distance, and finally mines the block.\n"
    },
    "mineFiveCoalOres": {
        "code": "async function mineFiveCoalOres(bot) {\n  await equipPickaxe(bot);\n  // Find 5 coal_ore blocks\n  const coalOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const coalOres = bot.findBlocks({\n      matching: block => block.name === \"coal_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return coalOres.length >= 5 ? coalOres : null;\n  });\n  if (!coalOres) {\n    bot.chat(\"Could not find enough coal ores.\");\n    return;\n  }\n\n  // Mine the 5 coal_ore blocks\n  await mineBlock(bot, \"coal_ore\", 5);\n  bot.chat(\"5 coal ores mined.\");\n}",
        "description": "Name: mineFiveCoalOres; Description:This function equips a pickaxe, searches for and finds five coal ore blocks within a 32-block radius, and then mines those blocks.\n"
    },
    "mineFiveIronOres": {
        "code": "async function mineFiveIronOres(bot) {\n  const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n  if (ironPickaxe) {\n    await bot.equip(ironPickaxe, \"hand\");\n  } else {\n    // Equip the stone pickaxe\n    const stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (!stonePickaxe) {\n      await craftStonePickaxe(bot);\n      const stonePickaxe1 = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      await bot.equip(stonePickaxe1, \"hand\");\n    }\n    await bot.equip(stonePickaxe, \"hand\");\n  }\n\n  // Find 5 iron_ore blocks\n  const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    const ironOres = bot.findBlocks({\n      matching: block => block.name === \"iron_ore\",\n      maxDistance: 32,\n      count: 5\n    });\n    return ironOres.length >= 5 ? ironOres : null;\n  });\n  if (!ironOres) {\n    bot.chat(\"Could not find enough iron ores.\");\n    return;\n  }\n\n  // Mine the 5 iron_ore blocks\n  await mineBlock(bot, \"iron_ore\", 5);\n  bot.chat(\"5 iron ores mined.\");\n}",
        "description": "Name: mineFiveIronOres; Description:Equips an iron pickaxe if available, otherwise equips a stone pickaxe after crafting it if necessary, then searches for and mines five iron ore blocks within a 32-block radius.\n"
    },
    "mineFlint": {
        "code": "async function mineFlint(bot) {\n    let ironShovel = bot.inventory.findInventoryItem(mcData.itemsByName.iron_shovel.id);\n    let stoneShovel = bot.inventory.findInventoryItem(mcData.itemsByName.stone_shovel.id);\n    let woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n    const flintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    let newFlintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    if (ironShovel) {\n        await bot.equip(ironShovel, \"hand\");\n    } else if (stoneShovel) {\n        await bot.equip(stoneShovel, \"hand\");\n    } else if (woodenShovel) {\n        await bot.equip(woodenShovel, \"hand\");\n    } else {\n        await craftWoodenShovel(bot);\n        woodenShovel = bot.inventory.findInventoryItem(mcData.itemsByName.wooden_shovel.id);\n        await bot.equip(woodenShovel, \"hand\");\n    }\n    // find gravel\n    await exploreUntil(bot, new Vec3(0, -1, 0), 60, () => {\n      const foundGravel = bot.findBlock({\n        matching: mcData.blocksByName.gravel.id,\n        maxDistance: 32\n      });\n      return foundGravel;\n    });\n    // mine gravel until flint count increase 1\n    while (newFlintsCount == flintsCount) {\n        await mineBlock(bot, \"gravel\", 1);\n        newFlintsCount = bot.inventory.count(mcData.itemsByName.flint.id);\n    }\n    bot.chat(\"1 flint mined.\");\n  }",
        "description": "Name: mineFlint; Description:This function equips the best available shovel, explores to find gravel, and mines it until the flint count in the inventory increases by one.\n"
    },
    "mineGoldOre": {
        "code": "async function mineGoldOre(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    // Find 1 gold_ore block\n    const goldOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const goldOres = bot.findBlocks({\n        matching: block => block.name === \"gold_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return goldOres.length >= 1 ? goldOres : null;\n    });\n    if (!goldOres) {\n      bot.chat(\"Could not find enough gold ores.\");\n      return;\n    }\n  \n    // Mine the 1 gold_ore block\n    await mineBlock(bot, \"gold_ore\", 1);\n    bot.chat(\"1 gold ore mined.\");\n  }",
        "description": "Name: mineGoldOre; Description:This function equips an iron pickaxe, searches for a gold ore block within a 32-block radius, and if found, mines it.\n"
    },
    "mineIronOre": {
        "code": "async function mineIronOre(bot) {\n    const ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      // Equip the stone pickaxe\n      let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n      if (!stonePickaxe) {\n        await craftStonePickaxe(bot);\n        let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n      } else {\n        await bot.equip(stonePickaxe, \"hand\");\n      }\n    }\n  \n    // Find 1 iron_ore block\n    const ironOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const ironOres = bot.findBlocks({\n        matching: block => block.name === \"iron_ore\" || block.name === \"deepslate_iron_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return ironOres.length >= 1 ? ironOres : null;\n    });\n    if (!ironOres) {\n      bot.chat(\"Could not find iron ore.\");\n      return;\n    }\n  \n    // Mine the 1 iron_ore block\n    await mineBlock(bot, \"iron_ore\", 1);\n    bot.chat(\"1 iron ore mined.\");\n  }",
        "description": "Name: mineIronOre; Description:Equips an iron pickaxe if available, otherwise equips a stone pickaxe if available or crafts one if not, then explores to find an iron ore block within a 32-block radius and mines it.\n"
    },
    "mineLapisLazuliOre": {
        "code": "async function mineLapisLazuliOre(bot) {\n    // Equip the iron pickaxe or stone pickaxe\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    let stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n    if (ironPickaxe) {\n        await bot.equip(ironPickaxe, \"hand\");\n    } else if (stonePickaxe) {\n        await bot.equip(stonePickaxe, \"hand\");\n    } else {\n        await craftStonePickaxe(bot);\n        stonePickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.stone_pickaxe.id);\n        await bot.equip(stonePickaxe, \"hand\");\n    }\n  \n    // Find 1 lapis_lazuli_ore block\n    const lapisOres = await exploreUntil(bot, new Vec3(1, -1, 1), 60, () => {\n      const lapisOres = bot.findBlocks({\n        matching: block => block.name === \"lapis_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return lapisOres.length >= 1 ? lapisOres : null;\n    });\n    if (!lapisOres) {\n      bot.chat(\"Could not find lapis lazuli ores.\");\n      return;\n    }\n  \n    // Mine the 1 lapis_lazuli_ore blocks\n    await mineBlock(bot, \"lapis_ore\", 1);\n    bot.chat(\"1 lapis lazuli ores mined.\");\n  }",
        "description": "Name: mineLapisLazuliOre; Description:Equips an iron or stone pickaxe, then explores the surroundings to find a lapis lazuli ore block within a 32-block radius, and finally mines the found ore block.\n"
    },
    "mineRedstoneOre": {
        "code": "async function mineRedstoneOre(bot) {\n    let ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n    if (ironPickaxe) {\n      await bot.equip(ironPickaxe, \"hand\");\n    } else {\n      await craftIronPickaxe(bot);\n      ironPickaxe = bot.inventory.findInventoryItem(mcData.itemsByName.iron_pickaxe.id);\n      await bot.equip(ironPickaxe, \"hand\");\n    }\n    // Find 1 redstone_ore block\n    const redstoneOres = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n      const redstoneOres = bot.findBlocks({\n        matching: block => block.name === \"redstone_ore\",\n        maxDistance: 32,\n        count: 1\n      });\n      return redstoneOres.length >= 1 ? redstoneOres : null;\n    });\n    if (!redstoneOres) {\n      bot.chat(\"Could not find enough redstone ores.\");\n      return;\n    }\n  \n    // Mine the 1 redstone_ore block\n    await mineBlock(bot, \"redstone_ore\", 1);\n    bot.chat(\"1 redstone ore mined.\");\n  }",
        "description": "Name: mineRedstoneOre; Description:This function equips an iron pickaxe, searches for a nearby redstone ore block, and then mines it if found.\n"
    },
    "placeMinecartOnRail": {
        "code": "async function placeMinecartOnRail(bot) {\n    // check minecart\n    const minecart = bot.inventory.findInventoryItem(mcData.itemsByName.minecart.id);\n    if (!minecart) {\n        bot.chat(\"No minecart found in inventory.\");\n        return;\n    }\n    // find rail\n    const rail = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        const rails = bot.findBlocks({\n          matching: block => block.name === \"rail\",\n          maxDistance: 32,\n          count: 1\n        });\n        return rails.length >= 1 ? rails[0] : null;\n      });\n      if (!rail) {\n        bot.chat(\"Could not find rail.\");\n        return;\n      }\n    // place the minecart\n    // bot.chat(`found rail at ${rail}`);\n    bot.chat(`/summon minecraft:minecart ${rail.x} ${rail.y} ${rail.z}`)\n    bot.chat(`/clear @s minecraft:minecart 1`);\n}",
        "description": "Name: placeMinecartOnRail; Description:This function searches for a minecart in the inventory and a rail block within a 32-block radius, then places a minecart at the location of the found rail.\n"
    },
    "placeRail": {
        "code": "async function placeRail(bot) {\n    // Check rail\n    const rail = bot.inventory.findInventoryItem(mcData.itemsByName.rail.id);\n    if (!rail) {\n        bot.chat(\"No rail found in inventory.\");\n        return;\n    }\n    // Place the rail\n    const railPosition = bot.entity.position;\n    await placeItem(bot, \"rail\", railPosition);\n}",
        "description": "Name: placeRail; Description:This function searches for rails in the inventory, and if found, places one at the current entity position.\n"
    },
    "placeWater": {
        "code": "async function placeWater(bot) {\n    // Check water\n    const waterBucket = bot.inventory.findInventoryItem(mcData.itemsByName.water_bucket.id);\n    if (!waterBucket) {\n        bot.chat(\"No water_bucket found in inventory.\");\n        return;\n    }\n    // Place the water\n    const waterPosition = bot.entity.position;\n    await bot.equip(waterBucket, \"hand\");\n    await bot.lookAt(waterPosition);\n    await bot.activateItem();\n    bot.chat(\"water placed.\");\n}",
        "description": "Name: placeWater; Description:This function searches for a water bucket in the inventory, equips it, looks at the current position, and activates the item to place water at that location.\n"
    },
    "plantMelonSeeds": {
        "code": "async function plantMelonSeeds(bot) {\n  // check seeds\n  const seeds = bot.inventory.findInventoryItem(mcData.itemsByName.melon_seeds.id);\n  if (!seeds) {\n    await collectMelonSeeds(bot);\n  }\n  await plantSeeds(bot, \"melon_seeds\");\n}",
        "description": "Name: plantMelonSeeds; Description:This function ensures the bot has melon seeds in its inventory, collecting them if needed, and then plants them.\n"
    },
    "plantPumpkinSeeds": {
        "code": "async function plantPumpkinSeeds(bot) {\n  // check seeds\n  const seeds = bot.inventory.findInventoryItem(mcData.itemsByName.pumpkin_seeds.id);\n  if (!seeds) {\n    await collectPumpkinSeeds(bot);\n  }\n  await plantSeeds(bot, \"pumpkin_seeds\");\n}",
        "description": "Name: plantPumpkinSeeds; Description:This function ensures the bot has pumpkin seeds in its inventory, collecting them if necessary, and then plants them.\n"
    },
    "plantWheatSeeds": {
        "code": "async function plantWheatSeeds(bot) {\n  // check seeds\n  const seeds = bot.inventory.findInventoryItem(mcData.itemsByName.wheat_seeds.id);\n  if (!seeds) {\n    await collectWheatSeeds(bot);\n  }\n  await plantSeeds(bot, \"wheat_seeds\");\n}",
        "description": "Name: plantWheatSeeds; Description:This function ensures the bot has wheat seeds in its inventory, collecting them if necessary, and then plants them.\n"
    },
    "shearOneSheep": {
        "code": "async function shearOneSheep(bot) {\n  // check shears\n  let shears = bot.inventory.findInventoryItem(mcData.itemsByName.shears.id);\n  if (!shears) {\n    await craftShears(bot);\n  }\n  // Equip the shears\n  await bot.equip(shears, \"hand\");\n  // Find the nearest sheep\n  let sheep = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n    let sheep = bot.nearestEntity(entity => {\n      return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;\n    });\n    return sheep;\n  });\n  if (!sheep) {\n    bot.chat(\"Could not find a sheep.\");\n    return;\n  }\n\n  // shear the sheep using the shears\n  sheep = bot.nearestEntity(entity => {return entity.name === \"sheep\" && entity.position.distanceTo(bot.entity.position) < 32;});\n  await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n  await bot.lookAt(sheep.position);\n  await bot.useOn(sheep);\n\n  // Collect the dropped items\n  await bot.pathfinder.goto(new GoalBlock(sheep.position.x, sheep.position.y, sheep.position.z));\n}",
        "description": "Name: shearOneSheep; Description:This function equips shears, finds the nearest sheep, moves towards it, uses the shears on the sheep, and then collects the dropped items.\n"
    },
    "smeltAllRawCopper": {
        "code": "async function smeltAllRawCopper(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  let rawCopperCount = bot.inventory.count(mcData.itemsByName.raw_copper.id)\n  // check raw copper\n  if (!rawCopperCount) {\n    return;\n  }\n  if (!coal)\n    await mineCoalOre(bot);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Place the furnace near the bot\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n\n  // Smelt all raw copper using the available coal as fuel\n  await smeltItem(bot, \"raw_copper\", \"coal\", rawCopperCount);\n  bot.chat(\"Raw copper smelted.\");\n}",
        "description": "Name: smeltAllRawCopper; Description:This function checks for a furnace and coal in the inventory, crafts a furnace if needed, places it near the bot, and then uses the available coal to smelt all raw copper in the inventory.\n"
    },
    "smeltAllRawGold": {
        "code": "async function smeltAllRawGold(bot) {\n    // Check if there is a furnace and some coals in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n    let rawGoldCount = bot.inventory.count(mcData.itemsByName.raw_gold.id)\n    // check raw gold\n    if (!rawGoldCount) {\n        return;\n    }\n    if (!coal)\n        await mineCoalOre(bot);\n    // If not, craft a furnace using the available cobblestone\n    if (!furnaceItem) {\n        await craftFurnace(bot);\n    }\n    // Place the furnace near the bot\n    const furnacePosition = await findSuitablePosition(bot);\n    await placeItem(bot, \"furnace\", furnacePosition);\n    // Smelt all raw gold using the available coal as fuel\n    await smeltItem(bot, \"raw_gold\", \"coal\", rawGoldCount);\n    bot.chat(\"Raw gold smelted.\");\n}",
        "description": "Name: smeltAllRawGold; Description:This function checks for a furnace and coal in the inventory, crafts or mines them if necessary, places the furnace, and then uses the available coal to smelt all raw gold in the inventory.\n"
    },
    "smeltAllRawIron": {
        "code": "async function smeltAllRawIron(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  let rawIronCount = bot.inventory.count(mcData.itemsByName.raw_iron.id)\n  // check raw iron\n  if (!rawIronCount) {\n    return;\n  }\n  if (!coal)\n    await mineCoalOre(bot);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n  // Place the furnace near the bot\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  \n  // Smelt all raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", rawIronCount);\n  bot.chat(\"Raw iron smelted.\");\n}",
        "description": "Name: smeltAllRawIron; Description:This function checks for a furnace and coal in the inventory, crafts a furnace if needed, places it near the bot, and then uses the available coal to smelt all raw iron in the inventory.\n"
    },
    "smeltCactusIntoGreenDye": {
        "code": "async function smeltCactusIntoGreenDye(bot) {\n    // Check if there is a furnace in the inventory\n    const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n    const cactusCount = bot.inventory.count(mcData.itemsByName.cactus.id)\n    const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id)\n    // If not, craft a furnace using the available cobblestone\n    if (!furnaceItem) {\n      await craftFurnace(bot);\n    }\n    // If not enough cactus, collect some\n    if (cactusCount < 5) {\n      await collectFiveCactusBlocks(bot);\n    }\n    // If not enough coal, collect some\n    if (!coal) {\n      await mineFiveCoalOres(bot);\n    }\n    // Find a suitable position to place the furnace\n    const furnacePosition = await findSuitablePosition(bot);\n    if (!furnacePosition) {\n      bot.chat(\"Could not find a suitable position to place the furnace.\");\n      return;\n    }\n  \n    // Place the furnace at the suitable position\n    await placeItem(bot, \"furnace\", furnacePosition);\n  \n    // Smelt 5 cactus using the available coal as fuel\n    await smeltItem(bot, \"cactus\", \"coal\", 5);\n    bot.chat(\"5 cactus smelted into green dye.\");\n  }",
        "description": "Name: smeltCactusIntoGreenDye; Description:This function ensures the bot has a furnace, sufficient cactus and coal, then places the furnace and uses it to smelt five cactus into green dye.\n"
    },
    "smeltFiveRawIron": {
        "code": "async function smeltFiveRawIron(bot) {\n  // Check if there is a furnace and some coals in the inventory\n  const furnaceItem = bot.inventory.findInventoryItem(mcData.itemsByName.furnace.id);\n  const coal = bot.inventory.findInventoryItem(mcData.itemsByName.coal.id);\n  // If not, craft a furnace using the available cobblestone\n  if (!furnaceItem) {\n    await craftFurnace(bot);\n  }\n\n  // Place the furnace near the bot\n  const furnacePosition = await findSuitablePosition(bot);\n  await placeItem(bot, \"furnace\", furnacePosition);\n  if (!coal)\n    await mineFiveCoalOres(bot);\n  // Smelt 5 raw iron using the available coal as fuel\n  await smeltItem(bot, \"raw_iron\", \"coal\", 5);\n  bot.chat(\"5 raw iron smelted.\");\n}",
        "description": "Name: smeltFiveRawIron; Description:This function ensures the bot has a furnace and coal in its inventory, crafts a furnace if needed, places it nearby, mines coal if necessary, and then uses the coal to smelt five raw iron ores.\n"
    },
    "takeAndMoveMinecart": {
        "code": "async function takeAndMoveMinecart(bot) {\n    // find minecart\n    let minecart = await exploreUntil(bot, new Vec3(1, 0, 1), 60, () => {\n        let minecart = bot.nearestEntity(entity => {\n          return entity.name === \"minecart\" && entity.position.distanceTo(bot.entity.position) < 32;\n        });\n        return minecart;\n      });\n      if (!minecart) {\n        bot.chat(\"Could not find a minecart.\");\n        return;\n      }\n    await bot.pathfinder.goto(new GoalBlock(minecart.position.x, minecart.position.y, minecart.position.z));\n    bot.chat(`${minecart.position}`);\n    await bot.activateEntity(minecart);\n    // move the minecart along the rails\n    let lastPosition = bot.entity.position.clone();\n    do {\n        let forward = minecart.velocity.z > 0 ? 1 : -1;\n        let left = minecart.velocity.x > 0 ? 1 : -1;\n        bot.chat(`minecart.velocity: ${minecart.velocity}, next direction: (x, z) = (${left}, ${forward})`);\n        await bot.moveVehicle(left, forward);\n\n        // check if the position has changed\n        if (lastPosition.equals(bot.entity.position)) {\n            break; // exit the loop if the position has not changed\n        }\n        lastPosition = bot.entity.position.clone();\n    } while (true)\n\n    // dismount from the minecart\n    await bot.dismount();\n}",
        "description": "Name: takeAndMoveMinecart; Description:This function finds a nearby minecart, navigates to it, activates it, moves it along the rails by adjusting its velocity, and then dismounts from it.\n"
    }
}